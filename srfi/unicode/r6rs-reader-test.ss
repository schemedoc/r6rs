
(module r6rs-reader-test mzscheme
  (require (prefix r6rs- "r6rs-reader.ss"))

  (define passed 0)

  (define (test expect str)
    ;; Try with both read and read-syntax, to help make
    ;;  sure that the readtable is working right:
    (define (once r6rs-read)
      (let ([v (r6rs-read (open-input-string str))])
	(unless (equal? v expect)
	  (error 'test "for ~a: expected ~e, got ~e"
		 'str expect v))
	(set! passed (add1 passed))))
    ;; (printf "Trying ~s\n" str)
    (once r6rs-read)
    (once (lambda (x) (syntax-e (r6rs-read-syntax 'stx x)))))

  (define (test-str expect str)
    (test expect (format "\"~a\"" str)))

  (define (test-str+sym expect str)
    (test-str expect str)
    (test (string->symbol expect) (format "~a" str))
    (test (string->symbol expect) (format "~a " str))
    (test (string->symbol expect) (format "~a(" str))
    (test (string->symbol expect) (format "~a\"" str)))

  (define (test-error str)
    (define (once r6rs-read)
      (with-handlers ([exn:fail:read? (lambda (exn)
					(printf "OK: ~a\n" (exn-message exn))
					(set! passed (add1 passed)))])
	(r6rs-read (open-input-string str))
	(error 'test-error "should have failed")))
    (once r6rs-read)
    (once (lambda (x) (r6rs-read-syntax 'stx x))))

  (define (test-str-error str)
    (test-error (format "\"~a\"" str)))

  (define (test-sym-error str)
    (test-error (format "~a" str)))

  (define (test-str+sym-error str)
    (test-str-error str)
    (test-sym-error str))

  (test-str+sym (string (integer->char 97)) "a")

  (test-str (string (integer->char 7)) "\\a")
  (test-str (string (integer->char 8)) "\\b")
  (test-str (string (integer->char 9)) "\\t")
  (test-str (string (integer->char 10)) "\\n")
  (test-str (string (integer->char 11)) "\\v")
  (test-str (string (integer->char 12)) "\\f")
  (test-str (string (integer->char 13)) "\\r")
  (test-str (string (integer->char 34)) "\\\"")
  (test-str " " "\\ ")
  (test-str "abcd" "abc\\\n     d")
  (test-str "abc d" "abc\\\n     \\ d")
  (test-str "abc\nd" "abc\\\n     \nd")

  (test-str+sym (string (integer->char #x56)) "\\x56;")
  (test-str+sym (string (integer->char #x56)) "\\x0056;")
  (test-str+sym (string (integer->char #x1256)) "\\x1256;")
  (test-str+sym (string (integer->char #x00105678)) "\\x00105678;")

  (test-str-error "\\\r")

  (define (test-char n str)
    (test (integer->char n) str)
    (test (integer->char n) (string-append str ";"))
    (test (integer->char n) (string-append str "\t"))
    (test (integer->char n) (string-append str "("))
    (test (integer->char n) (string-append str "\"")))

  (test-char 0 "#\\nul")
  (test-char 7 "#\\alarm")
  (test-char 8 "#\\backspace")
  (test-char 9 "#\\tab")
  (test-char 10 "#\\newline")
  (test-char 10 "#\\linefeed")
  (test-char 11 "#\\vtab")
  (test-char 12 "#\\page")
  (test-char 13 "#\\return")
  (test-char (char->integer #\() "#\\(")
  (test-char (char->integer #\() "#\\()")
  (test-char (char->integer #\x) "#\\x")
  (test-char (char->integer #\u) "#\\u")
  (test-char (char->integer #\U) "#\\U")
  (test-char #x1256 (format "#\\~a" (integer->char #x1256)))

  (test-char #x56 "#\\x56")
  (test-char #x56 "#\\x0056")
  (test-char #x3bb "#\\x03bb")
  (test-char #x3BB "#\\x03BB")
  (test-char #x1256 "#\\x1256")
  (test-char #x00105678 "#\\x00105678")

  (test-error "#\\nonesuch")
  (test-error "#\\Nul")
  (test-error "#\\X20")
  (test-error "#\\x000000000")
  (test-error (format "#\\x~az" (integer->char  #x1256)))

  (define (test-hex-error str)
    (test-str+sym-error (string-append str ";"))
    (test-error (string-append "#" str)))

  (test-hex-error "\\xza")
  (test-hex-error "\\xaz")
  (test-hex-error "\\xd90x")
  (test-hex-error "\\xx90d")
  (test-hex-error "\\xd900")
  (test-hex-error "\\x0000d900")
  (test-hex-error "\\x00125678")

  (test-sym-error "|")
  (test-sym-error "|a|")
  (test-sym-error "+a")

  (test '+ "+")
  (test '- "-")
  (test '... "...")
  (test 'Apple "Apple")
  (test 'a-b "a-b")
  (test 'a.b "a.b")
  (test 'a@b "a@b")
  (map (lambda (ch)
	 (let ([s (format "~ab" ch)])
	   (test (string->symbol s) s))
	 (let ([s (format "a~ab" ch)])
	   (test (string->symbol s) s)))
       (string->list "!$%&*<>=?_~"))
  (test (string->symbol "\u3BB") "\u3BB")

  ;; Double-check that we didn't mess up numbers:
  (test 1.0 "1.0")
  (test 1.0 "+1.0")
  (test -1.0 "-1.0")
  (test 0.01 ".01")

  (printf "~a tests passed\n" passed))
