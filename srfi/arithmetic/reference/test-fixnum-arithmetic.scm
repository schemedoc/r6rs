; This file is part of the reference implementation of the R6RS Arithmetic SRFI.
; See file COPYING.

; Tests for fixnum and fx arithmetic

(define (n-r5rs= a b)
  (fixnum= a (r5rs->number b)))

(check (fixnum? (least-fixnum)) => #t)
(check (fixnum? (greatest-fixnum)) => #t)
(check (numerical fixnum? 14) => #t)
(check (numerical fixnum? 1234567890) => #f)
(check (numerical fixnum? 3.4) => #f)
(check (numerical fixnum? 3-4i) => #f)
(check (numerical fixnum? 3/4) => #f)
(check (fixnum? (fixnum-width)) => #t)

(check (numerical fixnum= -1 13) => #f)
(check (numerical fixnum= 13 13) => #t)
(check (numerical fixnum= 14 13) => #f)
(check (numerical fixnum> -1 13) => #f)
(check (numerical fixnum> 13 13) => #f)
(check (numerical fixnum> 14 13) => #t)
(check (numerical fixnum< -1 13) => #t)
(check (numerical fixnum< 13 13) => #f)
(check (numerical fixnum< 14 13) => #f)
(check (numerical fixnum>= -1 13) => #f)
(check (numerical fixnum>= 13 13) => #t)
(check (numerical fixnum>= 14 13) => #t)
(check (numerical fixnum<= -1 13) => #t)
(check (numerical fixnum<= 13 13) => #t)
(check (numerical fixnum<= 14 13) => #f)
(check (numerical fx= -7 -5) => #f)
(check (numerical fx= -5 -5) => #t)
(check (numerical fx= 22 -5) => #f)
(check (numerical fx> -7 -5) => #f)
(check (numerical fx> -5 -5) => #f)
(check (numerical fx> 22 -5) => #t)
(check (numerical fx< -7 -5) => #t)
(check (numerical fx< -5 -5) => #f)
(check (numerical fx< 22 -5) => #f)
(check (numerical fx>= -7 -5) => #f)
(check (numerical fx>= -5 -5) => #t)
(check (numerical fx>= 22 -5) => #t)
(check (numerical fx<= -7 -5) => #t)
(check (numerical fx<= -5 -5) => #t)
(check (numerical fx<= 22 -5) => #f)

(check (numerical fixnum-zero? -6) => #f)
(check (numerical fixnum-zero? +0) => #t)
(check (numerical fixnum-zero? 17) => #f)
(check (numerical fixnum-positive? -6) => #f)
(check (numerical fixnum-positive? +0) => #f)
(check (numerical fixnum-positive? 17) => #t)
(check (numerical fixnum-negative? -6) => #t)
(check (numerical fixnum-negative? +0) => #f)
(check (numerical fixnum-negative? 17) => #f)
(check (numerical fixnum-odd? -6) => #f)
(check (numerical fixnum-odd? +0) => #f)
(check (numerical fixnum-odd? 17) => #t)
(check (numerical fixnum-even? -6) => #t)
(check (numerical fixnum-even? +0) => #t)
(check (numerical fixnum-even? 17) => #f)
(check (numerical fxzero? -6) => #f)
(check (numerical fxzero? +0) => #t)
(check (numerical fxzero? 17) => #f)
(check (numerical fxpositive? -6) => #f)
(check (numerical fxpositive? +0) => #f)
(check (numerical fxpositive? 17) => #t)
(check (numerical fxnegative? -6) => #t)
(check (numerical fxnegative? +0) => #f)
(check (numerical fxnegative? 17) => #f)
(check (numerical fxodd? -6) => #f)
(check (numerical fxodd? +0) => #f)
(check (numerical fxodd? 17) => #t)
(check (numerical fxeven? -6) => #t)
(check (numerical fxeven? +0) => #t)
(check (numerical fxeven? 17) => #f)

(check (numerical fixnum-max 7) ==> 7)
(check (numerical fixnum-max 17 0 -28 4) ==> 17)
(check (numerical fixnum-max -7 0 -28 4) ==> 4)
(check (numerical fixnum-min 7) ==> 7)
(check (numerical fixnum-min 17 0 -28 4) ==> -28)
(check (numerical fixnum-min -7 0 -28 4) ==> -28)
(check (numerical fxmax 7) ==> 7)
(check (numerical fxmax 17 0 -28 42) ==> 42)
(check (numerical fxmin 7) ==> 7)
(check (numerical fxmin 17 0 -28 42) ==> -28)

(check (fixnum+ (greatest-fixnum) (make-fixnum 1))
   ==> (fixnum-rep (least-fixnum)))
(check (numerical fixnum+ 3 4) ==> 7)
(check (numerical fixnum+ 3 0) ==> 3)
(check (numerical fixnum+ 33 -16) ==> 17)
(check (numerical fixnum+ -33 13) ==> -20)
(check (numerical fixnum+ -33 -34) ==> -67)
(check (fixnum+ (make-fixnum -1) (least-fixnum))
   ==> (fixnum-rep (greatest-fixnum)))
(check (fixnum+ (least-fixnum) (least-fixnum)) ==> 0)
(check (numerical fixnum+) ==> 0)
(check (numerical fixnum+ 7) ==> 7)
(check (numerical fixnum+ 7 8 9) ==> 24)

(check (numerical fx+ 3 4) ==> 7)
(check (numerical fx+ 3 0) ==> 3)
(check (numerical fx+ 33 -16) ==> 17)
(check (numerical fx+ -33 13) ==> -20)
(check (numerical fx+ -33 -34) ==> -67)

(check (numerical fixnum- 84 12) ==> 72)
(check (numerical fixnum- 84 0) ==> 84)
(check (numerical fixnum- 84 -16) ==> 100)
(check (fixnum- (greatest-fixnum) (least-fixnum))
   ==> -1)
(check (fixnum= (fixnum- (make-fixnum 0) (least-fixnum)) (least-fixnum))
    => #t)
(check (numerical fixnum- -4 -7) ==> 3)
(check (fixnum- (least-fixnum) (least-fixnum)) ==> 0)
(check (numerical fixnum- 3) ==> -3)
(check (numerical fixnum- 0) ==> 0)
(check (numerical fixnum- -4) ==> 4)
(check (fixnum- (least-fixnum)) ==> (fixnum-rep (least-fixnum)))
(check (numerical fixnum- 1 2 3 4 5) ==> -13)

(check (numerical fx- 84 12) ==> 72)
(check (numerical fx- 84 0) ==> 84)
(check (numerical fx- 84 -16) ==> 100)
(check (numerical fx- -4 -7) ==> 3)
(check (numerical fx- 3) ==> -3)
(check (numerical fx- 0) ==> 0)
(check (numerical fx- -4) ==> 4)

(check (numerical fixnum* 3 4) ==> 12)
(check (numerical fixnum* 3 0) ==> 0)
(check (numerical fixnum* 3 -5) ==> -15)
(check (numerical fixnum* 0 6) ==> 0)
(check (numerical fixnum* 0 0) ==> 0)
(check (numerical fixnum* 0 -7) ==> 0)
(check (numerical fixnum* -8 9) ==> -72)
(check (numerical fixnum* -8 0) ==> 0)
(check (numerical fixnum* -8 -11) ==> 88)
(check (numerical fixnum* 3 999999) ==> 2999997)
(check (numerical fixnum* 99999 4) ==> 399996)

; (2^m-1)*(2^m-1) = 2^(2m)-2^(m+1)+1
(let* ((m (r5rs:- (fixnum-rep (fixnum-width)) 5))
       (two^m-1 (r5rs:- (r5rs:expt 2 m) 1))
       (expected (r5rs:- 1 (r5rs:expt 2 (r5rs:+ m 1)))))
  (check (numerical fixnum* two^m-1 two^m-1) ==> expected))
(check (numerical fixnum*) ==> 1)
(check (numerical fixnum* 83) ==> 83)
(check (numerical fixnum* 2 3 4 5) ==> 120)

(check (numerical fx* 3 4) ==> 12)
(check (numerical fx* 3 0) ==> 0)
(check (numerical fx* 3 -5) ==> -15)
(check (numerical fx* 0 6) ==> 0)
(check (numerical fx* 0 0) ==> 0)
(check (numerical fx* 0 -7) ==> 0)
(check (numerical fx* -8 9) ==> -72)
(check (numerical fx* -8 0) ==> 0)
(check (numerical fx* -8 -11) ==> 88)
(check (numerical fx* 3 999999) ==> 2999997)
(check (numerical fx* 99999 4) ==> 399996)
(let* ((m (r5rs:- (fixnum-rep (fixnum-width)) 3))
       (two^m-1 (r5rs:- (r5rs:expt 2 m) 1))
       (expected (r5rs:- 1 (r5rs:expt 2 (r5rs:+ m 1)))))
  (check (numerical fixnum* two^m-1 two^m-1) ==> expected))

(check (numerical fixnum-div 1000000 999) ==> 1001)
(check (numerical fixnum-mod 1000000 999) ==> 1)
(check (numerical fixnum-div 1000000 -1001) ==> -999)
(check (numerical fixnum-mod 1000000 -1001) ==> 1)
(check (numerical fixnum-div -1000000 999) ==> -1002)
(check (numerical fixnum-mod -1000000 999) ==> 998)
(check (numerical fixnum-div -1000000 -999) ==> 1002)
(check (numerical fixnum-mod -1000000 -999) ==> 998)
(check (numerical fixnum-div 1000 1) ==> 1000)
(check (numerical fixnum-mod 1000 1) ==> 0)
(check (fixnum-div (greatest-fixnum) (least-fixnum)) ==> 0)
(check (fixnum= (fixnum-mod (greatest-fixnum) (least-fixnum))
                (greatest-fixnum)) => #t)
(check (fixnum-div (least-fixnum) (greatest-fixnum)) ==> -2)
(check (fixnum= (fixnum-mod (least-fixnum) (greatest-fixnum))
                (fixnum- (greatest-fixnum) (make-fixnum 1))) => #t)
(check (fixnum-div (least-fixnum) (least-fixnum)) ==> 1)
(check (fixnum-mod (least-fixnum) (least-fixnum)) ==> 0)
(check (fixnum= (fixnum-div (least-fixnum) (make-fixnum 1))
                (least-fixnum)) => #t)
(check (fixnum-mod (least-fixnum) (make-fixnum 1)) ==> 0)
(check (fixnum= (fixnum-div (least-fixnum) (make-fixnum -1))
                (least-fixnum)) => #t)
(check (fixnum-mod (least-fixnum) (make-fixnum -1)) ==> 0)

(check (numerical fixnum-div0 1000000 999) ==> 1001)
(check (numerical fixnum-mod0 1000000 999) ==> 1)
(check (numerical fixnum-div0 1000000 -1001) ==> -999)
(check (numerical fixnum-mod0 1000000 -1001) ==> 1)
(check (numerical fixnum-div0 -1000000 999) ==> -1001)
(check (numerical fixnum-mod0 -1000000 999) ==> -1)
(check (numerical fixnum-div0 -1000000 -999) ==> 1001)
(check (numerical fixnum-mod0 -1000000 -999) ==> -1)
(check (numerical fixnum-div0 1000 1) ==> 1000)
(check (numerical fixnum-mod0 1000 1) ==> 0)
(check (fixnum-div0 (greatest-fixnum) (least-fixnum)) ==> -1)
(check (fixnum-mod0 (greatest-fixnum) (least-fixnum)) ==> -1)
(check (fixnum-div0 (least-fixnum) (greatest-fixnum)) ==> -1)
(check (fixnum-mod0 (least-fixnum) (greatest-fixnum)) ==> -1)
(check (fixnum-div0 (least-fixnum) (least-fixnum)) ==> 1)
(check (fixnum-mod0 (least-fixnum) (least-fixnum)) ==> 0)
(check (fixnum= (fixnum-div0 (least-fixnum) (make-fixnum 1))
                (least-fixnum)) => #t)
(check (fixnum-mod0 (least-fixnum) (make-fixnum 1)) ==> 0)
(check (fixnum= (fixnum-div0 (least-fixnum) (make-fixnum -1))
                (least-fixnum)) => #t)
(check (fixnum-mod0 (least-fixnum) (make-fixnum -1)) ==> 0)

(let ((checker (lambda (div+mod div mod x y)
                 (call-with-values
                  (lambda () (numerical div+mod x y))
                  (lambda (d m)
                    (check (fixnum= d (numerical div x y)) => #t)
                    (check (fixnum= m (numerical mod x y)) => #t)))))
      (xs '(-999999 0 100 1000000))
      (ys '(-100 -99 57 100 481)))
  (define (test-div-mod x y)
    (checker fixnum-div+mod fixnum-div fixnum-mod x y))
  (define (test-div0-mod0 x y)
    (checker fixnum-div0+mod0 fixnum-div0 fixnum-mod0 x y))
  (define (test-fxdiv-mod x y)
    (checker fxdiv+mod fxdiv fxmod x y))
  (define (test-fxdiv0-mod0 x y)
    (checker fxdiv0+mod0 fxdiv0 fxmod0 x y))

  (for-each (lambda (x)
              (for-each (lambda (y)
                          (test-div-mod x y)
                          (test-div0-mod0 x y)
                          (test-fxdiv-mod x y)
                          (test-fxdiv0-mod0 x y))
                        ys))
            xs))

(let ((checker0 (lambda (op/carry x y z m0 d0)
                  (call-with-values
                   (lambda () (numerical op/carry x y z))
                   (lambda (m d)
                     (check (fixnum= m (make-fixnum m0)) => #t)
                     (check (fixnum= d (make-fixnum d0)) => #t)))))
      (checker (lambda (op/carry x y z m0 d0)
                 (call-with-values
                  (lambda () (op/carry x y z))
                  (lambda (m d)
                    (check (fixnum= m m0) => #t)
                    (check (fixnum= d d0) => #t)))))
      (zero (make-fixnum 0))
      (one (make-fixnum 1))
      (two (make-fixnum 2)))
  (checker0 fixnum+/carry 1000 2345 6789 10134 0)
  (checker0 fixnum-/carry 1000 2345 6789 -8134 0)
  (checker0 fixnum*/carry 12 100 34 1234 0)

  (checker fixnum+/carry (greatest-fixnum) one zero (least-fixnum) one)
  (checker fixnum+/carry (greatest-fixnum) (greatest-fixnum) zero
           (fixnum+ (greatest-fixnum) (greatest-fixnum)) one)
  (checker fixnum+/carry (least-fixnum) (least-fixnum) (least-fixnum)
           (least-fixnum) (fixnum- one))
  (checker fixnum+/carry (greatest-fixnum) (greatest-fixnum) (greatest-fixnum)
           (fixnum+ (greatest-fixnum) (greatest-fixnum) (greatest-fixnum)) one)

  (checker fixnum-/carry (least-fixnum) one zero
           (greatest-fixnum) (fixnum- one))
  (checker fixnum-/carry (greatest-fixnum) (greatest-fixnum) zero zero zero)
  (checker fixnum-/carry (least-fixnum) (least-fixnum) (least-fixnum)
           (least-fixnum) one)
  (checker fixnum-/carry (least-fixnum) (greatest-fixnum) (greatest-fixnum)
           (fixnum+ (least-fixnum) two) (fixnum- one))

  (checker fixnum*/carry (greatest-fixnum) (greatest-fixnum) zero
           one (fixnum-div (greatest-fixnum) two))
  (checker fixnum*/carry (greatest-fixnum) (greatest-fixnum) (greatest-fixnum)
           (least-fixnum) (fixnum- (fixnum-div (least-fixnum) two)))
  (checker fixnum*/carry (least-fixnum) (least-fixnum) (least-fixnum)
           (least-fixnum) (fixnum- (fixnum-div (least-fixnum) two))))

(let ((n-1 (make-fixnum -1))
      (n0 (make-fixnum 0))
      (n1 (make-fixnum 1))
      (n2 (make-fixnum 2))
      (n3 (make-fixnum 3))
      (n7 (make-fixnum 7))
      (n8 (make-fixnum 8))
      (n15  (make-fixnum 15))
      (n85  (make-fixnum #b01010101))
      (n170 (make-fixnum #b10101010))
      (n255 (make-fixnum 255))
      (n256 (make-fixnum 256)))

  (check (fixnum-not n15) ==> -16)
  (check (fixnum= (fixnum-not n0) n-1) => #t)
  (check (fixnum= (fixnum-not (greatest-fixnum)) (least-fixnum)) => #t)
  (check (fixnum= (fixnum-not (least-fixnum)) (greatest-fixnum)) => #t)

  (check (fixnum-and n85 n170) ==> 0)
  (check (fixnum-and n85 n255) ==> 85)
  (check (fixnum-and (least-fixnum) (greatest-fixnum)) ==> 0)

  (check (fixnum-ior n85 n170) ==> 255)
  (check (fixnum-ior n85 n255) ==> 255)
  (check (fixnum-ior (least-fixnum) (greatest-fixnum)) ==> -1)

  (check (fixnum-xor n85 n170) ==> 255)
  (check (fixnum-xor n85 n255) ==> 170)
  (check (fixnum-xor (least-fixnum) (greatest-fixnum)) ==> -1)

  (check (fixnum-if n85 n15 n170) ==> 175)
  (check (fixnum-if n15 n85 n170) ==> 165)
  (check (fixnum-if (least-fixnum) (least-fixnum) (greatest-fixnum)) ==> -1)

  (check (fixnum-bit-count n-1) ==> 0)
  (check (fixnum-bit-count (fixnum- n255)) ==> 7)
  (check (fixnum-bit-count n0) ==> 0)
  (check (fixnum-bit-count n15) ==> 4)
  (check (fixnum-bit-count (fixnum+ n85 (fixnum* n170 n256))) ==> 8)
  (check (fixnum= (fixnum-bit-count (greatest-fixnum))
                  (fixnum- (fixnum-width) n1)) => #t)

  (check (fixnum-length n-1) ==> 1)
  (check (fixnum-length n0) ==> 0)
  (check (fixnum-length n15) ==> 4)
  (check (fixnum-length n85) ==> 7)
  (check (fixnum= (fixnum-length (greatest-fixnum))
                  (fixnum- (fixnum-width) n1)) => #t)
  (check (fixnum= (fixnum-length (least-fixnum))
                  (fixnum-width)) => #t)

  (check (fixnum-first-bit-set n-1) ==> 0)
  (check (fixnum-first-bit-set n0) ==> -1)
  (check (fixnum-first-bit-set n85) ==> 0)
  (check (fixnum-first-bit-set n170) ==> 1)
  (check (fixnum-first-bit-set n256) ==> 8)
  (check (fixnum= (fixnum-first-bit-set (least-fixnum))
                  (fixnum- (fixnum-width) n1)) => #t)

  (check (fixnum-bit-set? n-1 n256) => #f)
  (check (fixnum-bit-set? n-1 n15) => #t)
  (check (fixnum-bit-set? n85 n2) => #t)
  (check (fixnum-bit-set? n85 n3) => #f)
  (check (fixnum-bit-set? (least-fixnum) (fixnum- (fixnum-width) n1)) => #t)

  (check (fixnum-copy-bit n85 n15 n0) ==> 85)
  (check (fixnum-copy-bit n85 n15 n1) ==> 32853)

  (check (fixnum-bit-field n255 n1 n3) ==> 3)
  (check (fixnum-bit-field n85 n1 n3) ==> 2)
  (check (fixnum-bit-field n85 n0 n3) ==> 5)
  (check (fixnum-bit-field n170 n2 n15) ==> 42)
  (check (fixnum-bit-field n170 n3 n15) ==> 21)
  (check (fixnum= (fixnum-bit-field (least-fixnum) n2 n256)
                  (fixnum-div (fixnum+ (fixnum-div (greatest-fixnum) n2) n1)
                              n2)) => #t)
  (check (fixnum-bit-field
          (greatest-fixnum) (greatest-fixnum) (greatest-fixnum)) ==> 0)

  (check (fixnum-copy-bit-field n85 n3 n15 (greatest-fixnum)) ==> 32765)
  (check (fixnum-copy-bit-field n-1 n1 (greatest-fixnum) (least-fixnum)) ==> 1)
  (check (fixnum-copy-bit-field n170 (greatest-fixnum) (greatest-fixnum) n255)
         ==> 170)
  (check (numerical fixnum-copy-bit-field #b1101101010 0 4 0)
         ==> #b1101100000)
  (check (numerical fixnum-copy-bit-field #b1101101010 0 4 -1)
         ==> #b1101101111)
  (check (numerical fixnum-copy-bit-field #b110100100010000 5 9 -1)
         ==> #b110100111110000)

  (check (fixnum-arithmetic-shift n-1 n-1) ==> -1)
  (check (fixnum-arithmetic-shift n-1 n0) ==> -1)
  (check (fixnum-arithmetic-shift n-1 n2) ==> -4)
  (check (fixnum-arithmetic-shift (least-fixnum) (fixnum-width)) ==> 0)
  (check (fixnum-arithmetic-shift (least-fixnum) (fixnum- n255)) ==> -1)
  (check (fixnum-arithmetic-shift n85 n1) ==> 170)
  (check (fixnum-arithmetic-shift n255 n256) ==> 0)
  (check (fixnum-arithmetic-shift n255 n3) ==> 2040)
  (check (fixnum-arithmetic-shift n170 n-1) ==> 85)
  (check (fixnum-arithmetic-shift (greatest-fixnum) (fixnum-width)) ==> 0)

  (check (fixnum-arithmetic-shift-left n-1 n0) ==> -1)
  (check (fixnum-arithmetic-shift-left n-1 n2) ==> -4)
  (check (fixnum-arithmetic-shift-left (least-fixnum) (fixnum-width)) ==> 0)
  (check (fixnum-arithmetic-shift-left n85 n1) ==> 170)
  (check (fixnum-arithmetic-shift-left n255 n256) ==> 0)
  (check (fixnum-arithmetic-shift-left n255 n3) ==> 2040)
  (check (fixnum-arithmetic-shift-left (greatest-fixnum) (fixnum-width)) ==> 0)

  (check (fixnum-arithmetic-shift-right n-1 n0) ==> -1)
  (check (fixnum-arithmetic-shift-right n-1 n2) ==> -1)
  (check (fixnum-arithmetic-shift-right (least-fixnum) (fixnum-width)) ==> -1)
  (check (fixnum-arithmetic-shift-right n85 n1) ==> 42)
  (check (fixnum-arithmetic-shift-right n255 n256) ==> 0)
  (check (fixnum-arithmetic-shift-right n255 n3) ==> 31)
  (check (fixnum-arithmetic-shift-right
          (greatest-fixnum) (fixnum-width)) ==> 0)

  (check (fixnum-logical-shift-left n-1 n0) ==> -1)
  (check (fixnum-logical-shift-left n-1 n2) ==> -4)
  (check (fixnum-logical-shift-left (least-fixnum) (fixnum-width)) ==> 0)
  (check (fixnum-logical-shift-left n85 n1) ==> 170)
  (check (fixnum-logical-shift-left n255 n256) ==> 0)
  (check (fixnum-logical-shift-left n255 n3) ==> 2040)
  (check (fixnum-logical-shift-left (greatest-fixnum) (fixnum-width)) ==> 0)

  (check (fixnum-logical-shift-right n-1 n0) ==> -1)
  (check (fixnum= (fixnum-logical-shift-right n-1 n1)
                  (greatest-fixnum)) => #t)
  (check (fixnum= (fixnum-logical-shift-right n-1 n2)
                  (fixnum-div (greatest-fixnum) n2)) => #t)
  (check (fixnum-logical-shift-right (least-fixnum) (fixnum-width)) ==> 0)
  (check (fixnum-logical-shift-right n85 n1) ==> 42)
  (check (fixnum-logical-shift-right n255 n256) ==> 0)
  (check (fixnum-logical-shift-right n255 n3) ==> 31)
  (check (fixnum-logical-shift-right
          (greatest-fixnum) (fixnum-width)) ==> 0)

  (check (fixnum-rotate-bit-field n-1 n1 n15 n3) ==> -1)
  (check (fixnum-rotate-bit-field n15 n2 n15 n3) ==> 99)
  (check (fixnum-rotate-bit-field n170 n3 n8 n3) ==> #b01101010)

  (check (fixnum-reverse-bit-field n15 n3 n15) ==> 16391))

