;;; psyntax.pp
;;; automatically generated from psyntax.ss
;;; Tue Aug 1 21:30:16 EDT 2006
;;; see copyright notice in psyntax.ss
;;; http://www.cs.indiana.edu/chezscheme/syntax-case/7.1/psyntax.ss

(let ()
((lambda ()
   (letrec ((noexpand62 '"noexpand")
            (make-syntax-object63 (lambda (expression2523 wrap2522)
                                    (vector
                                      'syntax-object
                                      expression2523
                                      wrap2522)))
            (syntax-object?64 (lambda (x2521)
                                (if (vector? x2521)
                                    (if (= (vector-length x2521) '3)
                                        (eq? (vector-ref x2521 '0)
                                             'syntax-object)
                                        '#f)
                                    '#f)))
            (syntax-object-expression65 (lambda (x2520)
                                          (vector-ref x2520 '1)))
            (syntax-object-wrap66 (lambda (x2519)
                                    (vector-ref x2519 '2)))
            (set-syntax-object-expression!67 (lambda (x2518 update2517)
                                               (vector-set!
                                                 x2518
                                                 '1
                                                 update2517)))
            (set-syntax-object-wrap!68 (lambda (x2516 update2515)
                                         (vector-set!
                                           x2516
                                           '2
                                           update2515)))
            (annotation?132 (lambda (x2514) '#f))
            (top-level-eval-hook133 (lambda (x2513)
                                      (eval (list noexpand62 x2513))))
            (local-eval-hook134 (lambda (x2512)
                                  (eval (list noexpand62 x2512))))
            (define-top-level-value-hook135 (lambda (sym2511 val2510)
                                              (top-level-eval-hook133
                                                (list
                                                  'define
                                                  sym2511
                                                  (list 'quote val2510)))))
            (error-hook136 (lambda (who2509 why2508 what2507)
                             (error who2509 '"~a ~s" why2508 what2507)))
            (put-cte-hook141 (lambda (symbol2506 val2505)
                               ($sc-put-cte symbol2506 val2505 '*top*)))
            (get-global-definition-hook142 (lambda (symbol2504)
                                             (getprop
                                               symbol2504
                                               '*sc-expander*)))
            (put-global-definition-hook143 (lambda (symbol2503 x2502)
                                             (if (not x2502)
                                                 (remprop
                                                   symbol2503
                                                   '*sc-expander*)
                                                 (putprop
                                                   symbol2503
                                                   '*sc-expander*
                                                   x2502))))
            (read-only-binding?144 (lambda (symbol2501) '#f))
            (get-import-binding145 (lambda (symbol2500 token2499)
                                     (getprop symbol2500 token2499)))
            (put-import-binding146 (lambda (symbol2498 token2497 x2496)
                                     (if (not x2496)
                                         (remprop symbol2498 token2497)
                                         (putprop
                                           symbol2498
                                           token2497
                                           x2496))))
            (generate-id147 ((lambda (digits2482)
                               ((lambda (base2484 session-key2483)
                                  (letrec ((make-digit2485 (lambda (x2495)
                                                             (string-ref
                                                               digits2482
                                                               x2495)))
                                           (fmt2486 (lambda (n2489)
                                                      ((letrec ((fmt2490 (lambda (n2492
                                                                                  a2491)
                                                                           (if (< n2492
                                                                                  base2484)
                                                                               (list->string
                                                                                 (cons
                                                                                   (make-digit2485
                                                                                     n2492)
                                                                                   a2491))
                                                                               ((lambda (r2494
                                                                                         rest2493)
                                                                                  (fmt2490
                                                                                    rest2493
                                                                                    (cons
                                                                                      (make-digit2485
                                                                                        r2494)
                                                                                      a2491)))
                                                                                 (modulo
                                                                                   n2492
                                                                                   base2484)
                                                                                 (quotient
                                                                                   n2492
                                                                                   base2484))))))
                                                         fmt2490)
                                                        n2489
                                                        '()))))
                                    ((lambda (n2487)
                                       (lambda (name2488)
                                         (begin
                                           (set! n2487 (+ n2487 '1))
                                           (string->symbol
                                             (string-append
                                               session-key2483
                                               (fmt2486 n2487))))))
                                      '-1)))
                                 (string-length digits2482)
                                 '"_"))
                              '"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&*/:<=>?~_^.+-"))
            (built-lambda?221 (lambda (x2481)
                                (if (pair? x2481)
                                    (eq? (car x2481) 'lambda)
                                    '#f)))
            (build-sequence239 (lambda (ae2478 exps2477)
                                 ((letrec ((loop2479 (lambda (exps2480)
                                                       (if (null?
                                                             (cdr exps2480))
                                                           (car exps2480)
                                                           (if (equal?
                                                                 (car exps2480)
                                                                 '(void))
                                                               (loop2479
                                                                 (cdr exps2480))
                                                               (cons
                                                                 'begin
                                                                 exps2480))))))
                                    loop2479)
                                   exps2477)))
            (build-letrec240 (lambda (ae2476 vars2475 val-exps2474
                                      body-exp2473)
                               (if (null? vars2475)
                                   body-exp2473
                                   (list
                                     'letrec
                                     (map list vars2475 val-exps2474)
                                     body-exp2473))))
            (build-body241 (lambda (ae2472 vars2471 val-exps2470
                                    body-exp2469)
                             (build-letrec240
                               ae2472
                               vars2471
                               val-exps2470
                               body-exp2469)))
            (build-top-module242 (lambda (ae2457 types2456 vars2455
                                          val-exps2454 body-exp2453)
                                   (call-with-values
                                     (lambda ()
                                       ((letrec ((f2461 (lambda (types2463
                                                                 vars2462)
                                                          (if (null?
                                                                types2463)
                                                              (values
                                                                '()
                                                                '()
                                                                '())
                                                              ((lambda (var2464)
                                                                 (call-with-values
                                                                   (lambda ()
                                                                     (f2461
                                                                       (cdr types2463)
                                                                       (cdr vars2462)))
                                                                   (lambda (vars2467
                                                                            defns2466
                                                                            sets2465)
                                                                     (if (eq? (car types2463)
                                                                              'global)
                                                                         ((lambda (x2468)
                                                                            (values
                                                                              (cons
                                                                                x2468
                                                                                vars2467)
                                                                              (cons
                                                                                (list
                                                                                  'define
                                                                                  var2464
                                                                                  (chi-void513))
                                                                                defns2466)
                                                                              (cons
                                                                                (list
                                                                                  'set!
                                                                                  var2464
                                                                                  x2468)
                                                                                sets2465)))
                                                                           (gensym))
                                                                         (values
                                                                           (cons
                                                                             var2464
                                                                             vars2467)
                                                                           defns2466
                                                                           sets2465)))))
                                                                (car vars2462))))))
                                          f2461)
                                         types2456
                                         vars2455))
                                     (lambda (vars2460 defns2459 sets2458)
                                       (if (null? defns2459)
                                           (build-letrec240
                                             ae2457
                                             vars2460
                                             val-exps2454
                                             body-exp2453)
                                           (build-sequence239
                                             '#f
                                             (append
                                               defns2459
                                               (list
                                                 (build-letrec240
                                                   ae2457
                                                   vars2460
                                                   val-exps2454
                                                   (build-sequence239
                                                     '#f
                                                     (append
                                                       sets2458
                                                       (list
                                                         body-exp2453))))))))))))
            (sanitize-binding275 (lambda (b2449)
                                   (if (procedure? b2449)
                                       (cons 'macro b2449)
                                       (if (binding?289 b2449)
                                           (if ((lambda (t2450)
                                                  (if (memv
                                                        t2450
                                                        '(core
                                                           macro
                                                           macro!
                                                           deferred))
                                                      (procedure?
                                                        (binding-value286
                                                          b2449))
                                                      (if (memv
                                                            t2450
                                                            '($module))
                                                          (interface?447
                                                            (binding-value286
                                                              b2449))
                                                          (if (memv
                                                                t2450
                                                                '(lexical))
                                                              '#f
                                                              (if (memv
                                                                    t2450
                                                                    '(global
                                                                       meta-variable))
                                                                  (symbol?
                                                                    (binding-value286
                                                                      b2449))
                                                                  (if (memv
                                                                        t2450
                                                                        '(syntax))
                                                                      ((lambda (x2451)
                                                                         (if (pair?
                                                                               x2451)
                                                                             (if '#f
                                                                                 ((lambda (n2452)
                                                                                    (if (integer?
                                                                                          n2452)
                                                                                        (if (exact?
                                                                                              n2452)
                                                                                            (>= n2452
                                                                                                '0)
                                                                                            '#f)
                                                                                        '#f))
                                                                                   (cdr x2451))
                                                                                 '#f)
                                                                             '#f))
                                                                        (binding-value286
                                                                          b2449))
                                                                      (if (memv
                                                                            t2450
                                                                            '(begin
                                                                               define
                                                                               define-syntax
                                                                               set!
                                                                               $module-key
                                                                               $import
                                                                               eval-when
                                                                               meta))
                                                                          (null?
                                                                            (binding-value286
                                                                              b2449))
                                                                          (if (memv
                                                                                t2450
                                                                                '(local-syntax))
                                                                              (boolean?
                                                                                (binding-value286
                                                                                  b2449))
                                                                              (if (memv
                                                                                    t2450
                                                                                    '(displaced-lexical))
                                                                                  (eq? (binding-value286
                                                                                         b2449)
                                                                                       '#f)
                                                                                  '#t)))))))))
                                                 (binding-type285 b2449))
                                               b2449
                                               '#f)
                                           '#f))))
            (binding-type285 car)
            (binding-value286 cdr)
            (set-binding-type!287 set-car!)
            (set-binding-value!288 set-cdr!)
            (binding?289 (lambda (x2448)
                           (if (pair? x2448) (symbol? (car x2448)) '#f)))
            (extend-env299 (lambda (label2447 binding2446 r2445)
                             (cons (cons label2447 binding2446) r2445)))
            (extend-env*300 (lambda (labels2444 bindings2443 r2442)
                              (if (null? labels2444)
                                  r2442
                                  (extend-env*300
                                    (cdr labels2444)
                                    (cdr bindings2443)
                                    (extend-env299
                                      (car labels2444)
                                      (car bindings2443)
                                      r2442)))))
            (extend-var-env*301 (lambda (labels2441 vars2440 r2439)
                                  (if (null? labels2441)
                                      r2439
                                      (extend-var-env*301
                                        (cdr labels2441)
                                        (cdr vars2440)
                                        (extend-env299
                                          (car labels2441)
                                          (cons 'lexical (car vars2440))
                                          r2439)))))
            (displaced-lexical?302 (lambda (id2436 r2435)
                                     ((lambda (n2437)
                                        (if n2437
                                            ((lambda (b2438)
                                               (eq? (binding-type285 b2438)
                                                    'displaced-lexical))
                                              (lookup305 n2437 r2435))
                                            '#f))
                                       (id-var-name429 id2436 '(())))))
            (displaced-lexical-error303 (lambda (id2434)
                                          (syntax-error
                                            id2434
                                            (if (id-var-name429
                                                  id2434
                                                  '(()))
                                                '"identifier out of context"
                                                '"identifier not visible"))))
            (lookup*304 (lambda (x2431 r2430)
                          ((lambda (t2432)
                             (if t2432
                                 (cdr t2432)
                                 (if (symbol? x2431)
                                     ((lambda (t2433)
                                        (if t2433
                                            t2433
                                            (cons 'global x2431)))
                                       (get-global-definition-hook142
                                         x2431))
                                     '(displaced-lexical . #f))))
                            (assq x2431 r2430))))
            (lookup305 (lambda (x2425 r2424)
                         (letrec ((whack-binding!2426 (lambda (b2429
                                                               *b2428)
                                                        (begin
                                                          (set-binding-type!287
                                                            b2429
                                                            (binding-type285
                                                              *b2428))
                                                          (set-binding-value!288
                                                            b2429
                                                            (binding-value286
                                                              *b2428))))))
                           ((lambda (b2427)
                              (begin
                                (if (eq? (binding-type285 b2427) 'deferred)
                                    (whack-binding!2426
                                      b2427
                                      (make-transformer-binding306
                                        ((binding-value286 b2427))))
                                    (void))
                                b2427))
                             (lookup*304 x2425 r2424)))))
            (make-transformer-binding306 (lambda (b2422)
                                           ((lambda (t2423)
                                              (if t2423
                                                  t2423
                                                  (syntax-error
                                                    b2422
                                                    '"invalid transformer")))
                                             (sanitize-binding275 b2422))))
            (defer-or-eval-transformer307 (lambda (eval2421 x2420)
                                            (if (built-lambda?221 x2420)
                                                (cons
                                                  'deferred
                                                  (lambda ()
                                                    (eval2421 x2420)))
                                                (make-transformer-binding306
                                                  (eval2421 x2420)))))
            (global-extend308 (lambda (type2419 sym2418 val2417)
                                (put-cte-hook141
                                  sym2418
                                  (cons type2419 val2417))))
            (nonsymbol-id?309 (lambda (x2415)
                                (if (syntax-object?64 x2415)
                                    (symbol?
                                      ((lambda (e2416)
                                         (if (annotation?132 e2416)
                                             (annotation-expression e2416)
                                             e2416))
                                        (syntax-object-expression65
                                          x2415)))
                                    '#f)))
            (id?310 (lambda (x2413)
                      (if (symbol? x2413)
                          '#t
                          (if (syntax-object?64 x2413)
                              (symbol?
                                ((lambda (e2414)
                                   (if (annotation?132 e2414)
                                       (annotation-expression e2414)
                                       e2414))
                                  (syntax-object-expression65 x2413)))
                              (if (annotation?132 x2413)
                                  (symbol? (annotation-expression x2413))
                                  '#f)))))
            (id-marks316 (lambda (id2412)
                           (if (syntax-object?64 id2412)
                               (wrap-marks320
                                 (syntax-object-wrap66 id2412))
                               (wrap-marks320 '((top))))))
            (id-subst317 (lambda (id2411)
                           (if (syntax-object?64 id2411)
                               (wrap-subst321
                                 (syntax-object-wrap66 id2411))
                               (wrap-marks320 '((top))))))
            (id-sym-name&marks318 (lambda (x2408 w2407)
                                    (if (syntax-object?64 x2408)
                                        (values
                                          ((lambda (e2409)
                                             (if (annotation?132 e2409)
                                                 (annotation-expression
                                                   e2409)
                                                 e2409))
                                            (syntax-object-expression65
                                              x2408))
                                          (join-marks418
                                            (wrap-marks320 w2407)
                                            (wrap-marks320
                                              (syntax-object-wrap66
                                                x2408))))
                                        (values
                                          ((lambda (e2410)
                                             (if (annotation?132 e2410)
                                                 (annotation-expression
                                                   e2410)
                                                 e2410))
                                            x2408)
                                          (wrap-marks320 w2407)))))
            (make-wrap319 cons)
            (wrap-marks320 car)
            (wrap-subst321 cdr)
            (make-indirect-label350 (lambda (label2406)
                                      (vector 'indirect-label label2406)))
            (indirect-label?351 (lambda (x2405)
                                  (if (vector? x2405)
                                      (if (= (vector-length x2405) '2)
                                          (eq? (vector-ref x2405 '0)
                                               'indirect-label)
                                          '#f)
                                      '#f)))
            (indirect-label-label352 (lambda (x2404)
                                       (vector-ref x2404 '1)))
            (set-indirect-label-label!353 (lambda (x2403 update2402)
                                            (vector-set!
                                              x2403
                                              '1
                                              update2402)))
            (gen-indirect-label354 (lambda ()
                                     (make-indirect-label350
                                       (gen-label357))))
            (get-indirect-label355 (lambda (x2401)
                                     (indirect-label-label352 x2401)))
            (set-indirect-label!356 (lambda (x2400 v2399)
                                      (set-indirect-label-label!353
                                        x2400
                                        v2399)))
            (gen-label357 (lambda () (string '#\i)))
            (label?358 (lambda (x2396)
                         ((lambda (t2397)
                            (if t2397
                                t2397
                                ((lambda (t2398)
                                   (if t2398
                                       t2398
                                       (indirect-label?351 x2396)))
                                  (symbol? x2396))))
                           (string? x2396))))
            (gen-labels359 (lambda (ls2395)
                             (if (null? ls2395)
                                 '()
                                 (cons
                                   (gen-label357)
                                   (gen-labels359 (cdr ls2395))))))
            (make-ribcage360 (lambda (symnames2394 marks2393 labels2392)
                               (vector
                                 'ribcage
                                 symnames2394
                                 marks2393
                                 labels2392)))
            (ribcage?361 (lambda (x2391)
                           (if (vector? x2391)
                               (if (= (vector-length x2391) '4)
                                   (eq? (vector-ref x2391 '0) 'ribcage)
                                   '#f)
                               '#f)))
            (ribcage-symnames362 (lambda (x2390) (vector-ref x2390 '1)))
            (ribcage-marks363 (lambda (x2389) (vector-ref x2389 '2)))
            (ribcage-labels364 (lambda (x2388) (vector-ref x2388 '3)))
            (set-ribcage-symnames!365 (lambda (x2387 update2386)
                                        (vector-set! x2387 '1 update2386)))
            (set-ribcage-marks!366 (lambda (x2385 update2384)
                                     (vector-set! x2385 '2 update2384)))
            (set-ribcage-labels!367 (lambda (x2383 update2382)
                                      (vector-set! x2383 '3 update2382)))
            (make-top-ribcage368 (lambda (key2381 mutable?2380)
                                   (vector
                                     'top-ribcage
                                     key2381
                                     mutable?2380)))
            (top-ribcage?369 (lambda (x2379)
                               (if (vector? x2379)
                                   (if (= (vector-length x2379) '3)
                                       (eq? (vector-ref x2379 '0)
                                            'top-ribcage)
                                       '#f)
                                   '#f)))
            (top-ribcage-key370 (lambda (x2378) (vector-ref x2378 '1)))
            (top-ribcage-mutable?371 (lambda (x2377)
                                       (vector-ref x2377 '2)))
            (set-top-ribcage-key!372 (lambda (x2376 update2375)
                                       (vector-set! x2376 '1 update2375)))
            (set-top-ribcage-mutable?!373 (lambda (x2374 update2373)
                                            (vector-set!
                                              x2374
                                              '2
                                              update2373)))
            (make-import-interface374 (lambda (interface2372
                                               new-marks2371)
                                        (vector
                                          'import-interface
                                          interface2372
                                          new-marks2371)))
            (import-interface?375 (lambda (x2370)
                                    (if (vector? x2370)
                                        (if (= (vector-length x2370) '3)
                                            (eq? (vector-ref x2370 '0)
                                                 'import-interface)
                                            '#f)
                                        '#f)))
            (import-interface-interface376 (lambda (x2369)
                                             (vector-ref x2369 '1)))
            (import-interface-new-marks377 (lambda (x2368)
                                             (vector-ref x2368 '2)))
            (set-import-interface-interface!378 (lambda (x2367
                                                         update2366)
                                                  (vector-set!
                                                    x2367
                                                    '1
                                                    update2366)))
            (set-import-interface-new-marks!379 (lambda (x2365
                                                         update2364)
                                                  (vector-set!
                                                    x2365
                                                    '2
                                                    update2364)))
            (make-env380 (lambda (top-ribcage2363 wrap2362)
                           (vector 'env top-ribcage2363 wrap2362)))
            (env?381 (lambda (x2361)
                       (if (vector? x2361)
                           (if (= (vector-length x2361) '3)
                               (eq? (vector-ref x2361 '0) 'env)
                               '#f)
                           '#f)))
            (env-top-ribcage382 (lambda (x2360) (vector-ref x2360 '1)))
            (env-wrap383 (lambda (x2359) (vector-ref x2359 '2)))
            (set-env-top-ribcage!384 (lambda (x2358 update2357)
                                       (vector-set! x2358 '1 update2357)))
            (set-env-wrap!385 (lambda (x2356 update2355)
                                (vector-set! x2356 '2 update2355)))
            (anti-mark395 (lambda (w2354)
                            (make-wrap319
                              (cons '#f (wrap-marks320 w2354))
                              (cons 'shift (wrap-subst321 w2354)))))
            (barrier-marker400 '#f)
            (extend-ribcage!405 (lambda (ribcage2352 id2351 label2350)
                                  (begin
                                    (set-ribcage-symnames!365
                                      ribcage2352
                                      (cons
                                        ((lambda (e2353)
                                           (if (annotation?132 e2353)
                                               (annotation-expression
                                                 e2353)
                                               e2353))
                                          (syntax-object-expression65
                                            id2351))
                                        (ribcage-symnames362 ribcage2352)))
                                    (set-ribcage-marks!366
                                      ribcage2352
                                      (cons
                                        (wrap-marks320
                                          (syntax-object-wrap66 id2351))
                                        (ribcage-marks363 ribcage2352)))
                                    (set-ribcage-labels!367
                                      ribcage2352
                                      (cons
                                        label2350
                                        (ribcage-labels364
                                          ribcage2352))))))
            (import-extend-ribcage!406 (lambda (ribcage2348
                                                new-marks2347 id2346
                                                label2345)
                                         (begin
                                           (set-ribcage-symnames!365
                                             ribcage2348
                                             (cons
                                               ((lambda (e2349)
                                                  (if (annotation?132
                                                        e2349)
                                                      (annotation-expression
                                                        e2349)
                                                      e2349))
                                                 (syntax-object-expression65
                                                   id2346))
                                               (ribcage-symnames362
                                                 ribcage2348)))
                                           (set-ribcage-marks!366
                                             ribcage2348
                                             (cons
                                               (join-marks418
                                                 new-marks2347
                                                 (wrap-marks320
                                                   (syntax-object-wrap66
                                                     id2346)))
                                               (ribcage-marks363
                                                 ribcage2348)))
                                           (set-ribcage-labels!367
                                             ribcage2348
                                             (cons
                                               label2345
                                               (ribcage-labels364
                                                 ribcage2348))))))
            (extend-ribcage-barrier!407 (lambda (ribcage2344
                                                 killer-id2343)
                                          (extend-ribcage-barrier-help!408
                                            ribcage2344
                                            (syntax-object-wrap66
                                              killer-id2343))))
            (extend-ribcage-barrier-help!408 (lambda (ribcage2342
                                                      wrap2341)
                                               (begin
                                                 (set-ribcage-symnames!365
                                                   ribcage2342
                                                   (cons
                                                     barrier-marker400
                                                     (ribcage-symnames362
                                                       ribcage2342)))
                                                 (set-ribcage-marks!366
                                                   ribcage2342
                                                   (cons
                                                     (wrap-marks320
                                                       wrap2341)
                                                     (ribcage-marks363
                                                       ribcage2342))))))
            (extend-ribcage-subst!409 (lambda (ribcage2340
                                               import-iface2339)
                                        (set-ribcage-symnames!365
                                          ribcage2340
                                          (cons
                                            import-iface2339
                                            (ribcage-symnames362
                                              ribcage2340)))))
            (lookup-import-binding-name410 (lambda (sym2334 marks2333
                                                    token2332
                                                    new-marks2331)
                                             ((lambda (new2335)
                                                (if new2335
                                                    ((letrec ((f2336 (lambda (new2337)
                                                                       (if (pair?
                                                                             new2337)
                                                                           ((lambda (t2338)
                                                                              (if t2338
                                                                                  t2338
                                                                                  (f2336
                                                                                    (cdr new2337))))
                                                                             (f2336
                                                                               (car new2337)))
                                                                           (if (symbol?
                                                                                 new2337)
                                                                               (if (same-marks?420
                                                                                     marks2333
                                                                                     (join-marks418
                                                                                       new-marks2331
                                                                                       (wrap-marks320
                                                                                         '((top)))))
                                                                                   new2337
                                                                                   '#f)
                                                                               (if (same-marks?420
                                                                                     marks2333
                                                                                     (join-marks418
                                                                                       new-marks2331
                                                                                       (wrap-marks320
                                                                                         (syntax-object-wrap66
                                                                                           new2337))))
                                                                                   new2337
                                                                                   '#f))))))
                                                       f2336)
                                                      new2335)
                                                    '#f))
                                               (get-import-binding145
                                                 sym2334
                                                 token2332))))
            (store-import-binding411 (lambda (id2316 token2315
                                              new-marks2314)
                                       (letrec ((cons-id2317 (lambda (id2330
                                                                      x2329)
                                                               (if (not x2329)
                                                                   id2330
                                                                   (cons
                                                                     id2330
                                                                     x2329))))
                                                (weed2318 (lambda (marks2328
                                                                   x2327)
                                                            (if (pair?
                                                                  x2327)
                                                                (if (same-marks?420
                                                                      (id-marks316
                                                                        (car x2327))
                                                                      marks2328)
                                                                    (weed2318
                                                                      marks2328
                                                                      (cdr x2327))
                                                                    (cons-id2317
                                                                      (car x2327)
                                                                      (weed2318
                                                                        marks2328
                                                                        (cdr x2327))))
                                                                (if x2327
                                                                    (if (not (same-marks?420
                                                                               (id-marks316
                                                                                 x2327)
                                                                               marks2328))
                                                                        x2327
                                                                        '#f)
                                                                    '#f)))))
                                         ((lambda (id2319)
                                            ((lambda (sym2320)
                                               (if (not (eq? id2319
                                                             sym2320))
                                                   ((lambda (marks2321)
                                                      ((lambda (x2322)
                                                         (put-import-binding146
                                                           sym2320
                                                           token2315
                                                           (cons-id2317
                                                             (if (same-marks?420
                                                                   marks2321
                                                                   (wrap-marks320
                                                                     '((top))))
                                                                 (resolved-id-var-name415
                                                                   id2319)
                                                                 id2319)
                                                             x2322)))
                                                        (weed2318
                                                          marks2321
                                                          (get-import-binding145
                                                            sym2320
                                                            token2315))))
                                                     (id-marks316 id2319))
                                                   (void)))
                                              ((lambda (x2323)
                                                 ((lambda (e2324)
                                                    (if (annotation?132
                                                          e2324)
                                                        (annotation-expression
                                                          e2324)
                                                        e2324))
                                                   (if (syntax-object?64
                                                         x2323)
                                                       (syntax-object-expression65
                                                         x2323)
                                                       x2323)))
                                                id2319)))
                                           (if (null? new-marks2314)
                                               id2316
                                               (make-syntax-object63
                                                 ((lambda (x2325)
                                                    ((lambda (e2326)
                                                       (if (annotation?132
                                                             e2326)
                                                           (annotation-expression
                                                             e2326)
                                                           e2326))
                                                      (if (syntax-object?64
                                                            x2325)
                                                          (syntax-object-expression65
                                                            x2325)
                                                          x2325)))
                                                   id2316)
                                                 (make-wrap319
                                                   (join-marks418
                                                     new-marks2314
                                                     (id-marks316 id2316))
                                                   (id-subst317
                                                     id2316))))))))
            (make-binding-wrap412 (lambda (ids2304 labels2303 w2302)
                                    (if (null? ids2304)
                                        w2302
                                        (make-wrap319
                                          (wrap-marks320 w2302)
                                          (cons
                                            ((lambda (labelvec2305)
                                               ((lambda (n2306)
                                                  ((lambda (symnamevec2308
                                                            marksvec2307)
                                                     (begin
                                                       ((letrec ((f2309 (lambda (ids2311
                                                                                 i2310)
                                                                          (if (not (null?
                                                                                     ids2311))
                                                                              (call-with-values
                                                                                (lambda ()
                                                                                  (id-sym-name&marks318
                                                                                    (car ids2311)
                                                                                    w2302))
                                                                                (lambda (symname2313
                                                                                         marks2312)
                                                                                  (begin
                                                                                    (vector-set!
                                                                                      symnamevec2308
                                                                                      i2310
                                                                                      symname2313)
                                                                                    (vector-set!
                                                                                      marksvec2307
                                                                                      i2310
                                                                                      marks2312)
                                                                                    (f2309
                                                                                      (cdr ids2311)
                                                                                      (+ i2310
                                                                                         '1)))))
                                                                              (void)))))
                                                          f2309)
                                                         ids2304
                                                         '0)
                                                       (make-ribcage360
                                                         symnamevec2308
                                                         marksvec2307
                                                         labelvec2305)))
                                                    (make-vector n2306)
                                                    (make-vector n2306)))
                                                 (vector-length
                                                   labelvec2305)))
                                              (list->vector labels2303))
                                            (wrap-subst321 w2302))))))
            (make-resolved-id413 (lambda (fromsym2301 marks2300
                                          tosym2299)
                                   (make-syntax-object63
                                     fromsym2301
                                     (make-wrap319
                                       marks2300
                                       (list
                                         (make-ribcage360
                                           (vector fromsym2301)
                                           (vector marks2300)
                                           (vector tosym2299)))))))
            (id->resolved-id414 (lambda (id2294)
                                  (call-with-values
                                    (lambda ()
                                      (id-var-name&marks427 id2294 '(())))
                                    (lambda (tosym2296 marks2295)
                                      (begin
                                        (if (not tosym2296)
                                            (syntax-error
                                              id2294
                                              '"identifier not visible for export")
                                            (void))
                                        (make-resolved-id413
                                          ((lambda (x2297)
                                             ((lambda (e2298)
                                                (if (annotation?132 e2298)
                                                    (annotation-expression
                                                      e2298)
                                                    e2298))
                                               (if (syntax-object?64 x2297)
                                                   (syntax-object-expression65
                                                     x2297)
                                                   x2297)))
                                            id2294)
                                          marks2295
                                          tosym2296))))))
            (resolved-id-var-name415 (lambda (id2293)
                                       (vector-ref
                                         (ribcage-labels364
                                           (car (wrap-subst321
                                                  (syntax-object-wrap66
                                                    id2293))))
                                         '0)))
            (smart-append416 (lambda (m12292 m22291)
                               (if (null? m22291)
                                   m12292
                                   (append m12292 m22291))))
            (join-wraps417 (lambda (w12288 w22287)
                             ((lambda (m12290 s12289)
                                (if (null? m12290)
                                    (if (null? s12289)
                                        w22287
                                        (make-wrap319
                                          (wrap-marks320 w22287)
                                          (join-subst419
                                            s12289
                                            (wrap-subst321 w22287))))
                                    (make-wrap319
                                      (join-marks418
                                        m12290
                                        (wrap-marks320 w22287))
                                      (join-subst419
                                        s12289
                                        (wrap-subst321 w22287)))))
                               (wrap-marks320 w12288)
                               (wrap-subst321 w12288))))
            (join-marks418 (lambda (m12286 m22285)
                             (smart-append416 m12286 m22285)))
            (join-subst419 (lambda (s12284 s22283)
                             (smart-append416 s12284 s22283)))
            (same-marks?420 (lambda (x2281 y2280)
                              ((lambda (t2282)
                                 (if t2282
                                     t2282
                                     (if (not (null? x2281))
                                         (if (not (null? y2280))
                                             (if (eq? (car x2281)
                                                      (car y2280))
                                                 (same-marks?420
                                                   (cdr x2281)
                                                   (cdr y2280))
                                                 '#f)
                                             '#f)
                                         '#f)))
                                (eq? x2281 y2280))))
            (diff-marks421 (lambda (m12274 m22273)
                             ((lambda (n12276 n22275)
                                ((letrec ((f2277 (lambda (n12279 m12278)
                                                   (if (> n12279 n22275)
                                                       (cons
                                                         (car m12278)
                                                         (f2277
                                                           (fx- n12279 '1)
                                                           (cdr m12278)))
                                                       (if (equal?
                                                             m12278
                                                             m22273)
                                                           '()
                                                           (error 'sc-expand
                                                             '"internal error in diff-marks: ~s is not a tail of ~s"
                                                             m12278
                                                             m22273))))))
                                   f2277)
                                  n12276
                                  m12274))
                               (length m12274)
                               (length m22273))))
            (leave-implicit?422 (lambda (token2272)
                                  (eq? token2272 '*top*)))
            (new-binding423 (lambda (sym2269 marks2268 token2267)
                              ((lambda (loc2270)
                                 ((lambda (id2271)
                                    (begin
                                      (store-import-binding411
                                        id2271
                                        token2267
                                        '())
                                      (values loc2270 id2271)))
                                   (make-resolved-id413
                                     sym2269
                                     marks2268
                                     loc2270)))
                                (if (if (leave-implicit?422 token2267)
                                        (same-marks?420
                                          marks2268
                                          (wrap-marks320 '((top))))
                                        '#f)
                                    sym2269
                                    (generate-id147 sym2269)))))
            (top-id-bound-var-name424 (lambda (sym2263 marks2262
                                               top-ribcage2261)
                                        ((lambda (token2264)
                                           ((lambda (t2265)
                                              (if t2265
                                                  ((lambda (id2266)
                                                     (if (symbol? id2266)
                                                         (if (read-only-binding?144
                                                               id2266)
                                                             (new-binding423
                                                               sym2263
                                                               marks2262
                                                               token2264)
                                                             (values
                                                               id2266
                                                               (make-resolved-id413
                                                                 sym2263
                                                                 marks2262
                                                                 id2266)))
                                                         (values
                                                           (resolved-id-var-name415
                                                             id2266)
                                                           id2266)))
                                                    t2265)
                                                  (new-binding423
                                                    sym2263
                                                    marks2262
                                                    token2264)))
                                             (lookup-import-binding-name410
                                               sym2263
                                               marks2262
                                               token2264
                                               '())))
                                          (top-ribcage-key370
                                            top-ribcage2261))))
            (top-id-free-var-name425 (lambda (sym2255 marks2254
                                              top-ribcage2253)
                                       ((lambda (token2256)
                                          ((lambda (t2257)
                                             (if t2257
                                                 ((lambda (id2258)
                                                    (if (symbol? id2258)
                                                        id2258
                                                        (resolved-id-var-name415
                                                          id2258)))
                                                   t2257)
                                                 (if (if (top-ribcage-mutable?371
                                                           top-ribcage2253)
                                                         (same-marks?420
                                                           marks2254
                                                           (wrap-marks320
                                                             '((top))))
                                                         '#f)
                                                     (call-with-values
                                                       (lambda ()
                                                         (new-binding423
                                                           sym2255
                                                           (wrap-marks320
                                                             '((top)))
                                                           token2256))
                                                       (lambda (sym2260
                                                                id2259)
                                                         sym2260))
                                                     '#f)))
                                            (lookup-import-binding-name410
                                              sym2255
                                              marks2254
                                              token2256
                                              '())))
                                         (top-ribcage-key370
                                           top-ribcage2253))))
            (id-var-name-loc&marks426 (lambda (id2204 w2203)
                                        (letrec ((search2205 (lambda (sym2248
                                                                      subst2247
                                                                      marks2246)
                                                               (if (null?
                                                                     subst2247)
                                                                   (values
                                                                     '#f
                                                                     marks2246)
                                                                   ((lambda (fst2249)
                                                                      (if (eq? fst2249
                                                                               'shift)
                                                                          (search2205
                                                                            sym2248
                                                                            (cdr subst2247)
                                                                            (cdr marks2246))
                                                                          (if (ribcage?361
                                                                                fst2249)
                                                                              ((lambda (symnames2250)
                                                                                 (if (vector?
                                                                                       symnames2250)
                                                                                     (search-vector-rib2207
                                                                                       sym2248
                                                                                       subst2247
                                                                                       marks2246
                                                                                       symnames2250
                                                                                       fst2249)
                                                                                     (search-list-rib2206
                                                                                       sym2248
                                                                                       subst2247
                                                                                       marks2246
                                                                                       symnames2250
                                                                                       fst2249)))
                                                                                (ribcage-symnames362
                                                                                  fst2249))
                                                                              (if (top-ribcage?369
                                                                                    fst2249)
                                                                                  ((lambda (t2251)
                                                                                     (if t2251
                                                                                         ((lambda (var-name2252)
                                                                                            (values
                                                                                              var-name2252
                                                                                              marks2246))
                                                                                           t2251)
                                                                                         (search2205
                                                                                           sym2248
                                                                                           (cdr subst2247)
                                                                                           marks2246)))
                                                                                    (top-id-free-var-name425
                                                                                      sym2248
                                                                                      marks2246
                                                                                      fst2249))
                                                                                  (error 'sc-expand
                                                                                    '"internal error in id-var-name-loc&marks: improper subst ~s"
                                                                                    subst2247)))))
                                                                     (car subst2247)))))
                                                 (search-list-rib2206 (lambda (sym2226
                                                                               subst2225
                                                                               marks2224
                                                                               symnames2223
                                                                               ribcage2222)
                                                                        ((letrec ((f2227 (lambda (symnames2229
                                                                                                  i2228)
                                                                                           (if (null?
                                                                                                 symnames2229)
                                                                                               (search2205
                                                                                                 sym2226
                                                                                                 (cdr subst2225)
                                                                                                 marks2224)
                                                                                               ((lambda (x2230)
                                                                                                  (if (if (eq? x2230
                                                                                                               sym2226)
                                                                                                          (same-marks?420
                                                                                                            marks2224
                                                                                                            (list-ref
                                                                                                              (ribcage-marks363
                                                                                                                ribcage2222)
                                                                                                              i2228))
                                                                                                          '#f)
                                                                                                      (values
                                                                                                        (list-ref
                                                                                                          (ribcage-labels364
                                                                                                            ribcage2222)
                                                                                                          i2228)
                                                                                                        marks2224)
                                                                                                      (if (import-interface?375
                                                                                                            x2230)
                                                                                                          ((lambda (iface2232
                                                                                                                    new-marks2231)
                                                                                                             ((lambda (t2233)
                                                                                                                (if t2233
                                                                                                                    ((lambda (token2234)
                                                                                                                       ((lambda (t2235)
                                                                                                                          (if t2235
                                                                                                                              ((lambda (id2236)
                                                                                                                                 (values
                                                                                                                                   (if (symbol?
                                                                                                                                         id2236)
                                                                                                                                       id2236
                                                                                                                                       (resolved-id-var-name415
                                                                                                                                         id2236))
                                                                                                                                   marks2224))
                                                                                                                                t2235)
                                                                                                                              (f2227
                                                                                                                                (cdr symnames2229)
                                                                                                                                i2228)))
                                                                                                                         (lookup-import-binding-name410
                                                                                                                           sym2226
                                                                                                                           marks2224
                                                                                                                           token2234
                                                                                                                           new-marks2231)))
                                                                                                                      t2233)
                                                                                                                    ((lambda (ie2237)
                                                                                                                       ((lambda (n2238)
                                                                                                                          ((lambda ()
                                                                                                                             ((letrec ((g2239 (lambda (j2240)
                                                                                                                                                (if (= j2240
                                                                                                                                                       n2238)
                                                                                                                                                    (f2227
                                                                                                                                                      (cdr symnames2229)
                                                                                                                                                      i2228)
                                                                                                                                                    ((lambda (id2241)
                                                                                                                                                       ((lambda (id.sym2243
                                                                                                                                                                 id.marks2242)
                                                                                                                                                          (if (help-bound-id=?432
                                                                                                                                                                id.sym2243
                                                                                                                                                                id.marks2242
                                                                                                                                                                sym2226
                                                                                                                                                                marks2224)
                                                                                                                                                              (values
                                                                                                                                                                (lookup-import-label501
                                                                                                                                                                  id2241)
                                                                                                                                                                marks2224)
                                                                                                                                                              (g2239
                                                                                                                                                                (+ j2240
                                                                                                                                                                   '1))))
                                                                                                                                                         ((lambda (x2244)
                                                                                                                                                            ((lambda (e2245)
                                                                                                                                                               (if (annotation?132
                                                                                                                                                                     e2245)
                                                                                                                                                                   (annotation-expression
                                                                                                                                                                     e2245)
                                                                                                                                                                   e2245))
                                                                                                                                                              (if (syntax-object?64
                                                                                                                                                                    x2244)
                                                                                                                                                                  (syntax-object-expression65
                                                                                                                                                                    x2244)
                                                                                                                                                                  x2244)))
                                                                                                                                                           id2241)
                                                                                                                                                         (join-marks418
                                                                                                                                                           new-marks2231
                                                                                                                                                           (id-marks316
                                                                                                                                                             id2241))))
                                                                                                                                                      (vector-ref
                                                                                                                                                        ie2237
                                                                                                                                                        j2240))))))
                                                                                                                                g2239)
                                                                                                                               '0))))
                                                                                                                         (vector-length
                                                                                                                           ie2237)))
                                                                                                                      (interface-exports449
                                                                                                                        iface2232))))
                                                                                                               (interface-token450
                                                                                                                 iface2232)))
                                                                                                            (import-interface-interface376
                                                                                                              x2230)
                                                                                                            (import-interface-new-marks377
                                                                                                              x2230))
                                                                                                          (if (if (eq? x2230
                                                                                                                       barrier-marker400)
                                                                                                                  (same-marks?420
                                                                                                                    marks2224
                                                                                                                    (list-ref
                                                                                                                      (ribcage-marks363
                                                                                                                        ribcage2222)
                                                                                                                      i2228))
                                                                                                                  '#f)
                                                                                                              (values
                                                                                                                '#f
                                                                                                                marks2224)
                                                                                                              (f2227
                                                                                                                (cdr symnames2229)
                                                                                                                (+ i2228
                                                                                                                   '1))))))
                                                                                                 (car symnames2229))))))
                                                                           f2227)
                                                                          symnames2223
                                                                          '0)))
                                                 (search-vector-rib2207 (lambda (sym2218
                                                                                 subst2217
                                                                                 marks2216
                                                                                 symnames2215
                                                                                 ribcage2214)
                                                                          ((lambda (n2219)
                                                                             ((letrec ((f2220 (lambda (i2221)
                                                                                                (if (= i2221
                                                                                                       n2219)
                                                                                                    (search2205
                                                                                                      sym2218
                                                                                                      (cdr subst2217)
                                                                                                      marks2216)
                                                                                                    (if (if (eq? (vector-ref
                                                                                                                   symnames2215
                                                                                                                   i2221)
                                                                                                                 sym2218)
                                                                                                            (same-marks?420
                                                                                                              marks2216
                                                                                                              (vector-ref
                                                                                                                (ribcage-marks363
                                                                                                                  ribcage2214)
                                                                                                                i2221))
                                                                                                            '#f)
                                                                                                        (values
                                                                                                          (vector-ref
                                                                                                            (ribcage-labels364
                                                                                                              ribcage2214)
                                                                                                            i2221)
                                                                                                          marks2216)
                                                                                                        (f2220
                                                                                                          (+ i2221
                                                                                                             '1)))))))
                                                                                f2220)
                                                                               '0))
                                                                            (vector-length
                                                                              symnames2215)))))
                                          (if (symbol? id2204)
                                              (search2205
                                                id2204
                                                (wrap-subst321 w2203)
                                                (wrap-marks320 w2203))
                                              (if (syntax-object?64 id2204)
                                                  ((lambda (sym2209 w12208)
                                                     (call-with-values
                                                       (lambda ()
                                                         (search2205
                                                           sym2209
                                                           (wrap-subst321
                                                             w2203)
                                                           (join-marks418
                                                             (wrap-marks320
                                                               w2203)
                                                             (wrap-marks320
                                                               w12208))))
                                                       (lambda (name2211
                                                                marks2210)
                                                         (if name2211
                                                             (values
                                                               name2211
                                                               marks2210)
                                                             (search2205
                                                               sym2209
                                                               (wrap-subst321
                                                                 w12208)
                                                               marks2210)))))
                                                    ((lambda (e2212)
                                                       (if (annotation?132
                                                             e2212)
                                                           (annotation-expression
                                                             e2212)
                                                           e2212))
                                                      (syntax-object-expression65
                                                        id2204))
                                                    (syntax-object-wrap66
                                                      id2204))
                                                  (if (annotation?132
                                                        id2204)
                                                      (search2205
                                                        ((lambda (e2213)
                                                           (if (annotation?132
                                                                 e2213)
                                                               (annotation-expression
                                                                 e2213)
                                                               e2213))
                                                          id2204)
                                                        (wrap-subst321
                                                          w2203)
                                                        (wrap-marks320
                                                          w2203))
                                                      (error-hook136
                                                        'id-var-name
                                                        '"invalid id"
                                                        id2204)))))))
            (id-var-name&marks427 (lambda (id2200 w2199)
                                    (call-with-values
                                      (lambda ()
                                        (id-var-name-loc&marks426
                                          id2200
                                          w2199))
                                      (lambda (label2202 marks2201)
                                        (values
                                          (if (indirect-label?351
                                                label2202)
                                              (get-indirect-label355
                                                label2202)
                                              label2202)
                                          marks2201)))))
            (id-var-name-loc428 (lambda (id2196 w2195)
                                  (call-with-values
                                    (lambda ()
                                      (id-var-name-loc&marks426
                                        id2196
                                        w2195))
                                    (lambda (label2198 marks2197)
                                      label2198))))
            (id-var-name429 (lambda (id2192 w2191)
                              (call-with-values
                                (lambda ()
                                  (id-var-name-loc&marks426 id2192 w2191))
                                (lambda (label2194 marks2193)
                                  (if (indirect-label?351 label2194)
                                      (get-indirect-label355 label2194)
                                      label2194)))))
            (free-id=?430 (lambda (i2186 j2185)
                            (if (eq? ((lambda (x2189)
                                        ((lambda (e2190)
                                           (if (annotation?132 e2190)
                                               (annotation-expression
                                                 e2190)
                                               e2190))
                                          (if (syntax-object?64 x2189)
                                              (syntax-object-expression65
                                                x2189)
                                              x2189)))
                                       i2186)
                                     ((lambda (x2187)
                                        ((lambda (e2188)
                                           (if (annotation?132 e2188)
                                               (annotation-expression
                                                 e2188)
                                               e2188))
                                          (if (syntax-object?64 x2187)
                                              (syntax-object-expression65
                                                x2187)
                                              x2187)))
                                       j2185))
                                (eq? (id-var-name429 i2186 '(()))
                                     (id-var-name429 j2185 '(())))
                                '#f)))
            (literal-id=?431 (lambda (id2175 literal2174)
                               (if (eq? ((lambda (x2178)
                                           ((lambda (e2179)
                                              (if (annotation?132 e2179)
                                                  (annotation-expression
                                                    e2179)
                                                  e2179))
                                             (if (syntax-object?64 x2178)
                                                 (syntax-object-expression65
                                                   x2178)
                                                 x2178)))
                                          id2175)
                                        ((lambda (x2176)
                                           ((lambda (e2177)
                                              (if (annotation?132 e2177)
                                                  (annotation-expression
                                                    e2177)
                                                  e2177))
                                             (if (syntax-object?64 x2176)
                                                 (syntax-object-expression65
                                                   x2176)
                                                 x2176)))
                                          literal2174))
                                   ((lambda (n-id2181 n-literal2180)
                                      ((lambda (t2182)
                                         (if t2182
                                             t2182
                                             (if ((lambda (t2183)
                                                    (if t2183
                                                        t2183
                                                        (symbol?
                                                          n-id2181)))
                                                   (not n-id2181))
                                                 ((lambda (t2184)
                                                    (if t2184
                                                        t2184
                                                        (symbol?
                                                          n-literal2180)))
                                                   (not n-literal2180))
                                                 '#f)))
                                        (eq? n-id2181 n-literal2180)))
                                     (id-var-name429 id2175 '(()))
                                     (id-var-name429 literal2174 '(())))
                                   '#f)))
            (help-bound-id=?432 (lambda (i.sym2173 i.marks2172 j.sym2171
                                         j.marks2170)
                                  (if (eq? i.sym2173 j.sym2171)
                                      (same-marks?420
                                        i.marks2172
                                        j.marks2170)
                                      '#f)))
            (bound-id=?433 (lambda (i2165 j2164)
                             (help-bound-id=?432
                               ((lambda (x2168)
                                  ((lambda (e2169)
                                     (if (annotation?132 e2169)
                                         (annotation-expression e2169)
                                         e2169))
                                    (if (syntax-object?64 x2168)
                                        (syntax-object-expression65 x2168)
                                        x2168)))
                                 i2165)
                               (id-marks316 i2165)
                               ((lambda (x2166)
                                  ((lambda (e2167)
                                     (if (annotation?132 e2167)
                                         (annotation-expression e2167)
                                         e2167))
                                    (if (syntax-object?64 x2166)
                                        (syntax-object-expression65 x2166)
                                        x2166)))
                                 j2164)
                               (id-marks316 j2164))))
            (valid-bound-ids?434 (lambda (ids2160)
                                   (if ((letrec ((all-ids?2161 (lambda (ids2162)
                                                                 ((lambda (t2163)
                                                                    (if t2163
                                                                        t2163
                                                                        (if (id?310
                                                                              (car ids2162))
                                                                            (all-ids?2161
                                                                              (cdr ids2162))
                                                                            '#f)))
                                                                   (null?
                                                                     ids2162)))))
                                          all-ids?2161)
                                         ids2160)
                                       (distinct-bound-ids?435 ids2160)
                                       '#f)))
            (distinct-bound-ids?435 (lambda (ids2156)
                                      ((letrec ((distinct?2157 (lambda (ids2158)
                                                                 ((lambda (t2159)
                                                                    (if t2159
                                                                        t2159
                                                                        (if (not (bound-id-member?437
                                                                                   (car ids2158)
                                                                                   (cdr ids2158)))
                                                                            (distinct?2157
                                                                              (cdr ids2158))
                                                                            '#f)))
                                                                   (null?
                                                                     ids2158)))))
                                         distinct?2157)
                                        ids2156)))
            (invalid-ids-error436 (lambda (ids2152 exp2151 class2150)
                                    ((letrec ((find2153 (lambda (ids2155
                                                                 gooduns2154)
                                                          (if (null?
                                                                ids2155)
                                                              (syntax-error
                                                                exp2151)
                                                              (if (id?310
                                                                    (car ids2155))
                                                                  (if (bound-id-member?437
                                                                        (car ids2155)
                                                                        gooduns2154)
                                                                      (syntax-error
                                                                        (car ids2155)
                                                                        '"duplicate "
                                                                        class2150)
                                                                      (find2153
                                                                        (cdr ids2155)
                                                                        (cons
                                                                          (car ids2155)
                                                                          gooduns2154)))
                                                                  (syntax-error
                                                                    (car ids2155)
                                                                    '"invalid "
                                                                    class2150))))))
                                       find2153)
                                      ids2152
                                      '())))
            (bound-id-member?437 (lambda (x2148 list2147)
                                   (if (not (null? list2147))
                                       ((lambda (t2149)
                                          (if t2149
                                              t2149
                                              (bound-id-member?437
                                                x2148
                                                (cdr list2147))))
                                         (bound-id=?433
                                           x2148
                                           (car list2147)))
                                       '#f)))
            (wrap438 (lambda (x2146 w2145)
                       (if (if (null? (wrap-marks320 w2145))
                               (null? (wrap-subst321 w2145))
                               '#f)
                           x2146
                           (if (syntax-object?64 x2146)
                               (make-syntax-object63
                                 (syntax-object-expression65 x2146)
                                 (join-wraps417
                                   w2145
                                   (syntax-object-wrap66 x2146)))
                               (if (null? x2146)
                                   x2146
                                   (make-syntax-object63 x2146 w2145))))))
            (source-wrap439 (lambda (x2144 w2143 ae2142)
                              (wrap438
                                (if (annotation?132 ae2142)
                                    (begin
                                      (if (not (eq? (annotation-expression
                                                      ae2142)
                                                    x2144))
                                          (error 'sc-expand
                                            '"internal error in source-wrap: ae/x mismatch")
                                          (void))
                                      ae2142)
                                    x2144)
                                w2143)))
            (chi-when-list440 (lambda (when-list2140 w2139)
                                (map (lambda (x2141)
                                       (if (literal-id=?431
                                             x2141
                                             '#(syntax-object compile ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                           'compile
                                           (if (literal-id=?431
                                                 x2141
                                                 '#(syntax-object load ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                               'load
                                               (if (literal-id=?431
                                                     x2141
                                                     '#(syntax-object visit ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                   'visit
                                                   (if (literal-id=?431
                                                         x2141
                                                         '#(syntax-object revisit ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                       'revisit
                                                       (if (literal-id=?431
                                                             x2141
                                                             '#(syntax-object eval ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                           'eval
                                                           (syntax-error
                                                             (wrap438
                                                               x2141
                                                               w2139)
                                                             '"invalid eval-when situation")))))))
                                     when-list2140)))
            (syntax-type441 (lambda (e2124 r2123 w2122 ae2121 rib2120)
                              (if (symbol? e2124)
                                  ((lambda (n2125)
                                     ((lambda (b2126)
                                        ((lambda (type2127)
                                           ((lambda ()
                                              ((lambda (t2128)
                                                 (if (memv
                                                       t2128
                                                       '(macro macro!))
                                                     (syntax-type441
                                                       (chi-macro497
                                                         (binding-value286
                                                           b2126)
                                                         e2124 r2123 w2122
                                                         ae2121 rib2120)
                                                       r2123 '(()) '#f
                                                       rib2120)
                                                     (values type2127
                                                       (binding-value286
                                                         b2126)
                                                       e2124 w2122
                                                       ae2121)))
                                                type2127))))
                                          (binding-type285 b2126)))
                                       (lookup305 n2125 r2123)))
                                    (id-var-name429 e2124 w2122))
                                  (if (pair? e2124)
                                      ((lambda (first2129)
                                         (if (id?310 first2129)
                                             ((lambda (n2130)
                                                ((lambda (b2131)
                                                   ((lambda (type2132)
                                                      ((lambda ()
                                                         ((lambda (t2133)
                                                            (if (memv
                                                                  t2133
                                                                  '(lexical))
                                                                (values
                                                                  'lexical-call
                                                                  (binding-value286
                                                                    b2131)
                                                                  e2124
                                                                  w2122
                                                                  ae2121)
                                                                (if (memv
                                                                      t2133
                                                                      '(macro
                                                                         macro!))
                                                                    (syntax-type441
                                                                      (chi-macro497
                                                                        (binding-value286
                                                                          b2131)
                                                                        e2124
                                                                        r2123
                                                                        w2122
                                                                        ae2121
                                                                        rib2120)
                                                                      r2123
                                                                      '(())
                                                                      '#f
                                                                      rib2120)
                                                                    (if (memv
                                                                          t2133
                                                                          '(core))
                                                                        (values
                                                                          type2132
                                                                          (binding-value286
                                                                            b2131)
                                                                          e2124
                                                                          w2122
                                                                          ae2121)
                                                                        (if (memv
                                                                              t2133
                                                                              '(begin))
                                                                            (values
                                                                              'begin-form
                                                                              '#f
                                                                              e2124
                                                                              w2122
                                                                              ae2121)
                                                                            (if (memv
                                                                                  t2133
                                                                                  '(alias))
                                                                                (values
                                                                                  'alias-form
                                                                                  '#f
                                                                                  e2124
                                                                                  w2122
                                                                                  ae2121)
                                                                                (if (memv
                                                                                      t2133
                                                                                      '(define))
                                                                                    (values
                                                                                      'define-form
                                                                                      '#f
                                                                                      e2124
                                                                                      w2122
                                                                                      ae2121)
                                                                                    (if (memv
                                                                                          t2133
                                                                                          '(define-syntax))
                                                                                        (values
                                                                                          'define-syntax-form
                                                                                          '#f
                                                                                          e2124
                                                                                          w2122
                                                                                          ae2121)
                                                                                        (if (memv
                                                                                              t2133
                                                                                              '(set!))
                                                                                            (chi-set!496
                                                                                              e2124
                                                                                              r2123
                                                                                              w2122
                                                                                              ae2121
                                                                                              rib2120)
                                                                                            (if (memv
                                                                                                  t2133
                                                                                                  '($module-key))
                                                                                                (values
                                                                                                  '$module-form
                                                                                                  '#f
                                                                                                  e2124
                                                                                                  w2122
                                                                                                  ae2121)
                                                                                                (if (memv
                                                                                                      t2133
                                                                                                      '($import))
                                                                                                    (values
                                                                                                      '$import-form
                                                                                                      '#f
                                                                                                      e2124
                                                                                                      w2122
                                                                                                      ae2121)
                                                                                                    (if (memv
                                                                                                          t2133
                                                                                                          '(eval-when))
                                                                                                        (values
                                                                                                          'eval-when-form
                                                                                                          '#f
                                                                                                          e2124
                                                                                                          w2122
                                                                                                          ae2121)
                                                                                                        (if (memv
                                                                                                              t2133
                                                                                                              '(meta))
                                                                                                            (values
                                                                                                              'meta-form
                                                                                                              '#f
                                                                                                              e2124
                                                                                                              w2122
                                                                                                              ae2121)
                                                                                                            (if (memv
                                                                                                                  t2133
                                                                                                                  '(local-syntax))
                                                                                                                (values
                                                                                                                  'local-syntax-form
                                                                                                                  (binding-value286
                                                                                                                    b2131)
                                                                                                                  e2124
                                                                                                                  w2122
                                                                                                                  ae2121)
                                                                                                                (values
                                                                                                                  'call
                                                                                                                  '#f
                                                                                                                  e2124
                                                                                                                  w2122
                                                                                                                  ae2121)))))))))))))))
                                                           type2132))))
                                                     (binding-type285
                                                       b2131)))
                                                  (lookup305 n2130 r2123)))
                                               (id-var-name429
                                                 first2129
                                                 w2122))
                                             (values 'call '#f e2124 w2122
                                               ae2121)))
                                        (car e2124))
                                      (if (syntax-object?64 e2124)
                                          (syntax-type441
                                            (syntax-object-expression65
                                              e2124)
                                            r2123
                                            (join-wraps417
                                              w2122
                                              (syntax-object-wrap66 e2124))
                                            '#f rib2120)
                                          (if (annotation?132 e2124)
                                              (syntax-type441
                                                (annotation-expression
                                                  e2124)
                                                r2123 w2122 e2124 rib2120)
                                              (if ((lambda (x2134)
                                                     ((lambda (t2135)
                                                        (if t2135
                                                            t2135
                                                            ((lambda (t2136)
                                                               (if t2136
                                                                   t2136
                                                                   ((lambda (t2137)
                                                                      (if t2137
                                                                          t2137
                                                                          ((lambda (t2138)
                                                                             (if t2138
                                                                                 t2138
                                                                                 (null?
                                                                                   x2134)))
                                                                            (char?
                                                                              x2134))))
                                                                     (string?
                                                                       x2134))))
                                                              (number?
                                                                x2134))))
                                                       (boolean? x2134)))
                                                    e2124)
                                                  (values 'constant '#f
                                                    e2124 w2122 ae2121)
                                                  (values 'other '#f e2124
                                                    w2122 ae2121))))))))
            (chi-top*442 (lambda (e2115 r2114 w2113 ctem2112 rtem2111
                                  meta?2110 top-ribcage2109)
                           ((lambda (meta-residuals2116)
                              (letrec ((meta-residualize!2117 (lambda (x2119)
                                                                (set! meta-residuals2116
                                                                  (cons
                                                                    x2119
                                                                    meta-residuals2116)))))
                                ((lambda (e2118)
                                   (build-sequence239
                                     '#f
                                     (reverse
                                       (cons e2118 meta-residuals2116))))
                                  (chi-top444 e2115 r2114 w2113 ctem2112
                                    rtem2111 meta?2110 top-ribcage2109
                                    meta-residualize!2117 '#f))))
                             '())))
            (chi-top-sequence443 (lambda (body2105 r2104 w2103 ae2102
                                          ctem2101 rtem2100 meta?2099
                                          ribcage2098
                                          meta-residualize!2097)
                                   (build-sequence239
                                     ae2102
                                     ((letrec ((dobody2106 (lambda (body2107)
                                                             (if (null?
                                                                   body2107)
                                                                 '()
                                                                 ((lambda (first2108)
                                                                    (cons
                                                                      first2108
                                                                      (dobody2106
                                                                        (cdr body2107))))
                                                                   (chi-top444
                                                                     (car body2107)
                                                                     r2104
                                                                     w2103
                                                                     ctem2101
                                                                     rtem2100
                                                                     meta?2099
                                                                     ribcage2098
                                                                     meta-residualize!2097
                                                                     '#f))))))
                                        dobody2106)
                                       body2105))))
            (chi-top444 (lambda (e2042 r2041 w2040 ctem2039 rtem2038
                                 meta?2037 top-ribcage2036
                                 meta-residualize!2035 meta-seen?2034)
                          (call-with-values
                            (lambda ()
                              (syntax-type441 e2042 r2041 w2040 '#f
                                top-ribcage2036))
                            (lambda (type2047 value2046 e2045 w2044 ae2043)
                              ((lambda (t2048)
                                 (if (memv t2048 '(begin-form))
                                     ((lambda (forms2049)
                                        (if (null? forms2049)
                                            (chi-void513)
                                            (chi-top-sequence443 forms2049
                                              r2041 w2044 ae2043 ctem2039
                                              rtem2038 meta?2037
                                              top-ribcage2036
                                              meta-residualize!2035)))
                                       (parse-begin510
                                         e2045
                                         w2044
                                         ae2043
                                         '#t))
                                     (if (memv t2048 '(local-syntax-form))
                                         (call-with-values
                                           (lambda ()
                                             (chi-local-syntax512 value2046
                                               e2045 r2041 r2041 w2044
                                               ae2043))
                                           (lambda (forms2054 r2053 mr2052
                                                    w2051 ae2050)
                                             (chi-top-sequence443 forms2054
                                               r2053 w2051 ae2050 ctem2039
                                               rtem2038 meta?2037
                                               top-ribcage2036
                                               meta-residualize!2035)))
                                         (if (memv t2048 '(eval-when-form))
                                             (call-with-values
                                               (lambda ()
                                                 (parse-eval-when508
                                                   e2045
                                                   w2044
                                                   ae2043))
                                               (lambda (when-list2056
                                                        forms2055)
                                                 ((lambda (ctem2058
                                                           rtem2057)
                                                    (if (if (null?
                                                              ctem2058)
                                                            (null?
                                                              rtem2057)
                                                            '#f)
                                                        (chi-void513)
                                                        (chi-top-sequence443
                                                          forms2055 r2041
                                                          w2044 ae2043
                                                          ctem2058 rtem2057
                                                          meta?2037
                                                          top-ribcage2036
                                                          meta-residualize!2035)))
                                                   (update-mode-set485
                                                     when-list2056
                                                     ctem2039)
                                                   (update-mode-set485
                                                     when-list2056
                                                     rtem2038))))
                                             (if (memv t2048 '(meta-form))
                                                 (chi-top444
                                                   (parse-meta507
                                                     e2045
                                                     w2044
                                                     ae2043)
                                                   r2041 w2044 ctem2039
                                                   rtem2038 '#t
                                                   top-ribcage2036
                                                   meta-residualize!2035
                                                   '#t)
                                                 (if (memv
                                                       t2048
                                                       '(define-syntax-form))
                                                     (call-with-values
                                                       (lambda ()
                                                         (parse-define-syntax506
                                                           e2045
                                                           w2044
                                                           ae2043))
                                                       (lambda (id2061
                                                                rhs2060
                                                                w2059)
                                                         ((lambda (id2062)
                                                            (begin
                                                              (if (displaced-lexical?302
                                                                    id2062
                                                                    r2041)
                                                                  (displaced-lexical-error303
                                                                    id2062)
                                                                  (void))
                                                              (if (not (top-ribcage-mutable?371
                                                                         top-ribcage2036))
                                                                  (syntax-error
                                                                    (source-wrap439
                                                                      e2045
                                                                      w2059
                                                                      ae2043)
                                                                    '"invalid definition in read-only environment")
                                                                  (void))
                                                              ((lambda (sym2063)
                                                                 (call-with-values
                                                                   (lambda ()
                                                                     (top-id-bound-var-name424
                                                                       sym2063
                                                                       (wrap-marks320
                                                                         (syntax-object-wrap66
                                                                           id2062))
                                                                       top-ribcage2036))
                                                                   (lambda (valsym2065
                                                                            bound-id2064)
                                                                     (begin
                                                                       (if (not (eq? (id-var-name429
                                                                                       id2062
                                                                                       '(()))
                                                                                     valsym2065))
                                                                           (syntax-error
                                                                             (source-wrap439
                                                                               e2045
                                                                               w2059
                                                                               ae2043)
                                                                             '"definition not permitted")
                                                                           (void))
                                                                       (if (read-only-binding?144
                                                                             valsym2065)
                                                                           (syntax-error
                                                                             (source-wrap439
                                                                               e2045
                                                                               w2059
                                                                               ae2043)
                                                                             '"invalid definition of read-only identifier")
                                                                           (void))
                                                                       (ct-eval/residualize2488
                                                                         ctem2039
                                                                         (lambda ()
                                                                           (list
                                                                             '$sc-put-cte
                                                                             (list
                                                                               'quote
                                                                               bound-id2064)
                                                                             (chi493
                                                                               rhs2060
                                                                               r2041
                                                                               r2041
                                                                               w2059
                                                                               '#t)
                                                                             (list
                                                                               'quote
                                                                               (top-ribcage-key370
                                                                                 top-ribcage2036)))))))))
                                                                ((lambda (x2066)
                                                                   ((lambda (e2067)
                                                                      (if (annotation?132
                                                                            e2067)
                                                                          (annotation-expression
                                                                            e2067)
                                                                          e2067))
                                                                     (if (syntax-object?64
                                                                           x2066)
                                                                         (syntax-object-expression65
                                                                           x2066)
                                                                         x2066)))
                                                                  id2062))))
                                                           (wrap438
                                                             id2061
                                                             w2059))))
                                                     (if (memv
                                                           t2048
                                                           '(define-form))
                                                         (call-with-values
                                                           (lambda ()
                                                             (parse-define505
                                                               e2045
                                                               w2044
                                                               ae2043))
                                                           (lambda (id2070
                                                                    rhs2069
                                                                    w2068)
                                                             ((lambda (id2071)
                                                                (begin
                                                                  (if (displaced-lexical?302
                                                                        id2071
                                                                        r2041)
                                                                      (displaced-lexical-error303
                                                                        id2071)
                                                                      (void))
                                                                  (if (not (top-ribcage-mutable?371
                                                                             top-ribcage2036))
                                                                      (syntax-error
                                                                        (source-wrap439
                                                                          e2045
                                                                          w2068
                                                                          ae2043)
                                                                        '"invalid definition in read-only environment")
                                                                      (void))
                                                                  ((lambda (sym2072)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (top-id-bound-var-name424
                                                                           sym2072
                                                                           (wrap-marks320
                                                                             (syntax-object-wrap66
                                                                               id2071))
                                                                           top-ribcage2036))
                                                                       (lambda (valsym2074
                                                                                bound-id2073)
                                                                         (begin
                                                                           (if (not (eq? (id-var-name429
                                                                                           id2071
                                                                                           '(()))
                                                                                         valsym2074))
                                                                               (syntax-error
                                                                                 (source-wrap439
                                                                                   e2045
                                                                                   w2068
                                                                                   ae2043)
                                                                                 '"definition not permitted")
                                                                               (void))
                                                                           (if (read-only-binding?144
                                                                                 valsym2074)
                                                                               (syntax-error
                                                                                 (source-wrap439
                                                                                   e2045
                                                                                   w2068
                                                                                   ae2043)
                                                                                 '"invalid definition of read-only identifier")
                                                                               (void))
                                                                           (if meta?2037
                                                                               (ct-eval/residualize2488
                                                                                 ctem2039
                                                                                 (lambda ()
                                                                                   (build-sequence239
                                                                                     '#f
                                                                                     (list
                                                                                       (list
                                                                                         '$sc-put-cte
                                                                                         (list
                                                                                           'quote
                                                                                           bound-id2073)
                                                                                         (list
                                                                                           'quote
                                                                                           (cons
                                                                                             'meta-variable
                                                                                             valsym2074))
                                                                                         (list
                                                                                           'quote
                                                                                           (top-ribcage-key370
                                                                                             top-ribcage2036)))
                                                                                       (list
                                                                                         'define
                                                                                         valsym2074
                                                                                         (chi493
                                                                                           rhs2069
                                                                                           r2041
                                                                                           r2041
                                                                                           w2068
                                                                                           '#t))))))
                                                                               ((lambda (x2075)
                                                                                  (build-sequence239
                                                                                    '#f
                                                                                    (list
                                                                                      x2075
                                                                                      (rt-eval/residualize487
                                                                                        rtem2038
                                                                                        (lambda ()
                                                                                          (list
                                                                                            'define
                                                                                            valsym2074
                                                                                            (chi493
                                                                                              rhs2069
                                                                                              r2041
                                                                                              r2041
                                                                                              w2068
                                                                                              '#f)))))))
                                                                                 (ct-eval/residualize2488
                                                                                   ctem2039
                                                                                   (lambda ()
                                                                                     (list
                                                                                       '$sc-put-cte
                                                                                       (list
                                                                                         'quote
                                                                                         bound-id2073)
                                                                                       (list
                                                                                         'quote
                                                                                         (cons
                                                                                           'global
                                                                                           valsym2074))
                                                                                       (list
                                                                                         'quote
                                                                                         (top-ribcage-key370
                                                                                           top-ribcage2036)))))))))))
                                                                    ((lambda (x2076)
                                                                       ((lambda (e2077)
                                                                          (if (annotation?132
                                                                                e2077)
                                                                              (annotation-expression
                                                                                e2077)
                                                                              e2077))
                                                                         (if (syntax-object?64
                                                                               x2076)
                                                                             (syntax-object-expression65
                                                                               x2076)
                                                                             x2076)))
                                                                      id2071))))
                                                               (wrap438
                                                                 id2070
                                                                 w2068))))
                                                         (if (memv
                                                               t2048
                                                               '($module-form))
                                                             ((lambda (ribcage2078)
                                                                (call-with-values
                                                                  (lambda ()
                                                                    (parse-module503
                                                                      e2045
                                                                      w2044
                                                                      ae2043
                                                                      (make-wrap319
                                                                        (wrap-marks320
                                                                          w2044)
                                                                        (cons
                                                                          ribcage2078
                                                                          (wrap-subst321
                                                                            w2044)))))
                                                                  (lambda (orig2082
                                                                           id2081
                                                                           exports2080
                                                                           forms2079)
                                                                    (begin
                                                                      (if (displaced-lexical?302
                                                                            id2081
                                                                            r2041)
                                                                          (displaced-lexical-error303
                                                                            (wrap438
                                                                              id2081
                                                                              w2044))
                                                                          (void))
                                                                      (if (not (top-ribcage-mutable?371
                                                                                 top-ribcage2036))
                                                                          (syntax-error
                                                                            orig2082
                                                                            '"invalid definition in read-only environment")
                                                                          (void))
                                                                      (chi-top-module477
                                                                        orig2082
                                                                        r2041
                                                                        r2041
                                                                        top-ribcage2036
                                                                        ribcage2078
                                                                        ctem2039
                                                                        rtem2038
                                                                        meta?2037
                                                                        id2081
                                                                        exports2080
                                                                        forms2079
                                                                        meta-residualize!2035)))))
                                                               (make-ribcage360
                                                                 '()
                                                                 '()
                                                                 '()))
                                                             (if (memv
                                                                   t2048
                                                                   '($import-form))
                                                                 (call-with-values
                                                                   (lambda ()
                                                                     (parse-import504
                                                                       e2045
                                                                       w2044
                                                                       ae2043))
                                                                   (lambda (orig2085
                                                                            only?2084
                                                                            mid2083)
                                                                     (begin
                                                                       (if (not (top-ribcage-mutable?371
                                                                                  top-ribcage2036))
                                                                           (syntax-error
                                                                             orig2085
                                                                             '"invalid definition in read-only environment")
                                                                           (void))
                                                                       (ct-eval/residualize2488
                                                                         ctem2039
                                                                         (lambda ()
                                                                           ((lambda (binding2086)
                                                                              ((lambda (t2087)
                                                                                 (if (memv
                                                                                       t2087
                                                                                       '($module))
                                                                                     (do-top-import484
                                                                                       only?2084
                                                                                       top-ribcage2036
                                                                                       mid2083
                                                                                       (interface-token450
                                                                                         (binding-value286
                                                                                           binding2086)))
                                                                                     (if (memv
                                                                                           t2087
                                                                                           '(displaced-lexical))
                                                                                         (displaced-lexical-error303
                                                                                           mid2083)
                                                                                         (syntax-error
                                                                                           mid2083
                                                                                           '"unknown module"))))
                                                                                (binding-type285
                                                                                  binding2086)))
                                                                             (lookup305
                                                                               (id-var-name429
                                                                                 mid2083
                                                                                 '(()))
                                                                               '())))))))
                                                                 (if (memv
                                                                       t2048
                                                                       '(alias-form))
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (parse-alias509
                                                                           e2045
                                                                           w2044
                                                                           ae2043))
                                                                       (lambda (new-id2089
                                                                                old-id2088)
                                                                         ((lambda (new-id2090)
                                                                            (begin
                                                                              (if (displaced-lexical?302
                                                                                    new-id2090
                                                                                    r2041)
                                                                                  (displaced-lexical-error303
                                                                                    new-id2090)
                                                                                  (void))
                                                                              (if (not (top-ribcage-mutable?371
                                                                                         top-ribcage2036))
                                                                                  (syntax-error
                                                                                    (source-wrap439
                                                                                      e2045
                                                                                      w2044
                                                                                      ae2043)
                                                                                    '"invalid definition in read-only environment")
                                                                                  (void))
                                                                              ((lambda (sym2091)
                                                                                 (call-with-values
                                                                                   (lambda ()
                                                                                     (top-id-bound-var-name424
                                                                                       sym2091
                                                                                       (wrap-marks320
                                                                                         (syntax-object-wrap66
                                                                                           new-id2090))
                                                                                       top-ribcage2036))
                                                                                   (lambda (valsym2093
                                                                                            bound-id2092)
                                                                                     (begin
                                                                                       (if (not (eq? (id-var-name429
                                                                                                       new-id2090
                                                                                                       '(()))
                                                                                                     valsym2093))
                                                                                           (syntax-error
                                                                                             (source-wrap439
                                                                                               e2045
                                                                                               w2044
                                                                                               ae2043)
                                                                                             '"definition not permitted")
                                                                                           (void))
                                                                                       (if (read-only-binding?144
                                                                                             valsym2093)
                                                                                           (syntax-error
                                                                                             (source-wrap439
                                                                                               e2045
                                                                                               w2044
                                                                                               ae2043)
                                                                                             '"invalid definition of read-only identifier")
                                                                                           (void))
                                                                                       (ct-eval/residualize2488
                                                                                         ctem2039
                                                                                         (lambda ()
                                                                                           (list
                                                                                             '$sc-put-cte
                                                                                             (list
                                                                                               'quote
                                                                                               (make-resolved-id413
                                                                                                 sym2091
                                                                                                 (wrap-marks320
                                                                                                   (syntax-object-wrap66
                                                                                                     new-id2090))
                                                                                                 (id-var-name429
                                                                                                   old-id2088
                                                                                                   w2044)))
                                                                                             (list
                                                                                               'quote
                                                                                               '(do-alias
                                                                                                  .
                                                                                                  #f))
                                                                                             (list
                                                                                               'quote
                                                                                               (top-ribcage-key370
                                                                                                 top-ribcage2036)))))))))
                                                                                ((lambda (x2094)
                                                                                   ((lambda (e2095)
                                                                                      (if (annotation?132
                                                                                            e2095)
                                                                                          (annotation-expression
                                                                                            e2095)
                                                                                          e2095))
                                                                                     (if (syntax-object?64
                                                                                           x2094)
                                                                                         (syntax-object-expression65
                                                                                           x2094)
                                                                                         x2094)))
                                                                                  new-id2090))))
                                                                           (wrap438
                                                                             new-id2089
                                                                             w2044))))
                                                                     (begin
                                                                       (if meta-seen?2034
                                                                           (syntax-error
                                                                             (source-wrap439
                                                                               e2045
                                                                               w2044
                                                                               ae2043)
                                                                             '"invalid meta definition")
                                                                           (void))
                                                                       (if meta?2037
                                                                           ((lambda (x2096)
                                                                              (begin
                                                                                (top-level-eval-hook133
                                                                                  x2096)
                                                                                (ct-eval/residualize3489
                                                                                  ctem2039
                                                                                  void
                                                                                  (lambda ()
                                                                                    x2096))))
                                                                             (chi-expr494
                                                                               type2047
                                                                               value2046
                                                                               e2045
                                                                               r2041
                                                                               r2041
                                                                               w2044
                                                                               ae2043
                                                                               '#t))
                                                                           (rt-eval/residualize487
                                                                             rtem2038
                                                                             (lambda ()
                                                                               (chi-expr494
                                                                                 type2047
                                                                                 value2046
                                                                                 e2045
                                                                                 r2041
                                                                                 r2041
                                                                                 w2044
                                                                                 ae2043
                                                                                 '#f)))))))))))))))
                                type2047)))))
            (flatten-exports445 (lambda (exports2030)
                                  ((letrec ((loop2031 (lambda (exports2033
                                                               ls2032)
                                                        (if (null?
                                                              exports2033)
                                                            ls2032
                                                            (loop2031
                                                              (cdr exports2033)
                                                              (if (pair?
                                                                    (car exports2033))
                                                                  (loop2031
                                                                    (car exports2033)
                                                                    ls2032)
                                                                  (cons
                                                                    (car exports2033)
                                                                    ls2032)))))))
                                     loop2031)
                                    exports2030
                                    '())))
            (make-interface446 (lambda (marks2029 exports2028 token2027)
                                 (vector
                                   'interface
                                   marks2029
                                   exports2028
                                   token2027)))
            (interface?447 (lambda (x2026)
                             (if (vector? x2026)
                                 (if (= (vector-length x2026) '4)
                                     (eq? (vector-ref x2026 '0) 'interface)
                                     '#f)
                                 '#f)))
            (interface-marks448 (lambda (x2025) (vector-ref x2025 '1)))
            (interface-exports449 (lambda (x2024)
                                    (vector-ref x2024 '2)))
            (interface-token450 (lambda (x2023) (vector-ref x2023 '3)))
            (set-interface-marks!451 (lambda (x2022 update2021)
                                       (vector-set! x2022 '1 update2021)))
            (set-interface-exports!452 (lambda (x2020 update2019)
                                         (vector-set!
                                           x2020
                                           '2
                                           update2019)))
            (set-interface-token!453 (lambda (x2018 update2017)
                                       (vector-set! x2018 '3 update2017)))
            (make-unresolved-interface454 (lambda (mid2015 exports2014)
                                            (make-interface446
                                              (wrap-marks320
                                                (syntax-object-wrap66
                                                  mid2015))
                                              (list->vector
                                                (map (lambda (x2016)
                                                       (if (pair? x2016)
                                                           (car x2016)
                                                           x2016))
                                                     exports2014))
                                              '#f)))
            (make-resolved-interface455 (lambda (mid2012 exports2011
                                                 token2010)
                                          (make-interface446
                                            (wrap-marks320
                                              (syntax-object-wrap66
                                                mid2012))
                                            (list->vector
                                              (map (lambda (x2013)
                                                     (id->resolved-id414
                                                       (if (pair? x2013)
                                                           (car x2013)
                                                           x2013)))
                                                   exports2011))
                                            token2010)))
            (make-module-binding456 (lambda (type2009 id2008 label2007
                                             imps2006 val2005 exported2004)
                                      (vector 'module-binding type2009
                                        id2008 label2007 imps2006 val2005
                                        exported2004)))
            (module-binding?457 (lambda (x2003)
                                  (if (vector? x2003)
                                      (if (= (vector-length x2003) '7)
                                          (eq? (vector-ref x2003 '0)
                                               'module-binding)
                                          '#f)
                                      '#f)))
            (module-binding-type458 (lambda (x2002)
                                      (vector-ref x2002 '1)))
            (module-binding-id459 (lambda (x2001)
                                    (vector-ref x2001 '2)))
            (module-binding-label460 (lambda (x2000)
                                       (vector-ref x2000 '3)))
            (module-binding-imps461 (lambda (x1999)
                                      (vector-ref x1999 '4)))
            (module-binding-val462 (lambda (x1998)
                                     (vector-ref x1998 '5)))
            (module-binding-exported463 (lambda (x1997)
                                          (vector-ref x1997 '6)))
            (set-module-binding-type!464 (lambda (x1996 update1995)
                                           (vector-set!
                                             x1996
                                             '1
                                             update1995)))
            (set-module-binding-id!465 (lambda (x1994 update1993)
                                         (vector-set!
                                           x1994
                                           '2
                                           update1993)))
            (set-module-binding-label!466 (lambda (x1992 update1991)
                                            (vector-set!
                                              x1992
                                              '3
                                              update1991)))
            (set-module-binding-imps!467 (lambda (x1990 update1989)
                                           (vector-set!
                                             x1990
                                             '4
                                             update1989)))
            (set-module-binding-val!468 (lambda (x1988 update1987)
                                          (vector-set!
                                            x1988
                                            '5
                                            update1987)))
            (set-module-binding-exported!469 (lambda (x1986 update1985)
                                               (vector-set!
                                                 x1986
                                                 '6
                                                 update1985)))
            (create-module-binding470 (lambda (type1984 id1983 label1982
                                               imps1981 val1980)
                                        (make-module-binding456 type1984
                                          id1983 label1982 imps1981 val1980
                                          '#f)))
            (make-frob471 (lambda (e1979 meta?1978)
                            (vector 'frob e1979 meta?1978)))
            (frob?472 (lambda (x1977)
                        (if (vector? x1977)
                            (if (= (vector-length x1977) '3)
                                (eq? (vector-ref x1977 '0) 'frob)
                                '#f)
                            '#f)))
            (frob-e473 (lambda (x1976) (vector-ref x1976 '1)))
            (frob-meta?474 (lambda (x1975) (vector-ref x1975 '2)))
            (set-frob-e!475 (lambda (x1974 update1973)
                              (vector-set! x1974 '1 update1973)))
            (set-frob-meta?!476 (lambda (x1972 update1971)
                                  (vector-set! x1972 '2 update1971)))
            (chi-top-module477 (lambda (orig1912 r1911 mr1910
                                        top-ribcage1909 ribcage1908
                                        ctem1907 rtem1906 meta?1905 id1904
                                        exports1903 forms1902
                                        meta-residualize!1901)
                                 ((lambda (fexports1913)
                                    (call-with-values
                                      (lambda ()
                                        (chi-external481 ribcage1908
                                          orig1912
                                          (map (lambda (d1970)
                                                 (make-frob471
                                                   d1970
                                                   meta?1905))
                                               forms1902)
                                          r1911 mr1910 ctem1907 exports1903
                                          fexports1913
                                          meta-residualize!1901))
                                      (lambda (r1917 mr1916 bindings1915
                                               inits1914)
                                        ((letrec ((process-exports1918 (lambda (fexports1920
                                                                                ctdefs1919)
                                                                         (if (null?
                                                                               fexports1920)
                                                                             ((letrec ((process-locals1921 (lambda (bs1926
                                                                                                                    r1925
                                                                                                                    dts1924
                                                                                                                    dvs1923
                                                                                                                    des1922)
                                                                                                             (if (null?
                                                                                                                   bs1926)
                                                                                                                 ((lambda (des1928
                                                                                                                           inits1927)
                                                                                                                    (build-sequence239
                                                                                                                      '#f
                                                                                                                      (append
                                                                                                                        (ctdefs1919)
                                                                                                                        (list
                                                                                                                          (ct-eval/residualize2488
                                                                                                                            ctem1907
                                                                                                                            (lambda ()
                                                                                                                              ((lambda (sym1929)
                                                                                                                                 ((lambda (token1930)
                                                                                                                                    ((lambda (b1931)
                                                                                                                                       ((lambda ()
                                                                                                                                          (call-with-values
                                                                                                                                            (lambda ()
                                                                                                                                              (top-id-bound-var-name424
                                                                                                                                                sym1929
                                                                                                                                                (wrap-marks320
                                                                                                                                                  (syntax-object-wrap66
                                                                                                                                                    id1904))
                                                                                                                                                top-ribcage1909))
                                                                                                                                            (lambda (valsym1933
                                                                                                                                                     bound-id1932)
                                                                                                                                              (begin
                                                                                                                                                (if (not (eq? (id-var-name429
                                                                                                                                                                id1904
                                                                                                                                                                '(()))
                                                                                                                                                              valsym1933))
                                                                                                                                                    (syntax-error
                                                                                                                                                      orig1912
                                                                                                                                                      '"definition not permitted")
                                                                                                                                                    (void))
                                                                                                                                                (if (read-only-binding?144
                                                                                                                                                      valsym1933)
                                                                                                                                                    (syntax-error
                                                                                                                                                      orig1912
                                                                                                                                                      '"invalid definition of read-only identifier")
                                                                                                                                                    (void))
                                                                                                                                                (list
                                                                                                                                                  '$sc-put-cte
                                                                                                                                                  (list
                                                                                                                                                    'quote
                                                                                                                                                    bound-id1932)
                                                                                                                                                  b1931
                                                                                                                                                  (list
                                                                                                                                                    'quote
                                                                                                                                                    (top-ribcage-key370
                                                                                                                                                      top-ribcage1909)))))))))
                                                                                                                                      (list
                                                                                                                                        'quote
                                                                                                                                        (cons
                                                                                                                                          '$module
                                                                                                                                          (make-resolved-interface455
                                                                                                                                            id1904
                                                                                                                                            exports1903
                                                                                                                                            token1930)))))
                                                                                                                                   (generate-id147
                                                                                                                                     sym1929)))
                                                                                                                                ((lambda (x1934)
                                                                                                                                   ((lambda (e1935)
                                                                                                                                      (if (annotation?132
                                                                                                                                            e1935)
                                                                                                                                          (annotation-expression
                                                                                                                                            e1935)
                                                                                                                                          e1935))
                                                                                                                                     (if (syntax-object?64
                                                                                                                                           x1934)
                                                                                                                                         (syntax-object-expression65
                                                                                                                                           x1934)
                                                                                                                                         x1934)))
                                                                                                                                  id1904))))
                                                                                                                          (rt-eval/residualize487
                                                                                                                            rtem1906
                                                                                                                            (lambda ()
                                                                                                                              (build-top-module242
                                                                                                                                '#f
                                                                                                                                dts1924
                                                                                                                                dvs1923
                                                                                                                                des1928
                                                                                                                                (if (null?
                                                                                                                                      inits1927)
                                                                                                                                    (chi-void513)
                                                                                                                                    (build-sequence239
                                                                                                                                      '#f
                                                                                                                                      (append
                                                                                                                                        inits1927
                                                                                                                                        (list
                                                                                                                                          (chi-void513))))))))))))
                                                                                                                   (chi-frobs490
                                                                                                                     des1922
                                                                                                                     r1925
                                                                                                                     mr1916
                                                                                                                     '#f)
                                                                                                                   (chi-frobs490
                                                                                                                     inits1914
                                                                                                                     r1925
                                                                                                                     mr1916
                                                                                                                     '#f))
                                                                                                                 ((lambda (b1937
                                                                                                                           bs1936)
                                                                                                                    ((lambda (t1938)
                                                                                                                       ((lambda (t1939)
                                                                                                                          (if (memv
                                                                                                                                t1939
                                                                                                                                '(define-form))
                                                                                                                              ((lambda (label1940)
                                                                                                                                 (if (module-binding-exported463
                                                                                                                                       b1937)
                                                                                                                                     ((lambda (var1941)
                                                                                                                                        (process-locals1921
                                                                                                                                          bs1936
                                                                                                                                          r1925
                                                                                                                                          (cons
                                                                                                                                            'global
                                                                                                                                            dts1924)
                                                                                                                                          (cons
                                                                                                                                            label1940
                                                                                                                                            dvs1923)
                                                                                                                                          (cons
                                                                                                                                            (module-binding-val462
                                                                                                                                              b1937)
                                                                                                                                            des1922)))
                                                                                                                                       (module-binding-id459
                                                                                                                                         b1937))
                                                                                                                                     ((lambda (var1942)
                                                                                                                                        (process-locals1921
                                                                                                                                          bs1936
                                                                                                                                          (extend-env299
                                                                                                                                            label1940
                                                                                                                                            (cons
                                                                                                                                              'lexical
                                                                                                                                              var1942)
                                                                                                                                            r1925)
                                                                                                                                          (cons
                                                                                                                                            'local
                                                                                                                                            dts1924)
                                                                                                                                          (cons
                                                                                                                                            var1942
                                                                                                                                            dvs1923)
                                                                                                                                          (cons
                                                                                                                                            (module-binding-val462
                                                                                                                                              b1937)
                                                                                                                                            des1922)))
                                                                                                                                       (gen-var518
                                                                                                                                         (module-binding-id459
                                                                                                                                           b1937)))))
                                                                                                                                (get-indirect-label355
                                                                                                                                  (module-binding-label460
                                                                                                                                    b1937)))
                                                                                                                              (if (memv
                                                                                                                                    t1939
                                                                                                                                    '(ctdefine-form
                                                                                                                                       define-syntax-form
                                                                                                                                       $module-form
                                                                                                                                       alias-form))
                                                                                                                                  (process-locals1921
                                                                                                                                    bs1936
                                                                                                                                    r1925
                                                                                                                                    dts1924
                                                                                                                                    dvs1923
                                                                                                                                    des1922)
                                                                                                                                  (error 'sc-expand-internal
                                                                                                                                    '"unexpected module binding type ~s"
                                                                                                                                    t1938))))
                                                                                                                         (module-binding-type458
                                                                                                                           b1937)))
                                                                                                                      (module-binding-type458
                                                                                                                        b1937)))
                                                                                                                   (car bs1926)
                                                                                                                   (cdr bs1926))))))
                                                                                process-locals1921)
                                                                               bindings1915
                                                                               r1917
                                                                               '()
                                                                               '()
                                                                               '())
                                                                             ((lambda (id1944
                                                                                       fexports1943)
                                                                                ((letrec ((loop1945 (lambda (bs1946)
                                                                                                      (if (null?
                                                                                                            bs1946)
                                                                                                          (process-exports1918
                                                                                                            fexports1943
                                                                                                            ctdefs1919)
                                                                                                          ((lambda (b1948
                                                                                                                    bs1947)
                                                                                                             (if (free-id=?430
                                                                                                                   (module-binding-id459
                                                                                                                     b1948)
                                                                                                                   id1944)
                                                                                                                 (if (module-binding-exported463
                                                                                                                       b1948)
                                                                                                                     (process-exports1918
                                                                                                                       fexports1943
                                                                                                                       ctdefs1919)
                                                                                                                     ((lambda (t1949)
                                                                                                                        ((lambda (label1950)
                                                                                                                           ((lambda (imps1951)
                                                                                                                              ((lambda (fexports1952)
                                                                                                                                 ((lambda ()
                                                                                                                                    (begin
                                                                                                                                      (set-module-binding-exported!469
                                                                                                                                        b1948
                                                                                                                                        '#t)
                                                                                                                                      ((lambda (t1953)
                                                                                                                                         (if (memv
                                                                                                                                               t1953
                                                                                                                                               '(define-form))
                                                                                                                                             ((lambda (sym1954)
                                                                                                                                                (begin
                                                                                                                                                  (set-indirect-label!356
                                                                                                                                                    label1950
                                                                                                                                                    sym1954)
                                                                                                                                                  (process-exports1918
                                                                                                                                                    fexports1952
                                                                                                                                                    ctdefs1919)))
                                                                                                                                               (generate-id147
                                                                                                                                                 ((lambda (x1955)
                                                                                                                                                    ((lambda (e1956)
                                                                                                                                                       (if (annotation?132
                                                                                                                                                             e1956)
                                                                                                                                                           (annotation-expression
                                                                                                                                                             e1956)
                                                                                                                                                           e1956))
                                                                                                                                                      (if (syntax-object?64
                                                                                                                                                            x1955)
                                                                                                                                                          (syntax-object-expression65
                                                                                                                                                            x1955)
                                                                                                                                                          x1955)))
                                                                                                                                                   id1944)))
                                                                                                                                             (if (memv
                                                                                                                                                   t1953
                                                                                                                                                   '(ctdefine-form))
                                                                                                                                                 ((lambda (b1957)
                                                                                                                                                    (process-exports1918
                                                                                                                                                      fexports1952
                                                                                                                                                      (lambda ()
                                                                                                                                                        ((lambda (sym1958)
                                                                                                                                                           (begin
                                                                                                                                                             (set-indirect-label!356
                                                                                                                                                               label1950
                                                                                                                                                               sym1958)
                                                                                                                                                             (cons
                                                                                                                                                               (ct-eval/residualize3489
                                                                                                                                                                 ctem1907
                                                                                                                                                                 (lambda ()
                                                                                                                                                                   (put-cte-hook141
                                                                                                                                                                     sym1958
                                                                                                                                                                     b1957))
                                                                                                                                                                 (lambda ()
                                                                                                                                                                   (list
                                                                                                                                                                     '$sc-put-cte
                                                                                                                                                                     (list
                                                                                                                                                                       'quote
                                                                                                                                                                       sym1958)
                                                                                                                                                                     (list
                                                                                                                                                                       'quote
                                                                                                                                                                       b1957)
                                                                                                                                                                     (list
                                                                                                                                                                       'quote
                                                                                                                                                                       '#f))))
                                                                                                                                                               (ctdefs1919))))
                                                                                                                                                          (binding-value286
                                                                                                                                                            b1957)))))
                                                                                                                                                   (module-binding-val462
                                                                                                                                                     b1948))
                                                                                                                                                 (if (memv
                                                                                                                                                       t1953
                                                                                                                                                       '(define-syntax-form))
                                                                                                                                                     ((lambda (sym1959)
                                                                                                                                                        (process-exports1918
                                                                                                                                                          fexports1952
                                                                                                                                                          (lambda ()
                                                                                                                                                            ((lambda (local-label1960)
                                                                                                                                                               (begin
                                                                                                                                                                 (set-indirect-label!356
                                                                                                                                                                   label1950
                                                                                                                                                                   sym1959)
                                                                                                                                                                 (cons
                                                                                                                                                                   (ct-eval/residualize3489
                                                                                                                                                                     ctem1907
                                                                                                                                                                     (lambda ()
                                                                                                                                                                       (put-cte-hook141
                                                                                                                                                                         sym1959
                                                                                                                                                                         (car (module-binding-val462
                                                                                                                                                                                b1948))))
                                                                                                                                                                     (lambda ()
                                                                                                                                                                       (list
                                                                                                                                                                         '$sc-put-cte
                                                                                                                                                                         (list
                                                                                                                                                                           'quote
                                                                                                                                                                           sym1959)
                                                                                                                                                                         (cdr (module-binding-val462
                                                                                                                                                                                b1948))
                                                                                                                                                                         (list
                                                                                                                                                                           'quote
                                                                                                                                                                           '#f))))
                                                                                                                                                                   (ctdefs1919))))
                                                                                                                                                              (get-indirect-label355
                                                                                                                                                                label1950)))))
                                                                                                                                                       (generate-id147
                                                                                                                                                         ((lambda (x1961)
                                                                                                                                                            ((lambda (e1962)
                                                                                                                                                               (if (annotation?132
                                                                                                                                                                     e1962)
                                                                                                                                                                   (annotation-expression
                                                                                                                                                                     e1962)
                                                                                                                                                                   e1962))
                                                                                                                                                              (if (syntax-object?64
                                                                                                                                                                    x1961)
                                                                                                                                                                  (syntax-object-expression65
                                                                                                                                                                    x1961)
                                                                                                                                                                  x1961)))
                                                                                                                                                           id1944)))
                                                                                                                                                     (if (memv
                                                                                                                                                           t1953
                                                                                                                                                           '($module-form))
                                                                                                                                                         ((lambda (sym1964
                                                                                                                                                                   exports1963)
                                                                                                                                                            (process-exports1918
                                                                                                                                                              (append
                                                                                                                                                                (flatten-exports445
                                                                                                                                                                  exports1963)
                                                                                                                                                                fexports1952)
                                                                                                                                                              (lambda ()
                                                                                                                                                                (begin
                                                                                                                                                                  (set-indirect-label!356
                                                                                                                                                                    label1950
                                                                                                                                                                    sym1964)
                                                                                                                                                                  ((lambda (rest1965)
                                                                                                                                                                     ((lambda (x1966)
                                                                                                                                                                        (cons
                                                                                                                                                                          (ct-eval/residualize3489
                                                                                                                                                                            ctem1907
                                                                                                                                                                            (lambda ()
                                                                                                                                                                              (put-cte-hook141
                                                                                                                                                                                sym1964
                                                                                                                                                                                x1966))
                                                                                                                                                                            (lambda ()
                                                                                                                                                                              (list
                                                                                                                                                                                '$sc-put-cte
                                                                                                                                                                                (list
                                                                                                                                                                                  'quote
                                                                                                                                                                                  sym1964)
                                                                                                                                                                                (list
                                                                                                                                                                                  'quote
                                                                                                                                                                                  x1966)
                                                                                                                                                                                (list
                                                                                                                                                                                  'quote
                                                                                                                                                                                  '#f))))
                                                                                                                                                                          rest1965))
                                                                                                                                                                       (cons
                                                                                                                                                                         '$module
                                                                                                                                                                         (make-resolved-interface455
                                                                                                                                                                           id1944
                                                                                                                                                                           exports1963
                                                                                                                                                                           sym1964))))
                                                                                                                                                                    (ctdefs1919))))))
                                                                                                                                                           (generate-id147
                                                                                                                                                             ((lambda (x1967)
                                                                                                                                                                ((lambda (e1968)
                                                                                                                                                                   (if (annotation?132
                                                                                                                                                                         e1968)
                                                                                                                                                                       (annotation-expression
                                                                                                                                                                         e1968)
                                                                                                                                                                       e1968))
                                                                                                                                                                  (if (syntax-object?64
                                                                                                                                                                        x1967)
                                                                                                                                                                      (syntax-object-expression65
                                                                                                                                                                        x1967)
                                                                                                                                                                      x1967)))
                                                                                                                                                               id1944))
                                                                                                                                                           (module-binding-val462
                                                                                                                                                             b1948))
                                                                                                                                                         (if (memv
                                                                                                                                                               t1953
                                                                                                                                                               '(alias-form))
                                                                                                                                                             (process-exports1918
                                                                                                                                                               fexports1952
                                                                                                                                                               (lambda ()
                                                                                                                                                                 ((lambda (rest1969)
                                                                                                                                                                    (begin
                                                                                                                                                                      (if (indirect-label?351
                                                                                                                                                                            label1950)
                                                                                                                                                                          (if (not (symbol?
                                                                                                                                                                                     (get-indirect-label355
                                                                                                                                                                                       label1950)))
                                                                                                                                                                              (syntax-error
                                                                                                                                                                                (module-binding-id459
                                                                                                                                                                                  b1948)
                                                                                                                                                                                '"unexported target of alias")
                                                                                                                                                                              (void))
                                                                                                                                                                          (void))
                                                                                                                                                                      rest1969))
                                                                                                                                                                   (ctdefs1919))))
                                                                                                                                                             (error 'sc-expand-internal
                                                                                                                                                               '"unexpected module binding type ~s"
                                                                                                                                                               t1949)))))))
                                                                                                                                        t1949)))))
                                                                                                                                (append
                                                                                                                                  imps1951
                                                                                                                                  fexports1943)))
                                                                                                                             (module-binding-imps461
                                                                                                                               b1948)))
                                                                                                                          (module-binding-label460
                                                                                                                            b1948)))
                                                                                                                       (module-binding-type458
                                                                                                                         b1948)))
                                                                                                                 (loop1945
                                                                                                                   bs1947)))
                                                                                                            (car bs1946)
                                                                                                            (cdr bs1946))))))
                                                                                   loop1945)
                                                                                  bindings1915))
                                                                               (car fexports1920)
                                                                               (cdr fexports1920))))))
                                           process-exports1918)
                                          fexports1913
                                          (lambda () '())))))
                                   (flatten-exports445 exports1903))))
            (id-set-diff478 (lambda (exports1900 defs1899)
                              (if (null? exports1900)
                                  '()
                                  (if (bound-id-member?437
                                        (car exports1900)
                                        defs1899)
                                      (id-set-diff478
                                        (cdr exports1900)
                                        defs1899)
                                      (cons
                                        (car exports1900)
                                        (id-set-diff478
                                          (cdr exports1900)
                                          defs1899))))))
            (check-module-exports479 (lambda (source-exp1874
                                              fexports1873 ids1872)
                                       (letrec ((defined?1875 (lambda (e1882
                                                                       ids1881)
                                                                (ormap
                                                                  (lambda (x1883)
                                                                    (if (import-interface?375
                                                                          x1883)
                                                                        ((lambda (x.iface1885
                                                                                  x.new-marks1884)
                                                                           ((lambda (t1886)
                                                                              (if t1886
                                                                                  ((lambda (token1887)
                                                                                     (lookup-import-binding-name410
                                                                                       ((lambda (x1888)
                                                                                          ((lambda (e1889)
                                                                                             (if (annotation?132
                                                                                                   e1889)
                                                                                                 (annotation-expression
                                                                                                   e1889)
                                                                                                 e1889))
                                                                                            (if (syntax-object?64
                                                                                                  x1888)
                                                                                                (syntax-object-expression65
                                                                                                  x1888)
                                                                                                x1888)))
                                                                                         e1882)
                                                                                       (id-marks316
                                                                                         e1882)
                                                                                       token1887
                                                                                       x.new-marks1884))
                                                                                    t1886)
                                                                                  ((lambda (v1890)
                                                                                     ((letrec ((lp1891 (lambda (i1892)
                                                                                                         (if (>= i1892
                                                                                                                 '0)
                                                                                                             ((lambda (t1893)
                                                                                                                (if t1893
                                                                                                                    t1893
                                                                                                                    (lp1891
                                                                                                                      (fx- i1892
                                                                                                                         '1))))
                                                                                                               ((lambda (id1894)
                                                                                                                  (help-bound-id=?432
                                                                                                                    ((lambda (x1897)
                                                                                                                       ((lambda (e1898)
                                                                                                                          (if (annotation?132
                                                                                                                                e1898)
                                                                                                                              (annotation-expression
                                                                                                                                e1898)
                                                                                                                              e1898))
                                                                                                                         (if (syntax-object?64
                                                                                                                               x1897)
                                                                                                                             (syntax-object-expression65
                                                                                                                               x1897)
                                                                                                                             x1897)))
                                                                                                                      id1894)
                                                                                                                    (join-marks418
                                                                                                                      x.new-marks1884
                                                                                                                      (id-marks316
                                                                                                                        id1894))
                                                                                                                    ((lambda (x1895)
                                                                                                                       ((lambda (e1896)
                                                                                                                          (if (annotation?132
                                                                                                                                e1896)
                                                                                                                              (annotation-expression
                                                                                                                                e1896)
                                                                                                                              e1896))
                                                                                                                         (if (syntax-object?64
                                                                                                                               x1895)
                                                                                                                             (syntax-object-expression65
                                                                                                                               x1895)
                                                                                                                             x1895)))
                                                                                                                      e1882)
                                                                                                                    (id-marks316
                                                                                                                      e1882)))
                                                                                                                 (vector-ref
                                                                                                                   v1890
                                                                                                                   i1892)))
                                                                                                             '#f))))
                                                                                        lp1891)
                                                                                       (fx- (vector-length
                                                                                            v1890)
                                                                                          '1)))
                                                                                    (interface-exports449
                                                                                      x.iface1885))))
                                                                             (interface-token450
                                                                               x.iface1885)))
                                                                          (import-interface-interface376
                                                                            x1883)
                                                                          (import-interface-new-marks377
                                                                            x1883))
                                                                        (bound-id=?433
                                                                          e1882
                                                                          x1883)))
                                                                  ids1881))))
                                         ((letrec ((loop1876 (lambda (fexports1878
                                                                      missing1877)
                                                               (if (null?
                                                                     fexports1878)
                                                                   (if (not (null?
                                                                              missing1877))
                                                                       (syntax-error
                                                                         (car missing1877)
                                                                         (if (= (length
                                                                                  missing1877)
                                                                                '1)
                                                                             '"missing definition for export"
                                                                             '"missing definition for multiple exports, including"))
                                                                       (void))
                                                                   ((lambda (e1880
                                                                             fexports1879)
                                                                      (if (defined?1875
                                                                            e1880
                                                                            ids1872)
                                                                          (loop1876
                                                                            fexports1879
                                                                            missing1877)
                                                                          (loop1876
                                                                            fexports1879
                                                                            (cons
                                                                              e1880
                                                                              missing1877))))
                                                                     (car fexports1878)
                                                                     (cdr fexports1878))))))
                                            loop1876)
                                           fexports1873
                                           '()))))
            (check-defined-ids480 (lambda (source-exp1821 ls1820)
                                    (letrec ((vfold1822 (lambda (v1867
                                                                 p1866
                                                                 cls1865)
                                                          ((lambda (len1868)
                                                             ((letrec ((lp1869 (lambda (i1871
                                                                                        cls1870)
                                                                                 (if (= i1871
                                                                                        len1868)
                                                                                     cls1870
                                                                                     (lp1869
                                                                                       (+ i1871
                                                                                          '1)
                                                                                       (p1866
                                                                                         (vector-ref
                                                                                           v1867
                                                                                           i1871)
                                                                                         cls1870))))))
                                                                lp1869)
                                                               '0
                                                               cls1865))
                                                            (vector-length
                                                              v1867))))
                                             (conflicts1823 (lambda (x1852
                                                                     y1851
                                                                     cls1850)
                                                              (if (import-interface?375
                                                                    x1852)
                                                                  ((lambda (x.iface1854
                                                                            x.new-marks1853)
                                                                     (if (import-interface?375
                                                                           y1851)
                                                                         ((lambda (y.iface1856
                                                                                   y.new-marks1855)
                                                                            ((lambda (xe1858
                                                                                      ye1857)
                                                                               (if (> (vector-length
                                                                                        xe1858)
                                                                                      (vector-length
                                                                                        ye1857))
                                                                                   (vfold1822
                                                                                     ye1857
                                                                                     (lambda (id1860
                                                                                              cls1859)
                                                                                       (id-iface-conflicts1824
                                                                                         id1860
                                                                                         y.new-marks1855
                                                                                         x.iface1854
                                                                                         x.new-marks1853
                                                                                         cls1859))
                                                                                     cls1850)
                                                                                   (vfold1822
                                                                                     xe1858
                                                                                     (lambda (id1862
                                                                                              cls1861)
                                                                                       (id-iface-conflicts1824
                                                                                         id1862
                                                                                         x.new-marks1853
                                                                                         y.iface1856
                                                                                         y.new-marks1855
                                                                                         cls1861))
                                                                                     cls1850)))
                                                                              (interface-exports449
                                                                                x.iface1854)
                                                                              (interface-exports449
                                                                                y.iface1856)))
                                                                           (import-interface-interface376
                                                                             y1851)
                                                                           (import-interface-new-marks377
                                                                             y1851))
                                                                         (id-iface-conflicts1824
                                                                           y1851
                                                                           '()
                                                                           x.iface1854
                                                                           x.new-marks1853
                                                                           cls1850)))
                                                                    (import-interface-interface376
                                                                      x1852)
                                                                    (import-interface-new-marks377
                                                                      x1852))
                                                                  (if (import-interface?375
                                                                        y1851)
                                                                      ((lambda (y.iface1864
                                                                                y.new-marks1863)
                                                                         (id-iface-conflicts1824
                                                                           x1852
                                                                           '()
                                                                           y.iface1864
                                                                           y.new-marks1863
                                                                           cls1850))
                                                                        (import-interface-interface376
                                                                          y1851)
                                                                        (import-interface-new-marks377
                                                                          y1851))
                                                                      (if (bound-id=?433
                                                                            x1852
                                                                            y1851)
                                                                          (cons
                                                                            x1852
                                                                            cls1850)
                                                                          cls1850)))))
                                             (id-iface-conflicts1824 (lambda (id1837
                                                                              id.new-marks1836
                                                                              iface1835
                                                                              iface.new-marks1834
                                                                              cls1833)
                                                                       ((lambda (id.sym1839
                                                                                 id.marks1838)
                                                                          ((lambda (t1840)
                                                                             (if t1840
                                                                                 ((lambda (token1841)
                                                                                    (if (lookup-import-binding-name410
                                                                                          id.sym1839
                                                                                          id.marks1838
                                                                                          token1841
                                                                                          iface.new-marks1834)
                                                                                        (cons
                                                                                          id1837
                                                                                          cls1833)
                                                                                        cls1833))
                                                                                   t1840)
                                                                                 (vfold1822
                                                                                   (interface-exports449
                                                                                     iface1835)
                                                                                   (lambda (*id1843
                                                                                            cls1842)
                                                                                     ((lambda (*id.sym1845
                                                                                               *id.marks1844)
                                                                                        (if (help-bound-id=?432
                                                                                              *id.sym1845
                                                                                              *id.marks1844
                                                                                              id.sym1839
                                                                                              id.marks1838)
                                                                                            (cons
                                                                                              *id1843
                                                                                              cls1842)
                                                                                            cls1842))
                                                                                       ((lambda (x1846)
                                                                                          ((lambda (e1847)
                                                                                             (if (annotation?132
                                                                                                   e1847)
                                                                                                 (annotation-expression
                                                                                                   e1847)
                                                                                                 e1847))
                                                                                            (if (syntax-object?64
                                                                                                  x1846)
                                                                                                (syntax-object-expression65
                                                                                                  x1846)
                                                                                                x1846)))
                                                                                         *id1843)
                                                                                       (join-marks418
                                                                                         iface.new-marks1834
                                                                                         (id-marks316
                                                                                           *id1843))))
                                                                                   cls1833)))
                                                                            (interface-token450
                                                                              iface1835)))
                                                                         ((lambda (x1848)
                                                                            ((lambda (e1849)
                                                                               (if (annotation?132
                                                                                     e1849)
                                                                                   (annotation-expression
                                                                                     e1849)
                                                                                   e1849))
                                                                              (if (syntax-object?64
                                                                                    x1848)
                                                                                  (syntax-object-expression65
                                                                                    x1848)
                                                                                  x1848)))
                                                                           id1837)
                                                                         (join-marks418
                                                                           id.new-marks1836
                                                                           (id-marks316
                                                                             id1837))))))
                                      (if (not (null? ls1820))
                                          ((letrec ((lp1825 (lambda (x1828
                                                                     ls1827
                                                                     cls1826)
                                                              (if (null?
                                                                    ls1827)
                                                                  (if (not (null?
                                                                             cls1826))
                                                                      ((lambda (cls1829)
                                                                         (syntax-error
                                                                           source-exp1821
                                                                           '"duplicate definition for "
                                                                           (symbol->string
                                                                             (car cls1829))
                                                                           '" in"))
                                                                        (syntax-object->datum
                                                                          cls1826))
                                                                      (void))
                                                                  ((letrec ((lp21830 (lambda (ls21832
                                                                                              cls1831)
                                                                                       (if (null?
                                                                                             ls21832)
                                                                                           (lp1825
                                                                                             (car ls1827)
                                                                                             (cdr ls1827)
                                                                                             cls1831)
                                                                                           (lp21830
                                                                                             (cdr ls21832)
                                                                                             (conflicts1823
                                                                                               x1828
                                                                                               (car ls21832)
                                                                                               cls1831))))))
                                                                     lp21830)
                                                                    ls1827
                                                                    cls1826)))))
                                             lp1825)
                                            (car ls1820)
                                            (cdr ls1820)
                                            '())
                                          (void)))))
            (chi-external481 (lambda (ribcage1713 source-exp1712
                                      body1711 r1710 mr1709 ctem1708
                                      exports1707 fexports1706
                                      meta-residualize!1705)
                               (letrec ((return1714 (lambda (r1819 mr1818
                                                             bindings1817
                                                             ids1816
                                                             inits1815)
                                                      (begin
                                                        (check-defined-ids480
                                                          source-exp1712
                                                          ids1816)
                                                        (check-module-exports479
                                                          source-exp1712
                                                          fexports1706
                                                          ids1816)
                                                        (values
                                                          r1819
                                                          mr1818
                                                          bindings1817
                                                          inits1815))))
                                        (get-implicit-exports1715 (lambda (id1812)
                                                                    ((letrec ((f1813 (lambda (exports1814)
                                                                                       (if (null?
                                                                                             exports1814)
                                                                                           '()
                                                                                           (if (if (pair?
                                                                                                     (car exports1814))
                                                                                                   (bound-id=?433
                                                                                                     id1812
                                                                                                     (caar
                                                                                                       exports1814))
                                                                                                   '#f)
                                                                                               (flatten-exports445
                                                                                                 (cdar
                                                                                                   exports1814))
                                                                                               (f1813
                                                                                                 (cdr exports1814)))))))
                                                                       f1813)
                                                                      exports1707)))
                                        (update-imp-exports1716 (lambda (bindings1807
                                                                         exports1806)
                                                                  ((lambda (exports1808)
                                                                     (map (lambda (b1809)
                                                                            ((lambda (id1810)
                                                                               (if (not (bound-id-member?437
                                                                                          id1810
                                                                                          exports1808))
                                                                                   b1809
                                                                                   (create-module-binding470
                                                                                     (module-binding-type458
                                                                                       b1809)
                                                                                     id1810
                                                                                     (module-binding-label460
                                                                                       b1809)
                                                                                     (append
                                                                                       (get-implicit-exports1715
                                                                                         id1810)
                                                                                       (module-binding-imps461
                                                                                         b1809))
                                                                                     (module-binding-val462
                                                                                       b1809))))
                                                                              (module-binding-id459
                                                                                b1809)))
                                                                          bindings1807))
                                                                    (map (lambda (x1811)
                                                                           (if (pair?
                                                                                 x1811)
                                                                               (car x1811)
                                                                               x1811))
                                                                         exports1806)))))
                                 ((letrec ((parse1717 (lambda (body1724
                                                               r1723 mr1722
                                                               ids1721
                                                               bindings1720
                                                               inits1719
                                                               meta-seen?1718)
                                                        (if (null?
                                                              body1724)
                                                            (return1714
                                                              r1723 mr1722
                                                              bindings1720
                                                              ids1721
                                                              inits1719)
                                                            ((lambda (fr1725)
                                                               ((lambda (e1726)
                                                                  ((lambda (meta?1727)
                                                                     ((lambda ()
                                                                        (call-with-values
                                                                          (lambda ()
                                                                            (syntax-type441
                                                                              e1726
                                                                              r1723
                                                                              '(())
                                                                              '#f
                                                                              ribcage1713))
                                                                          (lambda (type1732
                                                                                   value1731
                                                                                   e1730
                                                                                   w1729
                                                                                   ae1728)
                                                                            ((lambda (t1733)
                                                                               (if (memv
                                                                                     t1733
                                                                                     '(define-form))
                                                                                   (call-with-values
                                                                                     (lambda ()
                                                                                       (parse-define505
                                                                                         e1730
                                                                                         w1729
                                                                                         ae1728))
                                                                                     (lambda (id1736
                                                                                              rhs1735
                                                                                              w1734)
                                                                                       ((lambda (id1737)
                                                                                          ((lambda (label1738)
                                                                                             ((lambda (sym1739)
                                                                                                ((lambda (imps1740)
                                                                                                   ((lambda ()
                                                                                                      (begin
                                                                                                        (extend-ribcage!405
                                                                                                          ribcage1713
                                                                                                          id1737
                                                                                                          label1738)
                                                                                                        (if meta?1727
                                                                                                            ((lambda (sym1741)
                                                                                                               ((lambda (b1742)
                                                                                                                  ((lambda ()
                                                                                                                     ((lambda (mr1743)
                                                                                                                        ((lambda (exp1744)
                                                                                                                           (begin
                                                                                                                             (define-top-level-value-hook135
                                                                                                                               sym1741
                                                                                                                               (top-level-eval-hook133
                                                                                                                                 exp1744))
                                                                                                                             (meta-residualize!1705
                                                                                                                               (ct-eval/residualize3489
                                                                                                                                 ctem1708
                                                                                                                                 void
                                                                                                                                 (lambda ()
                                                                                                                                   (list
                                                                                                                                     'define
                                                                                                                                     sym1741
                                                                                                                                     exp1744))))
                                                                                                                             (parse1717
                                                                                                                               (cdr body1724)
                                                                                                                               r1723
                                                                                                                               mr1743
                                                                                                                               (cons
                                                                                                                                 id1737
                                                                                                                                 ids1721)
                                                                                                                               (cons
                                                                                                                                 (create-module-binding470
                                                                                                                                   'ctdefine-form
                                                                                                                                   id1737
                                                                                                                                   label1738
                                                                                                                                   imps1740
                                                                                                                                   b1742)
                                                                                                                                 bindings1720)
                                                                                                                               inits1719
                                                                                                                               '#f)))
                                                                                                                          (chi493
                                                                                                                            rhs1735
                                                                                                                            mr1743
                                                                                                                            mr1743
                                                                                                                            w1734
                                                                                                                            '#t)))
                                                                                                                       (extend-env299
                                                                                                                         (get-indirect-label355
                                                                                                                           label1738)
                                                                                                                         b1742
                                                                                                                         mr1722)))))
                                                                                                                 (cons
                                                                                                                   'meta-variable
                                                                                                                   sym1741)))
                                                                                                              (generate-id147
                                                                                                                ((lambda (x1745)
                                                                                                                   ((lambda (e1746)
                                                                                                                      (if (annotation?132
                                                                                                                            e1746)
                                                                                                                          (annotation-expression
                                                                                                                            e1746)
                                                                                                                          e1746))
                                                                                                                     (if (syntax-object?64
                                                                                                                           x1745)
                                                                                                                         (syntax-object-expression65
                                                                                                                           x1745)
                                                                                                                         x1745)))
                                                                                                                  id1737)))
                                                                                                            (parse1717
                                                                                                              (cdr body1724)
                                                                                                              r1723
                                                                                                              mr1722
                                                                                                              (cons
                                                                                                                id1737
                                                                                                                ids1721)
                                                                                                              (cons
                                                                                                                (create-module-binding470
                                                                                                                  type1732
                                                                                                                  id1737
                                                                                                                  label1738
                                                                                                                  imps1740
                                                                                                                  (make-frob471
                                                                                                                    (wrap438
                                                                                                                      rhs1735
                                                                                                                      w1734)
                                                                                                                    meta?1727))
                                                                                                                bindings1720)
                                                                                                              inits1719
                                                                                                              '#f))))))
                                                                                                  (get-implicit-exports1715
                                                                                                    id1737)))
                                                                                               (generate-id147
                                                                                                 ((lambda (x1747)
                                                                                                    ((lambda (e1748)
                                                                                                       (if (annotation?132
                                                                                                             e1748)
                                                                                                           (annotation-expression
                                                                                                             e1748)
                                                                                                           e1748))
                                                                                                      (if (syntax-object?64
                                                                                                            x1747)
                                                                                                          (syntax-object-expression65
                                                                                                            x1747)
                                                                                                          x1747)))
                                                                                                   id1737))))
                                                                                            (gen-indirect-label354)))
                                                                                         (wrap438
                                                                                           id1736
                                                                                           w1734))))
                                                                                   (if (memv
                                                                                         t1733
                                                                                         '(define-syntax-form))
                                                                                       (call-with-values
                                                                                         (lambda ()
                                                                                           (parse-define-syntax506
                                                                                             e1730
                                                                                             w1729
                                                                                             ae1728))
                                                                                         (lambda (id1751
                                                                                                  rhs1750
                                                                                                  w1749)
                                                                                           ((lambda (id1752)
                                                                                              ((lambda (label1753)
                                                                                                 ((lambda (imps1754)
                                                                                                    ((lambda (exp1755)
                                                                                                       ((lambda ()
                                                                                                          (begin
                                                                                                            (extend-ribcage!405
                                                                                                              ribcage1713
                                                                                                              id1752
                                                                                                              label1753)
                                                                                                            ((lambda (l1757
                                                                                                                      b1756)
                                                                                                               (parse1717
                                                                                                                 (cdr body1724)
                                                                                                                 (extend-env299
                                                                                                                   l1757
                                                                                                                   b1756
                                                                                                                   r1723)
                                                                                                                 (extend-env299
                                                                                                                   l1757
                                                                                                                   b1756
                                                                                                                   mr1722)
                                                                                                                 (cons
                                                                                                                   id1752
                                                                                                                   ids1721)
                                                                                                                 (cons
                                                                                                                   (create-module-binding470
                                                                                                                     type1732
                                                                                                                     id1752
                                                                                                                     label1753
                                                                                                                     imps1754
                                                                                                                     (cons
                                                                                                                       b1756
                                                                                                                       exp1755))
                                                                                                                   bindings1720)
                                                                                                                 inits1719
                                                                                                                 '#f))
                                                                                                              (get-indirect-label355
                                                                                                                label1753)
                                                                                                              (defer-or-eval-transformer307
                                                                                                                top-level-eval-hook133
                                                                                                                exp1755))))))
                                                                                                      (chi493
                                                                                                        rhs1750
                                                                                                        mr1722
                                                                                                        mr1722
                                                                                                        w1749
                                                                                                        '#t)))
                                                                                                   (get-implicit-exports1715
                                                                                                     id1752)))
                                                                                                (gen-indirect-label354)))
                                                                                             (wrap438
                                                                                               id1751
                                                                                               w1749))))
                                                                                       (if (memv
                                                                                             t1733
                                                                                             '($module-form))
                                                                                           ((lambda (*ribcage1758)
                                                                                              ((lambda (*w1759)
                                                                                                 ((lambda ()
                                                                                                    (call-with-values
                                                                                                      (lambda ()
                                                                                                        (parse-module503
                                                                                                          e1730
                                                                                                          w1729
                                                                                                          ae1728
                                                                                                          *w1759))
                                                                                                      (lambda (orig1763
                                                                                                               id1762
                                                                                                               *exports1761
                                                                                                               forms1760)
                                                                                                        (call-with-values
                                                                                                          (lambda ()
                                                                                                            (chi-external481
                                                                                                              *ribcage1758
                                                                                                              orig1763
                                                                                                              (map (lambda (d1775)
                                                                                                                     (make-frob471
                                                                                                                       d1775
                                                                                                                       meta?1727))
                                                                                                                   forms1760)
                                                                                                              r1723
                                                                                                              mr1722
                                                                                                              ctem1708
                                                                                                              *exports1761
                                                                                                              (flatten-exports445
                                                                                                                *exports1761)
                                                                                                              meta-residualize!1705))
                                                                                                          (lambda (r1767
                                                                                                                   mr1766
                                                                                                                   *bindings1765
                                                                                                                   *inits1764)
                                                                                                            ((lambda (iface1772
                                                                                                                      bindings1771
                                                                                                                      inits1770
                                                                                                                      label1769
                                                                                                                      imps1768)
                                                                                                               (begin
                                                                                                                 (extend-ribcage!405
                                                                                                                   ribcage1713
                                                                                                                   id1762
                                                                                                                   label1769)
                                                                                                                 ((lambda (l1774
                                                                                                                           b1773)
                                                                                                                    (parse1717
                                                                                                                      (cdr body1724)
                                                                                                                      (extend-env299
                                                                                                                        l1774
                                                                                                                        b1773
                                                                                                                        r1767)
                                                                                                                      (extend-env299
                                                                                                                        l1774
                                                                                                                        b1773
                                                                                                                        mr1766)
                                                                                                                      (cons
                                                                                                                        id1762
                                                                                                                        ids1721)
                                                                                                                      (cons
                                                                                                                        (create-module-binding470
                                                                                                                          type1732
                                                                                                                          id1762
                                                                                                                          label1769
                                                                                                                          imps1768
                                                                                                                          *exports1761)
                                                                                                                        bindings1771)
                                                                                                                      inits1770
                                                                                                                      '#f))
                                                                                                                   (get-indirect-label355
                                                                                                                     label1769)
                                                                                                                   (cons
                                                                                                                     '$module
                                                                                                                     iface1772))))
                                                                                                              (make-unresolved-interface454
                                                                                                                id1762
                                                                                                                *exports1761)
                                                                                                              (append
                                                                                                                *bindings1765
                                                                                                                bindings1720)
                                                                                                              (append
                                                                                                                inits1719
                                                                                                                *inits1764)
                                                                                                              (gen-indirect-label354)
                                                                                                              (get-implicit-exports1715
                                                                                                                id1762)))))))))
                                                                                                (make-wrap319
                                                                                                  (wrap-marks320
                                                                                                    w1729)
                                                                                                  (cons
                                                                                                    *ribcage1758
                                                                                                    (wrap-subst321
                                                                                                      w1729)))))
                                                                                             (make-ribcage360
                                                                                               '()
                                                                                               '()
                                                                                               '()))
                                                                                           (if (memv
                                                                                                 t1733
                                                                                                 '($import-form))
                                                                                               (call-with-values
                                                                                                 (lambda ()
                                                                                                   (parse-import504
                                                                                                     e1730
                                                                                                     w1729
                                                                                                     ae1728))
                                                                                                 (lambda (orig1778
                                                                                                          only?1777
                                                                                                          mid1776)
                                                                                                   ((lambda (mlabel1779)
                                                                                                      ((lambda (binding1780)
                                                                                                         ((lambda (t1781)
                                                                                                            (if (memv
                                                                                                                  t1781
                                                                                                                  '($module))
                                                                                                                ((lambda (iface1782)
                                                                                                                   ((lambda (import-iface1783)
                                                                                                                      ((lambda ()
                                                                                                                         (begin
                                                                                                                           (if only?1777
                                                                                                                               (extend-ribcage-barrier!407
                                                                                                                                 ribcage1713
                                                                                                                                 mid1776)
                                                                                                                               (void))
                                                                                                                           (do-import!502
                                                                                                                             import-iface1783
                                                                                                                             ribcage1713)
                                                                                                                           (parse1717
                                                                                                                             (cdr body1724)
                                                                                                                             r1723
                                                                                                                             mr1722
                                                                                                                             (cons
                                                                                                                               import-iface1783
                                                                                                                               ids1721)
                                                                                                                             (update-imp-exports1716
                                                                                                                               bindings1720
                                                                                                                               (vector->list
                                                                                                                                 (interface-exports449
                                                                                                                                   iface1782)))
                                                                                                                             inits1719
                                                                                                                             '#f)))))
                                                                                                                     (make-import-interface374
                                                                                                                       iface1782
                                                                                                                       (import-mark-delta500
                                                                                                                         mid1776
                                                                                                                         iface1782))))
                                                                                                                  (binding-value286
                                                                                                                    binding1780))
                                                                                                                (if (memv
                                                                                                                      t1781
                                                                                                                      '(displaced-lexical))
                                                                                                                    (displaced-lexical-error303
                                                                                                                      mid1776)
                                                                                                                    (syntax-error
                                                                                                                      mid1776
                                                                                                                      '"unknown module"))))
                                                                                                           (binding-type285
                                                                                                             binding1780)))
                                                                                                        (lookup305
                                                                                                          mlabel1779
                                                                                                          r1723)))
                                                                                                     (id-var-name429
                                                                                                       mid1776
                                                                                                       '(())))))
                                                                                               (if (memv
                                                                                                     t1733
                                                                                                     '(alias-form))
                                                                                                   (call-with-values
                                                                                                     (lambda ()
                                                                                                       (parse-alias509
                                                                                                         e1730
                                                                                                         w1729
                                                                                                         ae1728))
                                                                                                     (lambda (new-id1785
                                                                                                              old-id1784)
                                                                                                       ((lambda (new-id1786)
                                                                                                          ((lambda (label1787)
                                                                                                             ((lambda (imps1788)
                                                                                                                ((lambda ()
                                                                                                                   (begin
                                                                                                                     (extend-ribcage!405
                                                                                                                       ribcage1713
                                                                                                                       new-id1786
                                                                                                                       label1787)
                                                                                                                     (parse1717
                                                                                                                       (cdr body1724)
                                                                                                                       r1723
                                                                                                                       mr1722
                                                                                                                       (cons
                                                                                                                         new-id1786
                                                                                                                         ids1721)
                                                                                                                       (cons
                                                                                                                         (create-module-binding470
                                                                                                                           type1732
                                                                                                                           new-id1786
                                                                                                                           label1787
                                                                                                                           imps1788
                                                                                                                           '#f)
                                                                                                                         bindings1720)
                                                                                                                       inits1719
                                                                                                                       '#f)))))
                                                                                                               (get-implicit-exports1715
                                                                                                                 new-id1786)))
                                                                                                            (id-var-name-loc428
                                                                                                              old-id1784
                                                                                                              w1729)))
                                                                                                         (wrap438
                                                                                                           new-id1785
                                                                                                           w1729))))
                                                                                                   (if (memv
                                                                                                         t1733
                                                                                                         '(begin-form))
                                                                                                       (parse1717
                                                                                                         ((letrec ((f1789 (lambda (forms1790)
                                                                                                                            (if (null?
                                                                                                                                  forms1790)
                                                                                                                                (cdr body1724)
                                                                                                                                (cons
                                                                                                                                  (make-frob471
                                                                                                                                    (wrap438
                                                                                                                                      (car forms1790)
                                                                                                                                      w1729)
                                                                                                                                    meta?1727)
                                                                                                                                  (f1789
                                                                                                                                    (cdr forms1790)))))))
                                                                                                            f1789)
                                                                                                           (parse-begin510
                                                                                                             e1730
                                                                                                             w1729
                                                                                                             ae1728
                                                                                                             '#t))
                                                                                                         r1723
                                                                                                         mr1722
                                                                                                         ids1721
                                                                                                         bindings1720
                                                                                                         inits1719
                                                                                                         '#f)
                                                                                                       (if (memv
                                                                                                             t1733
                                                                                                             '(eval-when-form))
                                                                                                           (call-with-values
                                                                                                             (lambda ()
                                                                                                               (parse-eval-when508
                                                                                                                 e1730
                                                                                                                 w1729
                                                                                                                 ae1728))
                                                                                                             (lambda (when-list1792
                                                                                                                      forms1791)
                                                                                                               (parse1717
                                                                                                                 (if (memq
                                                                                                                       'eval
                                                                                                                       when-list1792)
                                                                                                                     ((letrec ((f1793 (lambda (forms1794)
                                                                                                                                        (if (null?
                                                                                                                                              forms1794)
                                                                                                                                            (cdr body1724)
                                                                                                                                            (cons
                                                                                                                                              (make-frob471
                                                                                                                                                (wrap438
                                                                                                                                                  (car forms1794)
                                                                                                                                                  w1729)
                                                                                                                                                meta?1727)
                                                                                                                                              (f1793
                                                                                                                                                (cdr forms1794)))))))
                                                                                                                        f1793)
                                                                                                                       forms1791)
                                                                                                                     (cdr body1724))
                                                                                                                 r1723
                                                                                                                 mr1722
                                                                                                                 ids1721
                                                                                                                 bindings1720
                                                                                                                 inits1719
                                                                                                                 '#f)))
                                                                                                           (if (memv
                                                                                                                 t1733
                                                                                                                 '(meta-form))
                                                                                                               (parse1717
                                                                                                                 (cons
                                                                                                                   (make-frob471
                                                                                                                     (wrap438
                                                                                                                       (parse-meta507
                                                                                                                         e1730
                                                                                                                         w1729
                                                                                                                         ae1728)
                                                                                                                       w1729)
                                                                                                                     '#t)
                                                                                                                   (cdr body1724))
                                                                                                                 r1723
                                                                                                                 mr1722
                                                                                                                 ids1721
                                                                                                                 bindings1720
                                                                                                                 inits1719
                                                                                                                 '#t)
                                                                                                               (if (memv
                                                                                                                     t1733
                                                                                                                     '(local-syntax-form))
                                                                                                                   (call-with-values
                                                                                                                     (lambda ()
                                                                                                                       (chi-local-syntax512
                                                                                                                         value1731
                                                                                                                         e1730
                                                                                                                         r1723
                                                                                                                         mr1722
                                                                                                                         w1729
                                                                                                                         ae1728))
                                                                                                                     (lambda (forms1799
                                                                                                                              r1798
                                                                                                                              mr1797
                                                                                                                              w1796
                                                                                                                              ae1795)
                                                                                                                       (parse1717
                                                                                                                         ((letrec ((f1800 (lambda (forms1801)
                                                                                                                                            (if (null?
                                                                                                                                                  forms1801)
                                                                                                                                                (cdr body1724)
                                                                                                                                                (cons
                                                                                                                                                  (make-frob471
                                                                                                                                                    (wrap438
                                                                                                                                                      (car forms1801)
                                                                                                                                                      w1796)
                                                                                                                                                    meta?1727)
                                                                                                                                                  (f1800
                                                                                                                                                    (cdr forms1801)))))))
                                                                                                                            f1800)
                                                                                                                           forms1799)
                                                                                                                         r1798
                                                                                                                         mr1797
                                                                                                                         ids1721
                                                                                                                         bindings1720
                                                                                                                         inits1719
                                                                                                                         '#f)))
                                                                                                                   (begin
                                                                                                                     (if meta-seen?1718
                                                                                                                         (syntax-error
                                                                                                                           (source-wrap439
                                                                                                                             e1730
                                                                                                                             w1729
                                                                                                                             ae1728)
                                                                                                                           '"invalid meta definition")
                                                                                                                         (void))
                                                                                                                     ((letrec ((f1802 (lambda (body1803)
                                                                                                                                        (if ((lambda (t1804)
                                                                                                                                               (if t1804
                                                                                                                                                   t1804
                                                                                                                                                   (not (frob-meta?474
                                                                                                                                                          (car body1803)))))
                                                                                                                                              (null?
                                                                                                                                                body1803))
                                                                                                                                            (return1714
                                                                                                                                              r1723
                                                                                                                                              mr1722
                                                                                                                                              bindings1720
                                                                                                                                              ids1721
                                                                                                                                              (append
                                                                                                                                                inits1719
                                                                                                                                                body1803))
                                                                                                                                            (begin
                                                                                                                                              ((lambda (x1805)
                                                                                                                                                 (begin
                                                                                                                                                   (top-level-eval-hook133
                                                                                                                                                     x1805)
                                                                                                                                                   (meta-residualize!1705
                                                                                                                                                     (ct-eval/residualize3489
                                                                                                                                                       ctem1708
                                                                                                                                                       void
                                                                                                                                                       (lambda ()
                                                                                                                                                         x1805)))))
                                                                                                                                                (chi-meta-frob491
                                                                                                                                                  (car body1803)
                                                                                                                                                  mr1722))
                                                                                                                                              (f1802
                                                                                                                                                (cdr body1803)))))))
                                                                                                                        f1802)
                                                                                                                       (cons
                                                                                                                         (make-frob471
                                                                                                                           (source-wrap439
                                                                                                                             e1730
                                                                                                                             w1729
                                                                                                                             ae1728)
                                                                                                                           meta?1727)
                                                                                                                         (cdr body1724))))))))))))))
                                                                              type1732))))))
                                                                    (frob-meta?474
                                                                      fr1725)))
                                                                 (frob-e473
                                                                   fr1725)))
                                                              (car body1724))))))
                                    parse1717) body1711 r1710 mr1709 '()
                                   '() '() '#f))))
            (vmap482 (lambda (fn1701 v1700)
                       ((letrec ((do1702 (lambda (i1704 ls1703)
                                           (if (< i1704 '0)
                                               ls1703
                                               (do1702
                                                 (fx- i1704 '1)
                                                 (cons
                                                   (fn1701
                                                     (vector-ref
                                                       v1700
                                                       i1704))
                                                   ls1703))))))
                          do1702)
                         (fx- (vector-length v1700) '1)
                         '())))
            (vfor-each483 (lambda (fn1696 v1695)
                            ((lambda (len1697)
                               ((letrec ((do1698 (lambda (i1699)
                                                   (if (not (= i1699
                                                               len1697))
                                                       (begin
                                                         (fn1696
                                                           (vector-ref
                                                             v1695
                                                             i1699))
                                                         (do1698
                                                           (+ i1699 '1)))
                                                       (void)))))
                                  do1698)
                                 '0))
                              (vector-length v1695))))
            (do-top-import484 (lambda (import-only?1694 top-ribcage1693
                                       mid1692 token1691)
                                (list
                                  '$sc-put-cte
                                  (list 'quote mid1692)
                                  (list 'quote (cons 'do-import token1691))
                                  (list
                                    'quote
                                    (top-ribcage-key370
                                      top-ribcage1693)))))
            (update-mode-set485 ((lambda (table1682)
                                   (lambda (when-list1684 mode-set1683)
                                     (letrec ((remq1685 (lambda (x1690
                                                                 ls1689)
                                                          (if (null?
                                                                ls1689)
                                                              '()
                                                              (if (eq? (car ls1689)
                                                                       x1690)
                                                                  (remq1685
                                                                    x1690
                                                                    (cdr ls1689))
                                                                  (cons
                                                                    (car ls1689)
                                                                    (remq1685
                                                                      x1690
                                                                      (cdr ls1689))))))))
                                       (remq1685
                                         '-
                                         (apply
                                           append
                                           (map (lambda (m1686)
                                                  ((lambda (row1687)
                                                     (map (lambda (s1688)
                                                            (cdr (assq
                                                                   s1688
                                                                   row1687)))
                                                          when-list1684))
                                                    (cdr (assq
                                                           m1686
                                                           table1682))))
                                                mode-set1683))))))
                                  '((l (load . l) (compile . c) (visit . v)
                                       (revisit . r) (eval . -))
                                     (c (load . -) (compile . -)
                                        (visit . -) (revisit . -)
                                        (eval . c))
                                     (v (load . v) (compile . c)
                                        (visit . v) (revisit . -)
                                        (eval . -))
                                     (r (load . r) (compile . c)
                                        (visit . -) (revisit . r)
                                        (eval . -))
                                     (e (load . -) (compile . -)
                                        (visit . -) (revisit . -)
                                        (eval . e)))))
            (initial-mode-set486 (lambda (when-list1678
                                          compiling-a-file1677)
                                   (apply
                                     append
                                     (map (lambda (s1679)
                                            (if compiling-a-file1677
                                                ((lambda (t1680)
                                                   (if (memv
                                                         t1680
                                                         '(compile))
                                                       '(c)
                                                       (if (memv
                                                             t1680
                                                             '(load))
                                                           '(l)
                                                           (if (memv
                                                                 t1680
                                                                 '(visit))
                                                               '(v)
                                                               (if (memv
                                                                     t1680
                                                                     '(revisit))
                                                                   '(r)
                                                                   '())))))
                                                  s1679)
                                                ((lambda (t1681)
                                                   (if (memv t1681 '(eval))
                                                       '(e)
                                                       '()))
                                                  s1679)))
                                          when-list1678))))
            (rt-eval/residualize487 (lambda (rtem1672 thunk1671)
                                      (if (memq 'e rtem1672)
                                          (thunk1671)
                                          ((lambda (thunk1673)
                                             (if (memq 'v rtem1672)
                                                 (if ((lambda (t1674)
                                                        (if t1674
                                                            t1674
                                                            (memq
                                                              'r
                                                              rtem1672)))
                                                       (memq 'l rtem1672))
                                                     (thunk1673)
                                                     (thunk1673))
                                                 (if ((lambda (t1675)
                                                        (if t1675
                                                            t1675
                                                            (memq
                                                              'r
                                                              rtem1672)))
                                                       (memq 'l rtem1672))
                                                     (thunk1673)
                                                     (chi-void513))))
                                            (if (memq 'c rtem1672)
                                                ((lambda (x1676)
                                                   (begin
                                                     (top-level-eval-hook133
                                                       x1676)
                                                     (lambda () x1676)))
                                                  (thunk1671))
                                                thunk1671)))))
            (ct-eval/residualize2488 (lambda (ctem1668 thunk1667)
                                       ((lambda (t1669)
                                          (ct-eval/residualize3489
                                            ctem1668
                                            (lambda ()
                                              (begin
                                                (if (not t1669)
                                                    (set! t1669
                                                      (thunk1667))
                                                    (void))
                                                (top-level-eval-hook133
                                                  t1669)))
                                            (lambda ()
                                              ((lambda (t1670)
                                                 (if t1670
                                                     t1670
                                                     (thunk1667)))
                                                t1669))))
                                         '#f)))
            (ct-eval/residualize3489 (lambda (ctem1664 eval-thunk1663
                                              residualize-thunk1662)
                                       (if (memq 'e ctem1664)
                                           (begin
                                             (eval-thunk1663)
                                             (chi-void513))
                                           (begin
                                             (if (memq 'c ctem1664)
                                                 (eval-thunk1663)
                                                 (void))
                                             (if (memq 'r ctem1664)
                                                 (if ((lambda (t1665)
                                                        (if t1665
                                                            t1665
                                                            (memq
                                                              'v
                                                              ctem1664)))
                                                       (memq 'l ctem1664))
                                                     (residualize-thunk1662)
                                                     (residualize-thunk1662))
                                                 (if ((lambda (t1666)
                                                        (if t1666
                                                            t1666
                                                            (memq
                                                              'v
                                                              ctem1664)))
                                                       (memq 'l ctem1664))
                                                     (residualize-thunk1662)
                                                     (chi-void513)))))))
            (chi-frobs490 (lambda (frob*1660 r1659 mr1658 m?1657)
                            (map (lambda (x1661)
                                   (chi493 (frob-e473 x1661) r1659 mr1658
                                     '(()) m?1657))
                                 frob*1660)))
            (chi-meta-frob491 (lambda (x1656 mr1655)
                                (chi493 (frob-e473 x1656) mr1655 mr1655
                                  '(()) '#t)))
            (chi-sequence492 (lambda (body1651 r1650 mr1649 w1648 ae1647
                                      m?1646)
                               (build-sequence239
                                 ae1647
                                 ((letrec ((dobody1652 (lambda (body1653)
                                                         (if (null?
                                                               body1653)
                                                             '()
                                                             ((lambda (first1654)
                                                                (cons
                                                                  first1654
                                                                  (dobody1652
                                                                    (cdr body1653))))
                                                               (chi493
                                                                 (car body1653)
                                                                 r1650
                                                                 mr1649
                                                                 w1648
                                                                 m?1646))))))
                                    dobody1652)
                                   body1651))))
            (chi493 (lambda (e1640 r1639 mr1638 w1637 m?1636)
                      (call-with-values
                        (lambda ()
                          (syntax-type441 e1640 r1639 w1637 '#f '#f))
                        (lambda (type1645 value1644 e1643 w1642 ae1641)
                          (chi-expr494 type1645 value1644 e1643 r1639
                            mr1638 w1642 ae1641 m?1636)))))
            (chi-expr494 (lambda (type1620 value1619 e1618 r1617 mr1616
                                  w1615 ae1614 m?1613)
                           ((lambda (t1621)
                              (if (memv t1621 '(lexical))
                                  value1619
                                  (if (memv t1621 '(core))
                                      (value1619 e1618 r1617 mr1616 w1615
                                        ae1614 m?1613)
                                      (if (memv t1621 '(lexical-call))
                                          (chi-application495 value1619
                                            e1618 r1617 mr1616 w1615 ae1614
                                            m?1613)
                                          (if (memv t1621 '(constant))
                                              (list
                                                'quote
                                                (strip517
                                                  (source-wrap439
                                                    e1618
                                                    w1615
                                                    ae1614)
                                                  '(())))
                                              (if (memv t1621 '(global))
                                                  value1619
                                                  (if (memv
                                                        t1621
                                                        '(meta-variable))
                                                      (if m?1613
                                                          value1619
                                                          (displaced-lexical-error303
                                                            (source-wrap439
                                                              e1618
                                                              w1615
                                                              ae1614)))
                                                      (if (memv
                                                            t1621
                                                            '(call))
                                                          (chi-application495
                                                            (chi493
                                                              (car e1618)
                                                              r1617 mr1616
                                                              w1615 m?1613)
                                                            e1618 r1617
                                                            mr1616 w1615
                                                            ae1614 m?1613)
                                                          (if (memv
                                                                t1621
                                                                '(begin-form))
                                                              (chi-sequence492
                                                                (parse-begin510
                                                                  e1618
                                                                  w1615
                                                                  ae1614
                                                                  '#f)
                                                                r1617
                                                                mr1616
                                                                w1615
                                                                ae1614
                                                                m?1613)
                                                              (if (memv
                                                                    t1621
                                                                    '(local-syntax-form))
                                                                  (call-with-values
                                                                    (lambda ()
                                                                      (chi-local-syntax512
                                                                        value1619
                                                                        e1618
                                                                        r1617
                                                                        mr1616
                                                                        w1615
                                                                        ae1614))
                                                                    (lambda (forms1626
                                                                             r1625
                                                                             mr1624
                                                                             w1623
                                                                             ae1622)
                                                                      (chi-sequence492
                                                                        forms1626
                                                                        r1625
                                                                        mr1624
                                                                        w1623
                                                                        ae1622
                                                                        m?1613)))
                                                                  (if (memv
                                                                        t1621
                                                                        '(eval-when-form))
                                                                      (call-with-values
                                                                        (lambda ()
                                                                          (parse-eval-when508
                                                                            e1618
                                                                            w1615
                                                                            ae1614))
                                                                        (lambda (when-list1628
                                                                                 forms1627)
                                                                          (if (memq
                                                                                'eval
                                                                                when-list1628)
                                                                              (chi-sequence492
                                                                                forms1627
                                                                                r1617
                                                                                mr1616
                                                                                w1615
                                                                                ae1614
                                                                                m?1613)
                                                                              (chi-void513))))
                                                                      (if (memv
                                                                            t1621
                                                                            '(meta-form))
                                                                          (syntax-error
                                                                            (source-wrap439
                                                                              e1618
                                                                              w1615
                                                                              ae1614)
                                                                            '"invalid context for meta definition")
                                                                          (if (memv
                                                                                t1621
                                                                                '(define-form))
                                                                              (begin
                                                                                (parse-define505
                                                                                  e1618
                                                                                  w1615
                                                                                  ae1614)
                                                                                (syntax-error
                                                                                  (source-wrap439
                                                                                    e1618
                                                                                    w1615
                                                                                    ae1614)
                                                                                  '"invalid context for definition"))
                                                                              (if (memv
                                                                                    t1621
                                                                                    '(define-syntax-form))
                                                                                  (begin
                                                                                    (parse-define-syntax506
                                                                                      e1618
                                                                                      w1615
                                                                                      ae1614)
                                                                                    (syntax-error
                                                                                      (source-wrap439
                                                                                        e1618
                                                                                        w1615
                                                                                        ae1614)
                                                                                      '"invalid context for definition"))
                                                                                  (if (memv
                                                                                        t1621
                                                                                        '($module-form))
                                                                                      (call-with-values
                                                                                        (lambda ()
                                                                                          (parse-module503
                                                                                            e1618
                                                                                            w1615
                                                                                            ae1614
                                                                                            w1615))
                                                                                        (lambda (orig1632
                                                                                                 id1631
                                                                                                 exports1630
                                                                                                 forms1629)
                                                                                          (syntax-error
                                                                                            orig1632
                                                                                            '"invalid context for definition")))
                                                                                      (if (memv
                                                                                            t1621
                                                                                            '($import-form))
                                                                                          (call-with-values
                                                                                            (lambda ()
                                                                                              (parse-import504
                                                                                                e1618
                                                                                                w1615
                                                                                                ae1614))
                                                                                            (lambda (orig1635
                                                                                                     only?1634
                                                                                                     mid1633)
                                                                                              (syntax-error
                                                                                                orig1635
                                                                                                '"invalid context for definition")))
                                                                                          (if (memv
                                                                                                t1621
                                                                                                '(alias-form))
                                                                                              (begin
                                                                                                (parse-alias509
                                                                                                  e1618
                                                                                                  w1615
                                                                                                  ae1614)
                                                                                                (syntax-error
                                                                                                  (source-wrap439
                                                                                                    e1618
                                                                                                    w1615
                                                                                                    ae1614)
                                                                                                  '"invalid context for definition"))
                                                                                              (if (memv
                                                                                                    t1621
                                                                                                    '(syntax))
                                                                                                  (syntax-error
                                                                                                    (source-wrap439
                                                                                                      e1618
                                                                                                      w1615
                                                                                                      ae1614)
                                                                                                    '"reference to pattern variable outside syntax form")
                                                                                                  (if (memv
                                                                                                        t1621
                                                                                                        '(displaced-lexical))
                                                                                                      (displaced-lexical-error303
                                                                                                        (source-wrap439
                                                                                                          e1618
                                                                                                          w1615
                                                                                                          ae1614))
                                                                                                      (syntax-error
                                                                                                        (source-wrap439
                                                                                                          e1618
                                                                                                          w1615
                                                                                                          ae1614)))))))))))))))))))))
                             type1620)))
            (chi-application495 (lambda (x1605 e1604 r1603 mr1602 w1601
                                         ae1600 m?1599)
                                  ((lambda (tmp1606)
                                     ((lambda (tmp1607)
                                        (if tmp1607
                                            (apply
                                              (lambda (e01609 e11608)
                                                (cons
                                                  x1605
                                                  (map (lambda (e1611)
                                                         (chi493 e1611
                                                           r1603 mr1602
                                                           w1601 m?1599))
                                                       e11608)))
                                              tmp1607)
                                            ((lambda (_1612)
                                               (syntax-error
                                                 (source-wrap439
                                                   e1604
                                                   w1601
                                                   ae1600)))
                                              tmp1606)))
                                       ($syntax-dispatch
                                         tmp1606
                                         '(any . each-any))))
                                    e1604)))
            (chi-set!496 (lambda (e1573 r1572 w1571 ae1570 rib1569)
                           ((lambda (tmp1574)
                              ((lambda (tmp1575)
                                 (if (if tmp1575
                                         (apply
                                           (lambda (_1578 id1577 val1576)
                                             (id?310 id1577))
                                           tmp1575)
                                         '#f)
                                     (apply
                                       (lambda (_1581 id1580 val1579)
                                         ((lambda (n1582)
                                            ((lambda (b1583)
                                               ((lambda (t1584)
                                                  (if (memv
                                                        t1584
                                                        '(macro!))
                                                      ((lambda (id1586
                                                                val1585)
                                                         (syntax-type441
                                                           (chi-macro497
                                                             (binding-value286
                                                               b1583)
                                                             (list
                                                               '#(syntax-object set! ((top) #(ribcage () () ()) #(ribcage #(id val) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage #(b) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(n) #((top)) #("i")) #(ribcage #(_ id val) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e r w ae rib) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                               id1586
                                                               val1585)
                                                             r1572 '(())
                                                             '#f rib1569)
                                                           r1572 '(()) '#f
                                                           rib1569))
                                                        (wrap438
                                                          id1580
                                                          w1571)
                                                        (wrap438
                                                          val1579
                                                          w1571))
                                                      (values 'core
                                                        (lambda (e1592
                                                                 r1591
                                                                 mr1590
                                                                 w1589
                                                                 ae1588
                                                                 m?1587)
                                                          ((lambda (val1594
                                                                    n1593)
                                                             ((lambda (b1595)
                                                                ((lambda (t1596)
                                                                   (if (memv
                                                                         t1596
                                                                         '(lexical))
                                                                       (list
                                                                         'set!
                                                                         (binding-value286
                                                                           b1595)
                                                                         val1594)
                                                                       (if (memv
                                                                             t1596
                                                                             '(global))
                                                                           ((lambda (sym1597)
                                                                              (begin
                                                                                (if (read-only-binding?144
                                                                                      n1593)
                                                                                    (syntax-error
                                                                                      (source-wrap439
                                                                                        e1592
                                                                                        w1589
                                                                                        ae1588)
                                                                                      '"invalid assignment to read-only variable")
                                                                                    (void))
                                                                                (list
                                                                                  'set!
                                                                                  sym1597
                                                                                  val1594)))
                                                                             (binding-value286
                                                                               b1595))
                                                                           (if (memv
                                                                                 t1596
                                                                                 '(meta-variable))
                                                                               (if m?1587
                                                                                   (list
                                                                                     'set!
                                                                                     (binding-value286
                                                                                       b1595)
                                                                                     val1594)
                                                                                   (displaced-lexical-error303
                                                                                     (wrap438
                                                                                       id1580
                                                                                       w1589)))
                                                                               (if (memv
                                                                                     t1596
                                                                                     '(displaced-lexical))
                                                                                   (displaced-lexical-error303
                                                                                     (wrap438
                                                                                       id1580
                                                                                       w1589))
                                                                                   (syntax-error
                                                                                     (source-wrap439
                                                                                       e1592
                                                                                       w1589
                                                                                       ae1588)))))))
                                                                  (binding-type285
                                                                    b1595)))
                                                               (lookup305
                                                                 n1593
                                                                 r1591)))
                                                            (chi493 val1579
                                                              r1591 mr1590
                                                              w1589 m?1587)
                                                            (id-var-name429
                                                              id1580
                                                              w1589)))
                                                        e1573 w1571
                                                        ae1570)))
                                                 (binding-type285 b1583)))
                                              (lookup305 n1582 r1572)))
                                           (id-var-name429 id1580 w1571)))
                                       tmp1575)
                                     ((lambda (_1598)
                                        (syntax-error
                                          (source-wrap439
                                            e1573
                                            w1571
                                            ae1570)))
                                       tmp1574)))
                                ($syntax-dispatch tmp1574 '(any any any))))
                             e1573)))
            (chi-macro497 (lambda (p1556 e1555 r1554 w1553 ae1552
                                   rib1551)
                            (letrec ((rebuild-macro-output1557 (lambda (x1561
                                                                        m1560)
                                                                 (if (pair?
                                                                       x1561)
                                                                     (cons
                                                                       (rebuild-macro-output1557
                                                                         (car x1561)
                                                                         m1560)
                                                                       (rebuild-macro-output1557
                                                                         (cdr x1561)
                                                                         m1560))
                                                                     (if (syntax-object?64
                                                                           x1561)
                                                                         ((lambda (w1562)
                                                                            ((lambda (ms1564
                                                                                      s1563)
                                                                               (make-syntax-object63
                                                                                 (syntax-object-expression65
                                                                                   x1561)
                                                                                 (if (if (pair?
                                                                                           ms1564)
                                                                                         (eq? (car ms1564)
                                                                                              '#f)
                                                                                         '#f)
                                                                                     (make-wrap319
                                                                                       (cdr ms1564)
                                                                                       (cdr s1563))
                                                                                     (make-wrap319
                                                                                       (cons
                                                                                         m1560
                                                                                         ms1564)
                                                                                       (if rib1551
                                                                                           (cons
                                                                                             rib1551
                                                                                             (cons
                                                                                               'shift
                                                                                               s1563))
                                                                                           (cons
                                                                                             'shift
                                                                                             s1563))))))
                                                                              (wrap-marks320
                                                                                w1562)
                                                                              (wrap-subst321
                                                                                w1562)))
                                                                           (syntax-object-wrap66
                                                                             x1561))
                                                                         (if (vector?
                                                                               x1561)
                                                                             ((lambda (n1565)
                                                                                ((lambda (v1566)
                                                                                   ((lambda ()
                                                                                      ((letrec ((do1567 (lambda (i1568)
                                                                                                          (if (= i1568
                                                                                                                 n1565)
                                                                                                              v1566
                                                                                                              (begin
                                                                                                                (vector-set!
                                                                                                                  v1566
                                                                                                                  i1568
                                                                                                                  (rebuild-macro-output1557
                                                                                                                    (vector-ref
                                                                                                                      x1561
                                                                                                                      i1568)
                                                                                                                    m1560))
                                                                                                                (do1567
                                                                                                                  (+ i1568
                                                                                                                     '1)))))))
                                                                                         do1567)
                                                                                        '0))))
                                                                                  (make-vector
                                                                                    n1565)))
                                                                               (vector-length
                                                                                 x1561))
                                                                             (if (symbol?
                                                                                   x1561)
                                                                                 (syntax-error
                                                                                   (source-wrap439
                                                                                     e1555
                                                                                     w1553
                                                                                     ae1552)
                                                                                   '"encountered raw symbol "
                                                                                   (symbol->string
                                                                                     x1561)
                                                                                   '" in output of macro")
                                                                                 x1561)))))))
                              (rebuild-macro-output1557
                                ((lambda (out1558)
                                   (if (procedure? out1558)
                                       (out1558
                                         (lambda (id1559)
                                           (begin
                                             (if (not (identifier? id1559))
                                                 (syntax-error
                                                   id1559
                                                   '"environment argument is not an identifier")
                                                 (void))
                                             (lookup305
                                               (id-var-name429
                                                 id1559
                                                 '(()))
                                               r1554))))
                                       out1558))
                                  (p1556
                                    (source-wrap439
                                      e1555
                                      (anti-mark395 w1553)
                                      ae1552)))
                                (string '#\m)))))
            (chi-body498 (lambda (body1539 outer-form1538 r1537 mr1536
                                  w1535 m?1534)
                           ((lambda (ribcage1540)
                              ((lambda (w1541)
                                 ((lambda (body1542)
                                    ((lambda ()
                                       (call-with-values
                                         (lambda ()
                                           (chi-internal499 ribcage1540
                                             outer-form1538 body1542 r1537
                                             mr1536 m?1534))
                                         (lambda (r1549 mr1548 exprs1547
                                                  ids1546 vars1545 vals1544
                                                  inits1543)
                                           (begin
                                             (if (null? exprs1547)
                                                 (syntax-error
                                                   outer-form1538
                                                   '"no expressions in body")
                                                 (void))
                                             (build-body241
                                               '#f
                                               (reverse vars1545)
                                               (chi-frobs490
                                                 (reverse vals1544)
                                                 r1549
                                                 mr1548
                                                 m?1534)
                                               (build-sequence239
                                                 '#f
                                                 (chi-frobs490
                                                   (append
                                                     inits1543
                                                     exprs1547)
                                                   r1549
                                                   mr1548
                                                   m?1534)))))))))
                                   (map (lambda (x1550)
                                          (make-frob471
                                            (wrap438 x1550 w1541)
                                            '#f))
                                        body1539)))
                                (make-wrap319
                                  (wrap-marks320 w1535)
                                  (cons
                                    ribcage1540
                                    (wrap-subst321 w1535)))))
                             (make-ribcage360 '() '() '()))))
            (chi-internal499 (lambda (ribcage1443 source-exp1442
                                      body1441 r1440 mr1439 m?1438)
                               (letrec ((return1444 (lambda (r1533 mr1532
                                                             exprs1531
                                                             ids1530
                                                             vars1529
                                                             vals1528
                                                             inits1527)
                                                      (begin
                                                        (check-defined-ids480
                                                          source-exp1442
                                                          ids1530)
                                                        (values r1533
                                                          mr1532 exprs1531
                                                          ids1530 vars1529
                                                          vals1528
                                                          inits1527)))))
                                 ((letrec ((parse1445 (lambda (body1453
                                                               r1452 mr1451
                                                               ids1450
                                                               vars1449
                                                               vals1448
                                                               inits1447
                                                               meta-seen?1446)
                                                        (if (null?
                                                              body1453)
                                                            (return1444
                                                              r1452 mr1451
                                                              body1453
                                                              ids1450
                                                              vars1449
                                                              vals1448
                                                              inits1447)
                                                            ((lambda (fr1454)
                                                               ((lambda (e1455)
                                                                  ((lambda (meta?1456)
                                                                     ((lambda ()
                                                                        (call-with-values
                                                                          (lambda ()
                                                                            (syntax-type441
                                                                              e1455
                                                                              r1452
                                                                              '(())
                                                                              '#f
                                                                              ribcage1443))
                                                                          (lambda (type1461
                                                                                   value1460
                                                                                   e1459
                                                                                   w1458
                                                                                   ae1457)
                                                                            ((lambda (t1462)
                                                                               (if (memv
                                                                                     t1462
                                                                                     '(define-form))
                                                                                   (call-with-values
                                                                                     (lambda ()
                                                                                       (parse-define505
                                                                                         e1459
                                                                                         w1458
                                                                                         ae1457))
                                                                                     (lambda (id1465
                                                                                              rhs1464
                                                                                              w1463)
                                                                                       ((lambda (id1467
                                                                                                 label1466)
                                                                                          (if meta?1456
                                                                                              ((lambda (sym1468)
                                                                                                 (begin
                                                                                                   (extend-ribcage!405
                                                                                                     ribcage1443
                                                                                                     id1467
                                                                                                     label1466)
                                                                                                   ((lambda (mr1469)
                                                                                                      (begin
                                                                                                        (define-top-level-value-hook135
                                                                                                          sym1468
                                                                                                          (top-level-eval-hook133
                                                                                                            (chi493
                                                                                                              rhs1464
                                                                                                              mr1469
                                                                                                              mr1469
                                                                                                              w1463
                                                                                                              '#t)))
                                                                                                        (parse1445
                                                                                                          (cdr body1453)
                                                                                                          r1452
                                                                                                          mr1469
                                                                                                          (cons
                                                                                                            id1467
                                                                                                            ids1450)
                                                                                                          vars1449
                                                                                                          vals1448
                                                                                                          inits1447
                                                                                                          '#f)))
                                                                                                     (extend-env299
                                                                                                       label1466
                                                                                                       (cons
                                                                                                         'meta-variable
                                                                                                         sym1468)
                                                                                                       mr1451))))
                                                                                                (generate-id147
                                                                                                  ((lambda (x1470)
                                                                                                     ((lambda (e1471)
                                                                                                        (if (annotation?132
                                                                                                              e1471)
                                                                                                            (annotation-expression
                                                                                                              e1471)
                                                                                                            e1471))
                                                                                                       (if (syntax-object?64
                                                                                                             x1470)
                                                                                                           (syntax-object-expression65
                                                                                                             x1470)
                                                                                                           x1470)))
                                                                                                    id1467)))
                                                                                              ((lambda (var1472)
                                                                                                 (begin
                                                                                                   (extend-ribcage!405
                                                                                                     ribcage1443
                                                                                                     id1467
                                                                                                     label1466)
                                                                                                   (parse1445
                                                                                                     (cdr body1453)
                                                                                                     (extend-env299
                                                                                                       label1466
                                                                                                       (cons
                                                                                                         'lexical
                                                                                                         var1472)
                                                                                                       r1452)
                                                                                                     mr1451
                                                                                                     (cons
                                                                                                       id1467
                                                                                                       ids1450)
                                                                                                     (cons
                                                                                                       var1472
                                                                                                       vars1449)
                                                                                                     (cons
                                                                                                       (make-frob471
                                                                                                         (wrap438
                                                                                                           rhs1464
                                                                                                           w1463)
                                                                                                         meta?1456)
                                                                                                       vals1448)
                                                                                                     inits1447
                                                                                                     '#f)))
                                                                                                (gen-var518
                                                                                                  id1467))))
                                                                                         (wrap438
                                                                                           id1465
                                                                                           w1463)
                                                                                         (gen-label357))))
                                                                                   (if (memv
                                                                                         t1462
                                                                                         '(define-syntax-form))
                                                                                       (call-with-values
                                                                                         (lambda ()
                                                                                           (parse-define-syntax506
                                                                                             e1459
                                                                                             w1458
                                                                                             ae1457))
                                                                                         (lambda (id1475
                                                                                                  rhs1474
                                                                                                  w1473)
                                                                                           ((lambda (id1478
                                                                                                     label1477
                                                                                                     exp1476)
                                                                                              (begin
                                                                                                (extend-ribcage!405
                                                                                                  ribcage1443
                                                                                                  id1478
                                                                                                  label1477)
                                                                                                ((lambda (b1479)
                                                                                                   (parse1445
                                                                                                     (cdr body1453)
                                                                                                     (extend-env299
                                                                                                       label1477
                                                                                                       b1479
                                                                                                       r1452)
                                                                                                     (extend-env299
                                                                                                       label1477
                                                                                                       b1479
                                                                                                       mr1451)
                                                                                                     (cons
                                                                                                       id1478
                                                                                                       ids1450)
                                                                                                     vars1449
                                                                                                     vals1448
                                                                                                     inits1447
                                                                                                     '#f))
                                                                                                  (defer-or-eval-transformer307
                                                                                                    local-eval-hook134
                                                                                                    exp1476))))
                                                                                             (wrap438
                                                                                               id1475
                                                                                               w1473)
                                                                                             (gen-label357)
                                                                                             (chi493
                                                                                               rhs1474
                                                                                               mr1451
                                                                                               mr1451
                                                                                               w1473
                                                                                               '#t))))
                                                                                       (if (memv
                                                                                             t1462
                                                                                             '($module-form))
                                                                                           ((lambda (*ribcage1480)
                                                                                              ((lambda (*w1481)
                                                                                                 ((lambda ()
                                                                                                    (call-with-values
                                                                                                      (lambda ()
                                                                                                        (parse-module503
                                                                                                          e1459
                                                                                                          w1458
                                                                                                          ae1457
                                                                                                          *w1481))
                                                                                                      (lambda (orig1485
                                                                                                               id1484
                                                                                                               exports1483
                                                                                                               forms1482)
                                                                                                        (call-with-values
                                                                                                          (lambda ()
                                                                                                            (chi-internal499
                                                                                                              *ribcage1480
                                                                                                              orig1485
                                                                                                              (map (lambda (d1499)
                                                                                                                     (make-frob471
                                                                                                                       d1499
                                                                                                                       meta?1456))
                                                                                                                   forms1482)
                                                                                                              r1452
                                                                                                              mr1451
                                                                                                              m?1438))
                                                                                                          (lambda (r1492
                                                                                                                   mr1491
                                                                                                                   *body1490
                                                                                                                   *ids1489
                                                                                                                   *vars1488
                                                                                                                   *vals1487
                                                                                                                   *inits1486)
                                                                                                            (begin
                                                                                                              (check-module-exports479
                                                                                                                source-exp1442
                                                                                                                (flatten-exports445
                                                                                                                  exports1483)
                                                                                                                *ids1489)
                                                                                                              ((lambda (iface1497
                                                                                                                        vars1496
                                                                                                                        vals1495
                                                                                                                        inits1494
                                                                                                                        label1493)
                                                                                                                 (begin
                                                                                                                   (extend-ribcage!405
                                                                                                                     ribcage1443
                                                                                                                     id1484
                                                                                                                     label1493)
                                                                                                                   ((lambda (b1498)
                                                                                                                      (parse1445
                                                                                                                        (cdr body1453)
                                                                                                                        (extend-env299
                                                                                                                          label1493
                                                                                                                          b1498
                                                                                                                          r1492)
                                                                                                                        (extend-env299
                                                                                                                          label1493
                                                                                                                          b1498
                                                                                                                          mr1491)
                                                                                                                        (cons
                                                                                                                          id1484
                                                                                                                          ids1450)
                                                                                                                        vars1496
                                                                                                                        vals1495
                                                                                                                        inits1494
                                                                                                                        '#f))
                                                                                                                     (cons
                                                                                                                       '$module
                                                                                                                       iface1497))))
                                                                                                                (make-resolved-interface455
                                                                                                                  id1484
                                                                                                                  exports1483
                                                                                                                  '#f)
                                                                                                                (append
                                                                                                                  *vars1488
                                                                                                                  vars1449)
                                                                                                                (append
                                                                                                                  *vals1487
                                                                                                                  vals1448)
                                                                                                                (append
                                                                                                                  inits1447
                                                                                                                  *inits1486
                                                                                                                  *body1490)
                                                                                                                (gen-label357))))))))))
                                                                                                (make-wrap319
                                                                                                  (wrap-marks320
                                                                                                    w1458)
                                                                                                  (cons
                                                                                                    *ribcage1480
                                                                                                    (wrap-subst321
                                                                                                      w1458)))))
                                                                                             (make-ribcage360
                                                                                               '()
                                                                                               '()
                                                                                               '()))
                                                                                           (if (memv
                                                                                                 t1462
                                                                                                 '($import-form))
                                                                                               (call-with-values
                                                                                                 (lambda ()
                                                                                                   (parse-import504
                                                                                                     e1459
                                                                                                     w1458
                                                                                                     ae1457))
                                                                                                 (lambda (orig1502
                                                                                                          only?1501
                                                                                                          mid1500)
                                                                                                   ((lambda (mlabel1503)
                                                                                                      ((lambda (binding1504)
                                                                                                         ((lambda (t1505)
                                                                                                            (if (memv
                                                                                                                  t1505
                                                                                                                  '($module))
                                                                                                                ((lambda (iface1506)
                                                                                                                   ((lambda (import-iface1507)
                                                                                                                      ((lambda ()
                                                                                                                         (begin
                                                                                                                           (if only?1501
                                                                                                                               (extend-ribcage-barrier!407
                                                                                                                                 ribcage1443
                                                                                                                                 mid1500)
                                                                                                                               (void))
                                                                                                                           (do-import!502
                                                                                                                             import-iface1507
                                                                                                                             ribcage1443)
                                                                                                                           (parse1445
                                                                                                                             (cdr body1453)
                                                                                                                             r1452
                                                                                                                             mr1451
                                                                                                                             (cons
                                                                                                                               import-iface1507
                                                                                                                               ids1450)
                                                                                                                             vars1449
                                                                                                                             vals1448
                                                                                                                             inits1447
                                                                                                                             '#f)))))
                                                                                                                     (make-import-interface374
                                                                                                                       iface1506
                                                                                                                       (import-mark-delta500
                                                                                                                         mid1500
                                                                                                                         iface1506))))
                                                                                                                  (binding-value286
                                                                                                                    binding1504))
                                                                                                                (if (memv
                                                                                                                      t1505
                                                                                                                      '(displaced-lexical))
                                                                                                                    (displaced-lexical-error303
                                                                                                                      mid1500)
                                                                                                                    (syntax-error
                                                                                                                      mid1500
                                                                                                                      '"unknown module"))))
                                                                                                           (binding-type285
                                                                                                             binding1504)))
                                                                                                        (lookup305
                                                                                                          mlabel1503
                                                                                                          r1452)))
                                                                                                     (id-var-name429
                                                                                                       mid1500
                                                                                                       '(())))))
                                                                                               (if (memv
                                                                                                     t1462
                                                                                                     '(alias-form))
                                                                                                   (call-with-values
                                                                                                     (lambda ()
                                                                                                       (parse-alias509
                                                                                                         e1459
                                                                                                         w1458
                                                                                                         ae1457))
                                                                                                     (lambda (new-id1509
                                                                                                              old-id1508)
                                                                                                       ((lambda (new-id1510)
                                                                                                          (begin
                                                                                                            (extend-ribcage!405
                                                                                                              ribcage1443
                                                                                                              new-id1510
                                                                                                              (id-var-name-loc428
                                                                                                                old-id1508
                                                                                                                w1458))
                                                                                                            (parse1445
                                                                                                              (cdr body1453)
                                                                                                              r1452
                                                                                                              mr1451
                                                                                                              (cons
                                                                                                                new-id1510
                                                                                                                ids1450)
                                                                                                              vars1449
                                                                                                              vals1448
                                                                                                              inits1447
                                                                                                              '#f)))
                                                                                                         (wrap438
                                                                                                           new-id1509
                                                                                                           w1458))))
                                                                                                   (if (memv
                                                                                                         t1462
                                                                                                         '(begin-form))
                                                                                                       (parse1445
                                                                                                         ((letrec ((f1511 (lambda (forms1512)
                                                                                                                            (if (null?
                                                                                                                                  forms1512)
                                                                                                                                (cdr body1453)
                                                                                                                                (cons
                                                                                                                                  (make-frob471
                                                                                                                                    (wrap438
                                                                                                                                      (car forms1512)
                                                                                                                                      w1458)
                                                                                                                                    meta?1456)
                                                                                                                                  (f1511
                                                                                                                                    (cdr forms1512)))))))
                                                                                                            f1511)
                                                                                                           (parse-begin510
                                                                                                             e1459
                                                                                                             w1458
                                                                                                             ae1457
                                                                                                             '#t))
                                                                                                         r1452
                                                                                                         mr1451
                                                                                                         ids1450
                                                                                                         vars1449
                                                                                                         vals1448
                                                                                                         inits1447
                                                                                                         '#f)
                                                                                                       (if (memv
                                                                                                             t1462
                                                                                                             '(eval-when-form))
                                                                                                           (call-with-values
                                                                                                             (lambda ()
                                                                                                               (parse-eval-when508
                                                                                                                 e1459
                                                                                                                 w1458
                                                                                                                 ae1457))
                                                                                                             (lambda (when-list1514
                                                                                                                      forms1513)
                                                                                                               (parse1445
                                                                                                                 (if (memq
                                                                                                                       'eval
                                                                                                                       when-list1514)
                                                                                                                     ((letrec ((f1515 (lambda (forms1516)
                                                                                                                                        (if (null?
                                                                                                                                              forms1516)
                                                                                                                                            (cdr body1453)
                                                                                                                                            (cons
                                                                                                                                              (make-frob471
                                                                                                                                                (wrap438
                                                                                                                                                  (car forms1516)
                                                                                                                                                  w1458)
                                                                                                                                                meta?1456)
                                                                                                                                              (f1515
                                                                                                                                                (cdr forms1516)))))))
                                                                                                                        f1515)
                                                                                                                       forms1513)
                                                                                                                     (cdr body1453))
                                                                                                                 r1452
                                                                                                                 mr1451
                                                                                                                 ids1450
                                                                                                                 vars1449
                                                                                                                 vals1448
                                                                                                                 inits1447
                                                                                                                 '#f)))
                                                                                                           (if (memv
                                                                                                                 t1462
                                                                                                                 '(meta-form))
                                                                                                               (parse1445
                                                                                                                 (cons
                                                                                                                   (make-frob471
                                                                                                                     (wrap438
                                                                                                                       (parse-meta507
                                                                                                                         e1459
                                                                                                                         w1458
                                                                                                                         ae1457)
                                                                                                                       w1458)
                                                                                                                     '#t)
                                                                                                                   (cdr body1453))
                                                                                                                 r1452
                                                                                                                 mr1451
                                                                                                                 ids1450
                                                                                                                 vars1449
                                                                                                                 vals1448
                                                                                                                 inits1447
                                                                                                                 '#t)
                                                                                                               (if (memv
                                                                                                                     t1462
                                                                                                                     '(local-syntax-form))
                                                                                                                   (call-with-values
                                                                                                                     (lambda ()
                                                                                                                       (chi-local-syntax512
                                                                                                                         value1460
                                                                                                                         e1459
                                                                                                                         r1452
                                                                                                                         mr1451
                                                                                                                         w1458
                                                                                                                         ae1457))
                                                                                                                     (lambda (forms1521
                                                                                                                              r1520
                                                                                                                              mr1519
                                                                                                                              w1518
                                                                                                                              ae1517)
                                                                                                                       (parse1445
                                                                                                                         ((letrec ((f1522 (lambda (forms1523)
                                                                                                                                            (if (null?
                                                                                                                                                  forms1523)
                                                                                                                                                (cdr body1453)
                                                                                                                                                (cons
                                                                                                                                                  (make-frob471
                                                                                                                                                    (wrap438
                                                                                                                                                      (car forms1523)
                                                                                                                                                      w1518)
                                                                                                                                                    meta?1456)
                                                                                                                                                  (f1522
                                                                                                                                                    (cdr forms1523)))))))
                                                                                                                            f1522)
                                                                                                                           forms1521)
                                                                                                                         r1520
                                                                                                                         mr1519
                                                                                                                         ids1450
                                                                                                                         vars1449
                                                                                                                         vals1448
                                                                                                                         inits1447
                                                                                                                         '#f)))
                                                                                                                   (begin
                                                                                                                     (if meta-seen?1446
                                                                                                                         (syntax-error
                                                                                                                           (source-wrap439
                                                                                                                             e1459
                                                                                                                             w1458
                                                                                                                             ae1457)
                                                                                                                           '"invalid meta definition")
                                                                                                                         (void))
                                                                                                                     ((letrec ((f1524 (lambda (body1525)
                                                                                                                                        (if ((lambda (t1526)
                                                                                                                                               (if t1526
                                                                                                                                                   t1526
                                                                                                                                                   (not (frob-meta?474
                                                                                                                                                          (car body1525)))))
                                                                                                                                              (null?
                                                                                                                                                body1525))
                                                                                                                                            (return1444
                                                                                                                                              r1452
                                                                                                                                              mr1451
                                                                                                                                              body1525
                                                                                                                                              ids1450
                                                                                                                                              vars1449
                                                                                                                                              vals1448
                                                                                                                                              inits1447)
                                                                                                                                            (begin
                                                                                                                                              (top-level-eval-hook133
                                                                                                                                                (chi-meta-frob491
                                                                                                                                                  (car body1525)
                                                                                                                                                  mr1451))
                                                                                                                                              (f1524
                                                                                                                                                (cdr body1525)))))))
                                                                                                                        f1524)
                                                                                                                       (cons
                                                                                                                         (make-frob471
                                                                                                                           (source-wrap439
                                                                                                                             e1459
                                                                                                                             w1458
                                                                                                                             ae1457)
                                                                                                                           meta?1456)
                                                                                                                         (cdr body1453))))))))))))))
                                                                              type1461))))))
                                                                    (frob-meta?474
                                                                      fr1454)))
                                                                 (frob-e473
                                                                   fr1454)))
                                                              (car body1453))))))
                                    parse1445) body1441 r1440 mr1439 '()
                                   '() '() '() '#f))))
            (import-mark-delta500 (lambda (mid1437 iface1436)
                                    (diff-marks421
                                      (id-marks316 mid1437)
                                      (interface-marks448 iface1436))))
            (lookup-import-label501 (lambda (id1434)
                                      ((lambda (label1435)
                                         (begin
                                           (if (not label1435)
                                               (syntax-error
                                                 id1434
                                                 '"exported identifier not visible")
                                               (void))
                                           label1435))
                                        (id-var-name-loc428
                                          id1434
                                          '(())))))
            (do-import!502 (lambda (import-iface1430 ribcage1429)
                             ((lambda (ie1431)
                                (if (<= (vector-length ie1431) '20)
                                    ((lambda (new-marks1432)
                                       (vfor-each483
                                         (lambda (id1433)
                                           (import-extend-ribcage!406
                                             ribcage1429
                                             new-marks1432
                                             id1433
                                             (lookup-import-label501
                                               id1433)))
                                         ie1431))
                                      (import-interface-new-marks377
                                        import-iface1430))
                                    (extend-ribcage-subst!409
                                      ribcage1429
                                      import-iface1430)))
                               (interface-exports449
                                 (import-interface-interface376
                                   import-iface1430)))))
            (parse-module503 (lambda (e1405 w1404 ae1403 *w1402)
                               (letrec ((listify1406 (lambda (exports1423)
                                                       (if (null?
                                                             exports1423)
                                                           '()
                                                           (cons
                                                             ((lambda (tmp1424)
                                                                ((lambda (tmp1425)
                                                                   (if tmp1425
                                                                       (apply
                                                                         (lambda (ex1426)
                                                                           (listify1406
                                                                             ex1426))
                                                                         tmp1425)
                                                                       ((lambda (x1428)
                                                                          (if (id?310
                                                                                x1428)
                                                                              (wrap438
                                                                                x1428
                                                                                *w1402)
                                                                              (syntax-error
                                                                                (source-wrap439
                                                                                  e1405
                                                                                  w1404
                                                                                  ae1403)
                                                                                '"invalid exports list in")))
                                                                         tmp1424)))
                                                                  ($syntax-dispatch
                                                                    tmp1424
                                                                    'each-any)))
                                                               (car exports1423))
                                                             (listify1406
                                                               (cdr exports1423)))))))
                                 ((lambda (tmp1407)
                                    ((lambda (tmp1408)
                                       (if (if tmp1408
                                               (apply
                                                 (lambda (_1413 orig1412
                                                          mid1411 ex1410
                                                          form1409)
                                                   (id?310 mid1411))
                                                 tmp1408)
                                               '#f)
                                           (apply
                                             (lambda (_1418 orig1417
                                                      mid1416 ex1415
                                                      form1414)
                                               (values
                                                 orig1417
                                                 (wrap438 mid1416 w1404)
                                                 (listify1406 ex1415)
                                                 (map (lambda (x1420)
                                                        (wrap438
                                                          x1420
                                                          *w1402))
                                                      form1414)))
                                             tmp1408)
                                           ((lambda (_1422)
                                              (syntax-error
                                                (source-wrap439
                                                  e1405
                                                  w1404
                                                  ae1403)))
                                             tmp1407)))
                                      ($syntax-dispatch
                                        tmp1407
                                        '(any any any each-any .
                                              each-any))))
                                   e1405))))
            (parse-import504 (lambda (e1385 w1384 ae1383)
                               ((lambda (tmp1386)
                                  ((lambda (tmp1387)
                                     (if (if tmp1387
                                             (apply
                                               (lambda (_1390 orig1389
                                                        mid1388)
                                                 (id?310 mid1388))
                                               tmp1387)
                                             '#f)
                                         (apply
                                           (lambda (_1393 orig1392 mid1391)
                                             (values
                                               orig1392
                                               '#t
                                               (wrap438 mid1391 w1384)))
                                           tmp1387)
                                         ((lambda (tmp1394)
                                            (if (if tmp1394
                                                    (apply
                                                      (lambda (_1397
                                                               orig1396
                                                               mid1395)
                                                        (id?310 mid1395))
                                                      tmp1394)
                                                    '#f)
                                                (apply
                                                  (lambda (_1400 orig1399
                                                           mid1398)
                                                    (values
                                                      orig1399
                                                      '#f
                                                      (wrap438
                                                        mid1398
                                                        w1384)))
                                                  tmp1394)
                                                ((lambda (_1401)
                                                   (syntax-error
                                                     (source-wrap439
                                                       e1385
                                                       w1384
                                                       ae1383)))
                                                  tmp1386)))
                                           ($syntax-dispatch
                                             tmp1386
                                             '(any any #(atom #f) any)))))
                                    ($syntax-dispatch
                                      tmp1386
                                      '(any any #(atom #t) any))))
                                 e1385)))
            (parse-define505 (lambda (e1356 w1355 ae1354)
                               ((lambda (tmp1357)
                                  ((lambda (tmp1358)
                                     (if (if tmp1358
                                             (apply
                                               (lambda (_1361 name1360
                                                        val1359)
                                                 (id?310 name1360))
                                               tmp1358)
                                             '#f)
                                         (apply
                                           (lambda (_1364 name1363 val1362)
                                             (values
                                               name1363
                                               val1362
                                               w1355))
                                           tmp1358)
                                         ((lambda (tmp1365)
                                            (if (if tmp1365
                                                    (apply
                                                      (lambda (_1370
                                                               name1369
                                                               args1368
                                                               e11367
                                                               e21366)
                                                        (if (id?310
                                                              name1369)
                                                            (valid-bound-ids?434
                                                              (lambda-var-list519
                                                                args1368))
                                                            '#f))
                                                      tmp1365)
                                                    '#f)
                                                (apply
                                                  (lambda (_1375 name1374
                                                           args1373 e11372
                                                           e21371)
                                                    (values
                                                      (wrap438
                                                        name1374
                                                        w1355)
                                                      (cons
                                                        '#(syntax-object lambda ((top) #(ribcage #(_ name args e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(e w ae) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                        (wrap438
                                                          (cons
                                                            args1373
                                                            (cons
                                                              e11372
                                                              e21371))
                                                          w1355))
                                                      '(())))
                                                  tmp1365)
                                                ((lambda (tmp1377)
                                                   (if (if tmp1377
                                                           (apply
                                                             (lambda (_1379
                                                                      name1378)
                                                               (id?310
                                                                 name1378))
                                                             tmp1377)
                                                           '#f)
                                                       (apply
                                                         (lambda (_1381
                                                                  name1380)
                                                           (values
                                                             (wrap438
                                                               name1380
                                                               w1355)
                                                             '#(syntax-object (void) ((top) #(ribcage #(_ name) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(e w ae) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                             '(())))
                                                         tmp1377)
                                                       ((lambda (_1382)
                                                          (syntax-error
                                                            (source-wrap439
                                                              e1356
                                                              w1355
                                                              ae1354)))
                                                         tmp1357)))
                                                  ($syntax-dispatch
                                                    tmp1357
                                                    '(any any)))))
                                           ($syntax-dispatch
                                             tmp1357
                                             '(any (any . any)
                                                   any
                                                   .
                                                   each-any)))))
                                    ($syntax-dispatch
                                      tmp1357
                                      '(any any any))))
                                 e1356)))
            (parse-define-syntax506 (lambda (e1332 w1331 ae1330)
                                      ((lambda (tmp1333)
                                         ((lambda (tmp1334)
                                            (if (if tmp1334
                                                    (apply
                                                      (lambda (_1339
                                                               name1338
                                                               id1337
                                                               e11336
                                                               e21335)
                                                        (if (id?310
                                                              name1338)
                                                            (id?310 id1337)
                                                            '#f))
                                                      tmp1334)
                                                    '#f)
                                                (apply
                                                  (lambda (_1344 name1343
                                                           id1342 e11341
                                                           e21340)
                                                    (values
                                                      (wrap438
                                                        name1343
                                                        w1331)
                                                      (cons
                                                        '#(syntax-object lambda ((top) #(ribcage #(_ name id e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(e w ae) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                        (cons
                                                          (wrap438
                                                            (list id1342)
                                                            w1331)
                                                          (wrap438
                                                            (cons
                                                              e11341
                                                              e21340)
                                                            w1331)))
                                                      '(())))
                                                  tmp1334)
                                                ((lambda (tmp1346)
                                                   (if (if tmp1346
                                                           (apply
                                                             (lambda (_1349
                                                                      name1348
                                                                      val1347)
                                                               (id?310
                                                                 name1348))
                                                             tmp1346)
                                                           '#f)
                                                       (apply
                                                         (lambda (_1352
                                                                  name1351
                                                                  val1350)
                                                           (values
                                                             name1351
                                                             val1350
                                                             w1331))
                                                         tmp1346)
                                                       ((lambda (_1353)
                                                          (syntax-error
                                                            (source-wrap439
                                                              e1332
                                                              w1331
                                                              ae1330)))
                                                         tmp1333)))
                                                  ($syntax-dispatch
                                                    tmp1333
                                                    '(any any any)))))
                                           ($syntax-dispatch
                                             tmp1333
                                             '(any (any any)
                                                   any
                                                   .
                                                   each-any))))
                                        e1332)))
            (parse-meta507 (lambda (e1324 w1323 ae1322)
                             ((lambda (tmp1325)
                                ((lambda (tmp1326)
                                   (if tmp1326
                                       (apply
                                         (lambda (_1328 form1327) form1327)
                                         tmp1326)
                                       ((lambda (_1329)
                                          (syntax-error
                                            (source-wrap439
                                              e1324
                                              w1323
                                              ae1322)))
                                         tmp1325)))
                                  ($syntax-dispatch tmp1325 '(any . any))))
                               e1324)))
            (parse-eval-when508 (lambda (e1312 w1311 ae1310)
                                  ((lambda (tmp1313)
                                     ((lambda (tmp1314)
                                        (if tmp1314
                                            (apply
                                              (lambda (_1318 x1317 e11316
                                                       e21315)
                                                (values
                                                  (chi-when-list440
                                                    x1317
                                                    w1311)
                                                  (cons e11316 e21315)))
                                              tmp1314)
                                            ((lambda (_1321)
                                               (syntax-error
                                                 (source-wrap439
                                                   e1312
                                                   w1311
                                                   ae1310)))
                                              tmp1313)))
                                       ($syntax-dispatch
                                         tmp1313
                                         '(any each-any any . each-any))))
                                    e1312)))
            (parse-alias509 (lambda (e1300 w1299 ae1298)
                              ((lambda (tmp1301)
                                 ((lambda (tmp1302)
                                    (if (if tmp1302
                                            (apply
                                              (lambda (_1305 new-id1304
                                                       old-id1303)
                                                (if (id?310 new-id1304)
                                                    (id?310 old-id1303)
                                                    '#f))
                                              tmp1302)
                                            '#f)
                                        (apply
                                          (lambda (_1308 new-id1307
                                                   old-id1306)
                                            (values new-id1307 old-id1306))
                                          tmp1302)
                                        ((lambda (_1309)
                                           (syntax-error
                                             (source-wrap439
                                               e1300
                                               w1299
                                               ae1298)))
                                          tmp1301)))
                                   ($syntax-dispatch
                                     tmp1301
                                     '(any any any))))
                                e1300)))
            (parse-begin510 (lambda (e1287 w1286 ae1285 empty-okay?1284)
                              ((lambda (tmp1288)
                                 ((lambda (tmp1289)
                                    (if (if tmp1289
                                            (apply
                                              (lambda (_1290)
                                                empty-okay?1284)
                                              tmp1289)
                                            '#f)
                                        (apply
                                          (lambda (_1291) '())
                                          tmp1289)
                                        ((lambda (tmp1292)
                                           (if tmp1292
                                               (apply
                                                 (lambda (_1295 e11294
                                                          e21293)
                                                   (cons e11294 e21293))
                                                 tmp1292)
                                               ((lambda (_1297)
                                                  (syntax-error
                                                    (source-wrap439
                                                      e1287
                                                      w1286
                                                      ae1285)))
                                                 tmp1288)))
                                          ($syntax-dispatch
                                            tmp1288
                                            '(any any . each-any)))))
                                   ($syntax-dispatch tmp1288 '(any))))
                                e1287)))
            (chi-lambda-clause511 (lambda (e1261 c1260 r1259 mr1258
                                           w1257 m?1256)
                                    ((lambda (tmp1262)
                                       ((lambda (tmp1263)
                                          (if tmp1263
                                              (apply
                                                (lambda (id1266 e11265
                                                         e21264)
                                                  ((lambda (ids1267)
                                                     (if (not (valid-bound-ids?434
                                                                ids1267))
                                                         (syntax-error
                                                           e1261
                                                           '"invalid parameter list in")
                                                         ((lambda (labels1269
                                                                   new-vars1268)
                                                            (values
                                                              new-vars1268
                                                              (chi-body498
                                                                (cons
                                                                  e11265
                                                                  e21264)
                                                                e1261
                                                                (extend-var-env*301
                                                                  labels1269
                                                                  new-vars1268
                                                                  r1259)
                                                                mr1258
                                                                (make-binding-wrap412
                                                                  ids1267
                                                                  labels1269
                                                                  w1257)
                                                                m?1256)))
                                                           (gen-labels359
                                                             ids1267)
                                                           (map gen-var518
                                                                ids1267))))
                                                    id1266))
                                                tmp1263)
                                              ((lambda (tmp1272)
                                                 (if tmp1272
                                                     (apply
                                                       (lambda (ids1275
                                                                e11274
                                                                e21273)
                                                         ((lambda (old-ids1276)
                                                            (if (not (valid-bound-ids?434
                                                                       old-ids1276))
                                                                (syntax-error
                                                                  e1261
                                                                  '"invalid parameter list in")
                                                                ((lambda (labels1278
                                                                          new-vars1277)
                                                                   (values
                                                                     ((letrec ((f1280 (lambda (ls11282
                                                                                               ls21281)
                                                                                        (if (null?
                                                                                              ls11282)
                                                                                            ls21281
                                                                                            (f1280
                                                                                              (cdr ls11282)
                                                                                              (cons
                                                                                                (car ls11282)
                                                                                                ls21281))))))
                                                                        f1280)
                                                                       (cdr new-vars1277)
                                                                       (car new-vars1277))
                                                                     (chi-body498
                                                                       (cons
                                                                         e11274
                                                                         e21273)
                                                                       e1261
                                                                       (extend-var-env*301
                                                                         labels1278
                                                                         new-vars1277
                                                                         r1259)
                                                                       mr1258
                                                                       (make-binding-wrap412
                                                                         old-ids1276
                                                                         labels1278
                                                                         w1257)
                                                                       m?1256)))
                                                                  (gen-labels359
                                                                    old-ids1276)
                                                                  (map gen-var518
                                                                       old-ids1276))))
                                                           (lambda-var-list519
                                                             ids1275)))
                                                       tmp1272)
                                                     ((lambda (_1283)
                                                        (syntax-error
                                                          e1261))
                                                       tmp1262)))
                                                ($syntax-dispatch
                                                  tmp1262
                                                  '(any any . each-any)))))
                                         ($syntax-dispatch
                                           tmp1262
                                           '(each-any any . each-any))))
                                      c1260)))
            (chi-local-syntax512 (lambda (rec?1237 e1236 r1235 mr1234
                                          w1233 ae1232)
                                   ((lambda (tmp1238)
                                      ((lambda (tmp1239)
                                         (if tmp1239
                                             (apply
                                               (lambda (_1244 id1243
                                                        val1242 e11241
                                                        e21240)
                                                 ((lambda (ids1245)
                                                    (if (not (valid-bound-ids?434
                                                               ids1245))
                                                        (invalid-ids-error436
                                                          (map (lambda (x1246)
                                                                 (wrap438
                                                                   x1246
                                                                   w1233))
                                                               ids1245)
                                                          (source-wrap439
                                                            e1236
                                                            w1233
                                                            ae1232)
                                                          '"keyword")
                                                        ((lambda (labels1247)
                                                           ((lambda (new-w1248)
                                                              ((lambda (b*1249)
                                                                 (values
                                                                   (cons
                                                                     e11241
                                                                     e21240)
                                                                   (extend-env*300
                                                                     labels1247
                                                                     b*1249
                                                                     r1235)
                                                                   (extend-env*300
                                                                     labels1247
                                                                     b*1249
                                                                     mr1234)
                                                                   new-w1248
                                                                   ae1232))
                                                                ((lambda (w1251)
                                                                   (map (lambda (x1253)
                                                                          (defer-or-eval-transformer307
                                                                            local-eval-hook134
                                                                            (chi493
                                                                              x1253
                                                                              mr1234
                                                                              mr1234
                                                                              w1251
                                                                              '#t)))
                                                                        val1242))
                                                                  (if rec?1237
                                                                      new-w1248
                                                                      w1233))))
                                                             (make-binding-wrap412
                                                               ids1245
                                                               labels1247
                                                               w1233)))
                                                          (gen-labels359
                                                            ids1245))))
                                                   id1243))
                                               tmp1239)
                                             ((lambda (_1255)
                                                (syntax-error
                                                  (source-wrap439
                                                    e1236
                                                    w1233
                                                    ae1232)))
                                               tmp1238)))
                                        ($syntax-dispatch
                                          tmp1238
                                          '(any #(each (any any))
                                                any
                                                .
                                                each-any))))
                                     e1236)))
            (chi-void513 (lambda () (list 'void)))
            (ellipsis?514 (lambda (x1231)
                            (if (nonsymbol-id?309 x1231)
                                (literal-id=?431
                                  x1231
                                  '#(syntax-object ... ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                '#f)))
            (strip-annotation515 (lambda (x1230)
                                   (if (pair? x1230)
                                       (cons
                                         (strip-annotation515 (car x1230))
                                         (strip-annotation515 (cdr x1230)))
                                       (if (annotation?132 x1230)
                                           (annotation-stripped x1230)
                                           x1230))))
            (strip*516 (lambda (x1223 w1222 fn1221)
                         (if (memq 'top (wrap-marks320 w1222))
                             (fn1221 x1223)
                             ((letrec ((f1224 (lambda (x1225)
                                                (if (syntax-object?64
                                                      x1225)
                                                    (strip*516
                                                      (syntax-object-expression65
                                                        x1225)
                                                      (syntax-object-wrap66
                                                        x1225)
                                                      fn1221)
                                                    (if (pair? x1225)
                                                        ((lambda (a1227
                                                                  d1226)
                                                           (if (if (eq? a1227
                                                                        (car x1225))
                                                                   (eq? d1226
                                                                        (cdr x1225))
                                                                   '#f)
                                                               x1225
                                                               (cons
                                                                 a1227
                                                                 d1226)))
                                                          (f1224
                                                            (car x1225))
                                                          (f1224
                                                            (cdr x1225)))
                                                        (if (vector? x1225)
                                                            ((lambda (old1228)
                                                               ((lambda (new1229)
                                                                  (if (andmap
                                                                        eq?
                                                                        old1228
                                                                        new1229)
                                                                      x1225
                                                                      (list->vector
                                                                        new1229)))
                                                                 (map f1224
                                                                      old1228)))
                                                              (vector->list
                                                                x1225))
                                                            x1225))))))
                                f1224)
                               x1223))))
            (strip517 (lambda (x1218 w1217)
                        (strip*516
                          x1218
                          w1217
                          (lambda (x1219)
                            (if ((lambda (t1220)
                                   (if t1220
                                       t1220
                                       (if (pair? x1219)
                                           (annotation?132 (car x1219))
                                           '#f)))
                                  (annotation?132 x1219))
                                (strip-annotation515 x1219)
                                x1219)))))
            (gen-var518 (lambda (id1215)
                          ((lambda (id1216)
                             (if (annotation?132 id1216)
                                 (gensym)
                                 (gensym)))
                            (if (syntax-object?64 id1215)
                                (syntax-object-expression65 id1215)
                                id1215))))
            (lambda-var-list519 (lambda (vars1210)
                                  ((letrec ((lvl1211 (lambda (vars1214
                                                              ls1213 w1212)
                                                       (if (pair? vars1214)
                                                           (lvl1211
                                                             (cdr vars1214)
                                                             (cons
                                                               (wrap438
                                                                 (car vars1214)
                                                                 w1212)
                                                               ls1213)
                                                             w1212)
                                                           (if (id?310
                                                                 vars1214)
                                                               (cons
                                                                 (wrap438
                                                                   vars1214
                                                                   w1212)
                                                                 ls1213)
                                                               (if (null?
                                                                     vars1214)
                                                                   ls1213
                                                                   (if (syntax-object?64
                                                                         vars1214)
                                                                       (lvl1211
                                                                         (syntax-object-expression65
                                                                           vars1214)
                                                                         ls1213
                                                                         (join-wraps417
                                                                           w1212
                                                                           (syntax-object-wrap66
                                                                             vars1214)))
                                                                       (if (annotation?132
                                                                             vars1214)
                                                                           (lvl1211
                                                                             (annotation-expression
                                                                               vars1214)
                                                                             ls1213
                                                                             w1212)
                                                                           (cons
                                                                             vars1214
                                                                             ls1213)))))))))
                                     lvl1211)
                                    vars1210
                                    '()
                                    '(())))))
     (begin
       (set! $sc-put-cte
         (lambda (id1191 b1190 top-token1189)
           (letrec ((sc-put-module1192 (lambda (exports1208 token1207
                                                new-marks1206)
                                         (vfor-each483
                                           (lambda (id1209)
                                             (store-import-binding411
                                               id1209
                                               token1207
                                               new-marks1206))
                                           exports1208)))
                    (put-cte1193 (lambda (id1204 binding1203 token1202)
                                   ((lambda (sym1205)
                                      (begin
                                        (store-import-binding411
                                          id1204
                                          token1202
                                          '())
                                        (put-global-definition-hook143
                                          sym1205
                                          (if (if (eq? (binding-type285
                                                         binding1203)
                                                       'global)
                                                  (eq? (binding-value286
                                                         binding1203)
                                                       sym1205)
                                                  '#f)
                                              '#f
                                              binding1203))))
                                     (if (symbol? id1204)
                                         id1204
                                         (id-var-name429 id1204 '(())))))))
             ((lambda (binding1194)
                ((lambda (t1195)
                   (if (memv t1195 '($module))
                       (begin
                         ((lambda (iface1196)
                            (sc-put-module1192
                              (interface-exports449 iface1196)
                              (interface-token450 iface1196)
                              '()))
                           (binding-value286 binding1194))
                         (put-cte1193 id1191 binding1194 top-token1189))
                       (if (memv t1195 '(do-alias))
                           (store-import-binding411
                             id1191
                             top-token1189
                             '())
                           (if (memv t1195 '(do-import))
                               ((lambda (token1197)
                                  ((lambda (b1198)
                                     ((lambda (t1199)
                                        (if (memv t1199 '($module))
                                            ((lambda (iface1200)
                                               ((lambda (exports1201)
                                                  ((lambda ()
                                                     (begin
                                                       (if (not (eq? (interface-token450
                                                                       iface1200)
                                                                     token1197))
                                                           (syntax-error
                                                             id1191
                                                             '"import mismatch for module")
                                                           (void))
                                                       (sc-put-module1192
                                                         (interface-exports449
                                                           iface1200)
                                                         top-token1189
                                                         (import-mark-delta500
                                                           id1191
                                                           iface1200))))))
                                                 (interface-exports449
                                                   iface1200)))
                                              (binding-value286 b1198))
                                            (syntax-error
                                              id1191
                                              '"unknown module")))
                                       (binding-type285 b1198)))
                                    (lookup305
                                      (id-var-name429 id1191 '(()))
                                      '())))
                                 (binding-value286 b1190))
                               (put-cte1193
                                 id1191
                                 binding1194
                                 top-token1189)))))
                  (binding-type285 binding1194)))
               (make-transformer-binding306 b1190)))))
       (global-extend308 'local-syntax 'letrec-syntax '#t)
       (global-extend308 'local-syntax 'let-syntax '#f)
       (global-extend308
         'core
         'fluid-let-syntax
         (lambda (e1163 r1162 mr1161 w1160 ae1159 m?1158)
           ((lambda (tmp1164)
              ((lambda (tmp1165)
                 (if (if tmp1165
                         (apply
                           (lambda (_1170 var1169 val1168 e11167 e21166)
                             (valid-bound-ids?434 var1169))
                           tmp1165)
                         '#f)
                     (apply
                       (lambda (_1176 var1175 val1174 e11173 e21172)
                         ((lambda (names1177)
                            (begin
                              (for-each
                                (lambda (id1184 n1183)
                                  ((lambda (t1185)
                                     (if (memv t1185 '(displaced-lexical))
                                         (displaced-lexical-error303
                                           (wrap438 id1184 w1160))
                                         (void)))
                                    (binding-type285
                                      (lookup305 n1183 r1162))))
                                var1175
                                names1177)
                              ((lambda (b*1178)
                                 (chi-body498 (cons e11173 e21172)
                                   (source-wrap439 e1163 w1160 ae1159)
                                   (extend-env*300 names1177 b*1178 r1162)
                                   (extend-env*300 names1177 b*1178 mr1161)
                                   w1160 m?1158))
                                (map (lambda (x1181)
                                       (defer-or-eval-transformer307
                                         local-eval-hook134
                                         (chi493 x1181 mr1161 mr1161 w1160
                                           '#t)))
                                     val1174))))
                           (map (lambda (x1187)
                                  (id-var-name429 x1187 w1160))
                                var1175)))
                       tmp1165)
                     ((lambda (_1188)
                        (syntax-error (source-wrap439 e1163 w1160 ae1159)))
                       tmp1164)))
                ($syntax-dispatch
                  tmp1164
                  '(any #(each (any any)) any . each-any))))
             e1163)))
       (global-extend308
         'core
         'quote
         (lambda (e1152 r1151 mr1150 w1149 ae1148 m?1147)
           ((lambda (tmp1153)
              ((lambda (tmp1154)
                 (if tmp1154
                     (apply
                       (lambda (_1156 e1155)
                         (list 'quote (strip517 e1155 w1149)))
                       tmp1154)
                     ((lambda (_1157)
                        (syntax-error (source-wrap439 e1152 w1149 ae1148)))
                       tmp1153)))
                ($syntax-dispatch tmp1153 '(any any))))
             e1152)))
       (global-extend308
         'core
         'syntax
         ((lambda ()
            (letrec ((gen-syntax1031 (lambda (src1092 e1091 r1090
                                              maps1089 ellipsis?1088
                                              vec?1087)
                                       (if (id?310 e1091)
                                           ((lambda (label1093)
                                              ((lambda (b1094)
                                                 (if (eq? (binding-type285
                                                            b1094)
                                                          'syntax)
                                                     (call-with-values
                                                       (lambda ()
                                                         ((lambda (var.lev1097)
                                                            (gen-ref1032
                                                              src1092
                                                              (car var.lev1097)
                                                              (cdr var.lev1097)
                                                              maps1089))
                                                           (binding-value286
                                                             b1094)))
                                                       (lambda (var1096
                                                                maps1095)
                                                         (values
                                                           (list
                                                             'ref
                                                             var1096)
                                                           maps1095)))
                                                     (if (ellipsis?1088
                                                           e1091)
                                                         (syntax-error
                                                           src1092
                                                           '"misplaced ellipsis in syntax form")
                                                         (values
                                                           (list
                                                             'quote
                                                             e1091)
                                                           maps1089))))
                                                (lookup305
                                                  label1093
                                                  r1090)))
                                             (id-var-name429 e1091 '(())))
                                           ((lambda (tmp1098)
                                              ((lambda (tmp1099)
                                                 (if (if tmp1099
                                                         (apply
                                                           (lambda (dots1101
                                                                    e1100)
                                                             (ellipsis?1088
                                                               dots1101))
                                                           tmp1099)
                                                         '#f)
                                                     (apply
                                                       (lambda (dots1103
                                                                e1102)
                                                         (if vec?1087
                                                             (syntax-error
                                                               src1092
                                                               '"misplaced ellipsis in syntax template")
                                                             (gen-syntax1031
                                                               src1092
                                                               e1102 r1090
                                                               maps1089
                                                               (lambda (x1104)
                                                                 '#f)
                                                               '#f)))
                                                       tmp1099)
                                                     ((lambda (tmp1105)
                                                        (if (if tmp1105
                                                                (apply
                                                                  (lambda (x1108
                                                                           dots1107
                                                                           y1106)
                                                                    (ellipsis?1088
                                                                      dots1107))
                                                                  tmp1105)
                                                                '#f)
                                                            (apply
                                                              (lambda (x1111
                                                                       dots1110
                                                                       y1109)
                                                                ((letrec ((f1112 (lambda (y1114
                                                                                          k1113)
                                                                                   ((lambda (tmp1115)
                                                                                      ((lambda (tmp1116)
                                                                                         (if (if tmp1116
                                                                                                 (apply
                                                                                                   (lambda (dots1118
                                                                                                            y1117)
                                                                                                     (ellipsis?1088
                                                                                                       dots1118))
                                                                                                   tmp1116)
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (lambda (dots1120
                                                                                                        y1119)
                                                                                                 (f1112
                                                                                                   y1119
                                                                                                   (lambda (maps1121)
                                                                                                     (call-with-values
                                                                                                       (lambda ()
                                                                                                         (k1113
                                                                                                           (cons
                                                                                                             '()
                                                                                                             maps1121)))
                                                                                                       (lambda (x1123
                                                                                                                maps1122)
                                                                                                         (if (null?
                                                                                                               (car maps1122))
                                                                                                             (syntax-error
                                                                                                               src1092
                                                                                                               '"extra ellipsis in syntax form")
                                                                                                             (values
                                                                                                               (gen-mappend1034
                                                                                                                 x1123
                                                                                                                 (car maps1122))
                                                                                                               (cdr maps1122))))))))
                                                                                               tmp1116)
                                                                                             ((lambda (_1124)
                                                                                                (call-with-values
                                                                                                  (lambda ()
                                                                                                    (gen-syntax1031
                                                                                                      src1092
                                                                                                      y1114
                                                                                                      r1090
                                                                                                      maps1089
                                                                                                      ellipsis?1088
                                                                                                      vec?1087))
                                                                                                  (lambda (y1126
                                                                                                           maps1125)
                                                                                                    (call-with-values
                                                                                                      (lambda ()
                                                                                                        (k1113
                                                                                                          maps1125))
                                                                                                      (lambda (x1128
                                                                                                               maps1127)
                                                                                                        (values
                                                                                                          (gen-append1033
                                                                                                            x1128
                                                                                                            y1126)
                                                                                                          maps1127))))))
                                                                                               tmp1115)))
                                                                                        ($syntax-dispatch
                                                                                          tmp1115
                                                                                          '(any .
                                                                                                any))))
                                                                                     y1114))))
                                                                   f1112)
                                                                  y1109
                                                                  (lambda (maps1129)
                                                                    (call-with-values
                                                                      (lambda ()
                                                                        (gen-syntax1031
                                                                          src1092
                                                                          x1111
                                                                          r1090
                                                                          (cons
                                                                            '()
                                                                            maps1129)
                                                                          ellipsis?1088
                                                                          '#f))
                                                                      (lambda (x1131
                                                                               maps1130)
                                                                        (if (null?
                                                                              (car maps1130))
                                                                            (syntax-error
                                                                              src1092
                                                                              '"extra ellipsis in syntax form")
                                                                            (values
                                                                              (gen-map1035
                                                                                x1131
                                                                                (car maps1130))
                                                                              (cdr maps1130))))))))
                                                              tmp1105)
                                                            ((lambda (tmp1132)
                                                               (if tmp1132
                                                                   (apply
                                                                     (lambda (x1134
                                                                              y1133)
                                                                       (call-with-values
                                                                         (lambda ()
                                                                           (gen-syntax1031
                                                                             src1092
                                                                             x1134
                                                                             r1090
                                                                             maps1089
                                                                             ellipsis?1088
                                                                             '#f))
                                                                         (lambda (xnew1136
                                                                                  maps1135)
                                                                           (call-with-values
                                                                             (lambda ()
                                                                               (gen-syntax1031
                                                                                 src1092
                                                                                 y1133
                                                                                 r1090
                                                                                 maps1135
                                                                                 ellipsis?1088
                                                                                 vec?1087))
                                                                             (lambda (ynew1138
                                                                                      maps1137)
                                                                               (values
                                                                                 (gen-cons1036
                                                                                   e1091
                                                                                   x1134
                                                                                   y1133
                                                                                   xnew1136
                                                                                   ynew1138)
                                                                                 maps1137))))))
                                                                     tmp1132)
                                                                   ((lambda (tmp1139)
                                                                      (if tmp1139
                                                                          (apply
                                                                            (lambda (x11141
                                                                                     x21140)
                                                                              ((lambda (ls1142)
                                                                                 (call-with-values
                                                                                   (lambda ()
                                                                                     (gen-syntax1031
                                                                                       src1092
                                                                                       ls1142
                                                                                       r1090
                                                                                       maps1089
                                                                                       ellipsis?1088
                                                                                       '#t))
                                                                                   (lambda (lsnew1144
                                                                                            maps1143)
                                                                                     (values
                                                                                       (gen-vector1037
                                                                                         e1091
                                                                                         ls1142
                                                                                         lsnew1144)
                                                                                       maps1143))))
                                                                                (cons
                                                                                  x11141
                                                                                  x21140)))
                                                                            tmp1139)
                                                                          ((lambda (_1146)
                                                                             (values
                                                                               (list
                                                                                 'quote
                                                                                 e1091)
                                                                               maps1089))
                                                                            tmp1098)))
                                                                     ($syntax-dispatch
                                                                       tmp1098
                                                                       '#(vector
                                                                          (any .
                                                                               each-any))))))
                                                              ($syntax-dispatch
                                                                tmp1098
                                                                '(any .
                                                                      any)))))
                                                       ($syntax-dispatch
                                                         tmp1098
                                                         '(any any
                                                               .
                                                               any)))))
                                                ($syntax-dispatch
                                                  tmp1098
                                                  '(any any))))
                                             e1091))))
                     (gen-ref1032 (lambda (src1082 var1081 level1080
                                           maps1079)
                                    (if (= level1080 '0)
                                        (values var1081 maps1079)
                                        (if (null? maps1079)
                                            (syntax-error
                                              src1082
                                              '"missing ellipsis in syntax form")
                                            (call-with-values
                                              (lambda ()
                                                (gen-ref1032
                                                  src1082
                                                  var1081
                                                  (fx- level1080 '1)
                                                  (cdr maps1079)))
                                              (lambda (outer-var1084
                                                       outer-maps1083)
                                                ((lambda (b1085)
                                                   (if b1085
                                                       (values
                                                         (cdr b1085)
                                                         maps1079)
                                                       ((lambda (inner-var1086)
                                                          (values
                                                            inner-var1086
                                                            (cons
                                                              (cons
                                                                (cons
                                                                  outer-var1084
                                                                  inner-var1086)
                                                                (car maps1079))
                                                              outer-maps1083)))
                                                         (gen-var518
                                                           'tmp))))
                                                  (assq
                                                    outer-var1084
                                                    (car maps1079)))))))))
                     (gen-append1033 (lambda (x1078 y1077)
                                       (if (equal? y1077 ''())
                                           x1078
                                           (list 'append x1078 y1077))))
                     (gen-mappend1034 (lambda (e1076 map-env1075)
                                        (list
                                          'apply
                                          '(primitive append)
                                          (gen-map1035
                                            e1076
                                            map-env1075))))
                     (gen-map1035 (lambda (e1068 map-env1067)
                                    ((lambda (formals1070 actuals1069)
                                       (if (eq? (car e1068) 'ref)
                                           (car actuals1069)
                                           (if (andmap
                                                 (lambda (x1071)
                                                   (if (eq? (car x1071)
                                                            'ref)
                                                       (memq
                                                         (cadr x1071)
                                                         formals1070)
                                                       '#f))
                                                 (cdr e1068))
                                               (cons
                                                 'map
                                                 (cons
                                                   (list
                                                     'primitive
                                                     (car e1068))
                                                   (map ((lambda (r1072)
                                                           (lambda (x1073)
                                                             (cdr (assq
                                                                    (cadr
                                                                      x1073)
                                                                    r1072))))
                                                          (map cons
                                                               formals1070
                                                               actuals1069))
                                                        (cdr e1068))))
                                               (cons
                                                 'map
                                                 (cons
                                                   (list
                                                     'lambda
                                                     formals1070
                                                     e1068)
                                                   actuals1069)))))
                                      (map cdr map-env1067)
                                      (map (lambda (x1074)
                                             (list 'ref (car x1074)))
                                           map-env1067))))
                     (gen-cons1036 (lambda (e1063 x1062 y1061 xnew1060
                                            ynew1059)
                                     ((lambda (t1064)
                                        (if (memv t1064 '(quote))
                                            (if (eq? (car xnew1060) 'quote)
                                                ((lambda (xnew1066
                                                          ynew1065)
                                                   (if (if (eq? xnew1066
                                                                x1062)
                                                           (eq? ynew1065
                                                                y1061)
                                                           '#f)
                                                       (list 'quote e1063)
                                                       (list
                                                         'quote
                                                         (cons
                                                           xnew1066
                                                           ynew1065))))
                                                  (cadr xnew1060)
                                                  (cadr ynew1059))
                                                (if (eq? (cadr ynew1059)
                                                         '())
                                                    (list 'list xnew1060)
                                                    (list
                                                      'cons
                                                      xnew1060
                                                      ynew1059)))
                                            (if (memv t1064 '(list))
                                                (cons
                                                  'list
                                                  (cons
                                                    xnew1060
                                                    (cdr ynew1059)))
                                                (list
                                                  'cons
                                                  xnew1060
                                                  ynew1059))))
                                       (car ynew1059))))
                     (gen-vector1037 (lambda (e1058 ls1057 lsnew1056)
                                       (if (eq? (car lsnew1056) 'quote)
                                           (if (eq? (cadr lsnew1056)
                                                    ls1057)
                                               (list 'quote e1058)
                                               (list
                                                 'quote
                                                 (list->vector
                                                   (cadr lsnew1056))))
                                           (if (eq? (car lsnew1056) 'list)
                                               (cons
                                                 'vector
                                                 (cdr lsnew1056))
                                               (list
                                                 'list->vector
                                                 lsnew1056)))))
                     (regen1038 (lambda (x1053)
                                  ((lambda (t1054)
                                     (if (memv t1054 '(ref))
                                         (cadr x1053)
                                         (if (memv t1054 '(primitive))
                                             (cadr x1053)
                                             (if (memv t1054 '(quote))
                                                 (list 'quote (cadr x1053))
                                                 (if (memv t1054 '(lambda))
                                                     (list
                                                       'lambda
                                                       (cadr x1053)
                                                       (regen1038
                                                         (caddr x1053)))
                                                     (if (memv
                                                           t1054
                                                           '(map))
                                                         ((lambda (ls1055)
                                                            (cons
                                                              (if (= (length
                                                                       ls1055)
                                                                     '2)
                                                                  'map
                                                                  'map)
                                                              ls1055))
                                                           (map regen1038
                                                                (cdr x1053)))
                                                         (cons
                                                           (car x1053)
                                                           (map regen1038
                                                                (cdr x1053)))))))))
                                    (car x1053)))))
              (lambda (e1044 r1043 mr1042 w1041 ae1040 m?1039)
                ((lambda (e1045)
                   ((lambda (tmp1046)
                      ((lambda (tmp1047)
                         (if tmp1047
                             (apply
                               (lambda (_1049 x1048)
                                 (call-with-values
                                   (lambda ()
                                     (gen-syntax1031 e1045 x1048 r1043 '()
                                       ellipsis?514 '#f))
                                   (lambda (e1051 maps1050)
                                     (regen1038 e1051))))
                               tmp1047)
                             ((lambda (_1052) (syntax-error e1045))
                               tmp1046)))
                        ($syntax-dispatch tmp1046 '(any any))))
                     e1045))
                  (source-wrap439 e1044 w1041 ae1040)))))))
       (global-extend308
         'core
         'lambda
         (lambda (e1024 r1023 mr1022 w1021 ae1020 m?1019)
           ((lambda (tmp1025)
              ((lambda (tmp1026)
                 (if tmp1026
                     (apply
                       (lambda (_1028 c1027)
                         (call-with-values
                           (lambda ()
                             (chi-lambda-clause511
                               (source-wrap439 e1024 w1021 ae1020) c1027
                               r1023 mr1022 w1021 m?1019))
                           (lambda (vars1030 body1029)
                             (list 'lambda vars1030 body1029))))
                       tmp1026)
                     (syntax-error tmp1025)))
                ($syntax-dispatch tmp1025 '(any . any))))
             e1024)))
       (global-extend308
         'core
         'letrec
         (lambda (e1000 r999 mr998 w997 ae996 m?995)
           ((lambda (tmp1001)
              ((lambda (tmp1002)
                 (if tmp1002
                     (apply
                       (lambda (_1007 id1006 val1005 e11004 e21003)
                         ((lambda (ids1008)
                            (if (not (valid-bound-ids?434 ids1008))
                                (invalid-ids-error436
                                  (map (lambda (x1009)
                                         (wrap438 x1009 w997))
                                       ids1008)
                                  (source-wrap439 e1000 w997 ae996)
                                  '"bound variable")
                                ((lambda (labels1011 new-vars1010)
                                   ((lambda (w1013 r1012)
                                      (build-letrec240
                                        ae996
                                        new-vars1010
                                        (map (lambda (x1016)
                                               (chi493 x1016 r1012 mr998
                                                 w1013 m?995))
                                             val1005)
                                        (chi-body498 (cons e11004 e21003)
                                          (source-wrap439
                                            e1000
                                            w1013
                                            ae996)
                                          r1012 mr998 w1013 m?995)))
                                     (make-binding-wrap412
                                       ids1008
                                       labels1011
                                       w997)
                                     (extend-var-env*301
                                       labels1011
                                       new-vars1010
                                       r999)))
                                  (gen-labels359 ids1008)
                                  (map gen-var518 ids1008))))
                           id1006))
                       tmp1002)
                     ((lambda (_1018)
                        (syntax-error (source-wrap439 e1000 w997 ae996)))
                       tmp1001)))
                ($syntax-dispatch
                  tmp1001
                  '(any #(each (any any)) any . each-any))))
             e1000)))
       (global-extend308
         'core
         'if
         (lambda (e983 r982 mr981 w980 ae979 m?978)
           ((lambda (tmp984)
              ((lambda (tmp985)
                 (if tmp985
                     (apply
                       (lambda (_988 test987 then986)
                         (list
                           'if
                           (chi493 test987 r982 mr981 w980 m?978)
                           (chi493 then986 r982 mr981 w980 m?978)
                           (chi-void513)))
                       tmp985)
                     ((lambda (tmp989)
                        (if tmp989
                            (apply
                              (lambda (_993 test992 then991 else990)
                                (list
                                  'if
                                  (chi493 test992 r982 mr981 w980 m?978)
                                  (chi493 then991 r982 mr981 w980 m?978)
                                  (chi493 else990 r982 mr981 w980 m?978)))
                              tmp989)
                            ((lambda (_994)
                               (syntax-error
                                 (source-wrap439 e983 w980 ae979)))
                              tmp984)))
                       ($syntax-dispatch tmp984 '(any any any any)))))
                ($syntax-dispatch tmp984 '(any any any))))
             e983)))
       (global-extend308 'set! 'set! '())
       (global-extend308 'alias 'alias '())
       (global-extend308 'begin 'begin '())
       (global-extend308 '$module-key '$module '())
       (global-extend308 '$import '$import '())
       (global-extend308 'define 'define '())
       (global-extend308 'define-syntax 'define-syntax '())
       (global-extend308 'eval-when 'eval-when '())
       (global-extend308 'meta 'meta '())
       (global-extend308
         'core
         'syntax-case
         ((lambda ()
            (letrec ((convert-pattern850 (lambda (pattern927 keys926)
                                           (letrec ((cvt*928 (lambda (p*973
                                                                      n972
                                                                      ids971)
                                                               (if (null?
                                                                     p*973)
                                                                   (values
                                                                     '()
                                                                     ids971)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (cvt*928
                                                                         (cdr p*973)
                                                                         n972
                                                                         ids971))
                                                                     (lambda (y975
                                                                              ids974)
                                                                       (call-with-values
                                                                         (lambda ()
                                                                           (cvt929
                                                                             (car p*973)
                                                                             n972
                                                                             ids974))
                                                                         (lambda (x977
                                                                                  ids976)
                                                                           (values
                                                                             (cons
                                                                               x977
                                                                               y975)
                                                                             ids976))))))))
                                                    (cvt929 (lambda (p932
                                                                     n931
                                                                     ids930)
                                                              (if (id?310
                                                                    p932)
                                                                  (if (bound-id-member?437
                                                                        p932
                                                                        keys926)
                                                                      (values
                                                                        (vector
                                                                          'free-id
                                                                          p932)
                                                                        ids930)
                                                                      (values
                                                                        'any
                                                                        (cons
                                                                          (cons
                                                                            p932
                                                                            n931)
                                                                          ids930)))
                                                                  ((lambda (tmp933)
                                                                     ((lambda (tmp934)
                                                                        (if (if tmp934
                                                                                (apply
                                                                                  (lambda (x936
                                                                                           dots935)
                                                                                    (ellipsis?514
                                                                                      dots935))
                                                                                  tmp934)
                                                                                '#f)
                                                                            (apply
                                                                              (lambda (x938
                                                                                       dots937)
                                                                                (call-with-values
                                                                                  (lambda ()
                                                                                    (cvt929
                                                                                      x938
                                                                                      (+ n931
                                                                                         '1)
                                                                                      ids930))
                                                                                  (lambda (p940
                                                                                           ids939)
                                                                                    (values
                                                                                      (if (eq? p940
                                                                                               'any)
                                                                                          'each-any
                                                                                          (vector
                                                                                            'each
                                                                                            p940))
                                                                                      ids939))))
                                                                              tmp934)
                                                                            ((lambda (tmp941)
                                                                               (if (if tmp941
                                                                                       (apply
                                                                                         (lambda (x945
                                                                                                  dots944
                                                                                                  y943
                                                                                                  z942)
                                                                                           (ellipsis?514
                                                                                             dots944))
                                                                                         tmp941)
                                                                                       '#f)
                                                                                   (apply
                                                                                     (lambda (x949
                                                                                              dots948
                                                                                              y947
                                                                                              z946)
                                                                                       (call-with-values
                                                                                         (lambda ()
                                                                                           (cvt929
                                                                                             z946
                                                                                             n931
                                                                                             ids930))
                                                                                         (lambda (z951
                                                                                                  ids950)
                                                                                           (call-with-values
                                                                                             (lambda ()
                                                                                               (cvt*928
                                                                                                 y947
                                                                                                 n931
                                                                                                 ids950))
                                                                                             (lambda (y953
                                                                                                      ids952)
                                                                                               (call-with-values
                                                                                                 (lambda ()
                                                                                                   (cvt929
                                                                                                     x949
                                                                                                     (+ n931
                                                                                                        '1)
                                                                                                     ids952))
                                                                                                 (lambda (x955
                                                                                                          ids954)
                                                                                                   (values
                                                                                                     (vector
                                                                                                       'each+
                                                                                                       x955
                                                                                                       (reverse
                                                                                                         y953)
                                                                                                       z951)
                                                                                                     ids954))))))))
                                                                                     tmp941)
                                                                                   ((lambda (tmp957)
                                                                                      (if tmp957
                                                                                          (apply
                                                                                            (lambda (x959
                                                                                                     y958)
                                                                                              (call-with-values
                                                                                                (lambda ()
                                                                                                  (cvt929
                                                                                                    y958
                                                                                                    n931
                                                                                                    ids930))
                                                                                                (lambda (y961
                                                                                                         ids960)
                                                                                                  (call-with-values
                                                                                                    (lambda ()
                                                                                                      (cvt929
                                                                                                        x959
                                                                                                        n931
                                                                                                        ids960))
                                                                                                    (lambda (x963
                                                                                                             ids962)
                                                                                                      (values
                                                                                                        (cons
                                                                                                          x963
                                                                                                          y961)
                                                                                                        ids962))))))
                                                                                            tmp957)
                                                                                          ((lambda (tmp964)
                                                                                             (if tmp964
                                                                                                 (apply
                                                                                                   (lambda ()
                                                                                                     (values
                                                                                                       '()
                                                                                                       ids930))
                                                                                                   tmp964)
                                                                                                 ((lambda (tmp965)
                                                                                                    (if tmp965
                                                                                                        (apply
                                                                                                          (lambda (x966)
                                                                                                            (call-with-values
                                                                                                              (lambda ()
                                                                                                                (cvt929
                                                                                                                  x966
                                                                                                                  n931
                                                                                                                  ids930))
                                                                                                              (lambda (p968
                                                                                                                       ids967)
                                                                                                                (values
                                                                                                                  (vector
                                                                                                                    'vector
                                                                                                                    p968)
                                                                                                                  ids967))))
                                                                                                          tmp965)
                                                                                                        ((lambda (x970)
                                                                                                           (values
                                                                                                             (vector
                                                                                                               'atom
                                                                                                               (strip517
                                                                                                                 p932
                                                                                                                 '(())))
                                                                                                             ids930))
                                                                                                          tmp933)))
                                                                                                   ($syntax-dispatch
                                                                                                     tmp933
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                            ($syntax-dispatch
                                                                                              tmp933
                                                                                              '()))))
                                                                                     ($syntax-dispatch
                                                                                       tmp933
                                                                                       '(any .
                                                                                             any)))))
                                                                              ($syntax-dispatch
                                                                                tmp933
                                                                                '(any any
                                                                                      .
                                                                                      #(each+
                                                                                        any
                                                                                        ()
                                                                                        any))))))
                                                                       ($syntax-dispatch
                                                                         tmp933
                                                                         '(any any))))
                                                                    p932)))))
                                             (cvt929 pattern927 '0 '()))))
                     (build-dispatch-call851 (lambda (pvars919 exp918 y917
                                                      r916 mr915 m?914)
                                               ((lambda (ids921 levels920)
                                                  ((lambda (labels923
                                                            new-vars922)
                                                     (list
                                                       'apply
                                                       (list
                                                         'lambda
                                                         new-vars922
                                                         (chi493 exp918
                                                           (extend-env*300
                                                             labels923
                                                             (map (lambda (var925
                                                                           level924)
                                                                    (cons
                                                                      'syntax
                                                                      (cons
                                                                        var925
                                                                        level924)))
                                                                  new-vars922
                                                                  (map cdr
                                                                       pvars919))
                                                             r916)
                                                           mr915
                                                           (make-binding-wrap412
                                                             ids921
                                                             labels923
                                                             '(()))
                                                           m?914))
                                                       y917))
                                                    (gen-labels359 ids921)
                                                    (map gen-var518
                                                         ids921)))
                                                 (map car pvars919)
                                                 (map cdr pvars919))))
                     (gen-clause852 (lambda (x897 keys896 clauses895 r894
                                             mr893 m?892 pat891 fender890
                                             exp889)
                                      (call-with-values
                                        (lambda ()
                                          (convert-pattern850
                                            pat891
                                            keys896))
                                        (lambda (p899 pvars898)
                                          (if (not (distinct-bound-ids?435
                                                     (map car pvars898)))
                                              (invalid-ids-error436
                                                (map car pvars898)
                                                pat891
                                                '"pattern variable")
                                              (if (not (andmap
                                                         (lambda (x900)
                                                           (not (ellipsis?514
                                                                  (car x900))))
                                                         pvars898))
                                                  (syntax-error
                                                    pat891
                                                    '"misplaced ellipsis in syntax-case pattern")
                                                  ((lambda (y901)
                                                     (list
                                                       (list
                                                         'lambda
                                                         (list y901)
                                                         (list
                                                           'if
                                                           ((lambda (tmp911)
                                                              ((lambda (tmp912)
                                                                 (if tmp912
                                                                     (apply
                                                                       (lambda ()
                                                                         y901)
                                                                       tmp912)
                                                                     ((lambda (_913)
                                                                        (list
                                                                          'if
                                                                          y901
                                                                          (build-dispatch-call851
                                                                            pvars898
                                                                            fender890
                                                                            y901
                                                                            r894
                                                                            mr893
                                                                            m?892)
                                                                          (list
                                                                            'quote
                                                                            '#f)))
                                                                       tmp911)))
                                                                ($syntax-dispatch
                                                                  tmp911
                                                                  '#(atom
                                                                     #t))))
                                                             fender890)
                                                           (build-dispatch-call851
                                                             pvars898
                                                             exp889 y901
                                                             r894 mr893
                                                             m?892)
                                                           (gen-syntax-case853
                                                             x897 keys896
                                                             clauses895
                                                             r894 mr893
                                                             m?892)))
                                                       (if (eq? p899 'any)
                                                           (list
                                                             'list
                                                             x897)
                                                           (list
                                                             '$syntax-dispatch
                                                             x897
                                                             (list
                                                               'quote
                                                               p899)))))
                                                    (gen-var518
                                                      'tmp))))))))
                     (gen-syntax-case853 (lambda (x877 keys876 clauses875
                                                  r874 mr873 m?872)
                                           (if (null? clauses875)
                                               (list 'syntax-error x877)
                                               ((lambda (tmp878)
                                                  ((lambda (tmp879)
                                                     (if tmp879
                                                         (apply
                                                           (lambda (pat881
                                                                    exp880)
                                                             (if (if (id?310
                                                                       pat881)
                                                                     (if (not (bound-id-member?437
                                                                                pat881
                                                                                keys876))
                                                                         (not (ellipsis?514
                                                                                pat881))
                                                                         '#f)
                                                                     '#f)
                                                                 ((lambda (label883
                                                                           var882)
                                                                    (list
                                                                      (list
                                                                        'lambda
                                                                        (list
                                                                          var882)
                                                                        (chi493
                                                                          exp880
                                                                          (extend-env299
                                                                            label883
                                                                            (cons
                                                                              'syntax
                                                                              (cons
                                                                                var882
                                                                                '0))
                                                                            r874)
                                                                          mr873
                                                                          (make-binding-wrap412
                                                                            (list
                                                                              pat881)
                                                                            (list
                                                                              label883)
                                                                            '(()))
                                                                          m?872))
                                                                      x877))
                                                                   (gen-label357)
                                                                   (gen-var518
                                                                     pat881))
                                                                 (gen-clause852
                                                                   x877
                                                                   keys876
                                                                   (cdr clauses875)
                                                                   r874
                                                                   mr873
                                                                   m?872
                                                                   pat881
                                                                   '#t
                                                                   exp880)))
                                                           tmp879)
                                                         ((lambda (tmp884)
                                                            (if tmp884
                                                                (apply
                                                                  (lambda (pat887
                                                                           fender886
                                                                           exp885)
                                                                    (gen-clause852
                                                                      x877
                                                                      keys876
                                                                      (cdr clauses875)
                                                                      r874
                                                                      mr873
                                                                      m?872
                                                                      pat887
                                                                      fender886
                                                                      exp885))
                                                                  tmp884)
                                                                ((lambda (_888)
                                                                   (syntax-error
                                                                     (car clauses875)
                                                                     '"invalid syntax-case clause"))
                                                                  tmp878)))
                                                           ($syntax-dispatch
                                                             tmp878
                                                             '(any any
                                                                   any)))))
                                                    ($syntax-dispatch
                                                      tmp878
                                                      '(any any))))
                                                 (car clauses875))))))
              (lambda (e859 r858 mr857 w856 ae855 m?854)
                ((lambda (e860)
                   ((lambda (tmp861)
                      ((lambda (tmp862)
                         (if tmp862
                             (apply
                               (lambda (_866 val865 key864 m863)
                                 (if (andmap
                                       (lambda (x868)
                                         (if (id?310 x868)
                                             (not (ellipsis?514 x868))
                                             '#f))
                                       key864)
                                     ((lambda (x869)
                                        (list
                                          (list
                                            'lambda
                                            (list x869)
                                            (gen-syntax-case853 x869 key864
                                              m863 r858 mr857 m?854))
                                          (chi493 val865 r858 mr857 '(())
                                            m?854)))
                                       (gen-var518 'tmp))
                                     (syntax-error
                                       e860
                                       '"invalid literals list in")))
                               tmp862)
                             (syntax-error tmp861)))
                        ($syntax-dispatch
                          tmp861
                          '(any any each-any . each-any))))
                     e860))
                  (source-wrap439 e859 w856 ae855)))))))
       (put-cte-hook141
         'module
         (lambda (x819)
           (letrec ((proper-export?820 (lambda (e843)
                                         ((lambda (tmp844)
                                            ((lambda (tmp845)
                                               (if tmp845
                                                   (apply
                                                     (lambda (id847 e846)
                                                       (if (identifier?
                                                             id847)
                                                           (andmap
                                                             proper-export?820
                                                             e846)
                                                           '#f))
                                                     tmp845)
                                                   ((lambda (id849)
                                                      (identifier? id849))
                                                     tmp844)))
                                              ($syntax-dispatch
                                                tmp844
                                                '(any . each-any))))
                                           e843))))
             ((lambda (tmp821)
                ((lambda (orig822)
                   ((lambda (tmp823)
                      ((lambda (tmp824)
                         (if tmp824
                             (apply
                               (lambda (_827 e826 d825)
                                 (if (andmap proper-export?820 e826)
                                     (list
                                       '#(syntax-object begin ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                       (cons
                                         '#(syntax-object $module ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                         (cons
                                           orig822
                                           (cons
                                             '#(syntax-object anon ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                             (cons e826 d825))))
                                       (cons
                                         '#(syntax-object $import ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                         (cons
                                           orig822
                                           '#(syntax-object (#f anon) ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))))
                                     (syntax-error
                                       x819
                                       '"invalid exports list in")))
                               tmp824)
                             ((lambda (tmp831)
                                (if (if tmp831
                                        (apply
                                          (lambda (_835 m834 e833 d832)
                                            (identifier? m834))
                                          tmp831)
                                        '#f)
                                    (apply
                                      (lambda (_839 m838 e837 d836)
                                        (if (andmap proper-export?820 e837)
                                            (cons
                                              '#(syntax-object $module ((top) #(ribcage #(_ m e d) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                              (cons
                                                orig822
                                                (cons
                                                  m838
                                                  (cons e837 d836))))
                                            (syntax-error
                                              x819
                                              '"invalid exports list in")))
                                      tmp831)
                                    (syntax-error tmp823)))
                               ($syntax-dispatch
                                 tmp823
                                 '(any any each-any . each-any)))))
                        ($syntax-dispatch
                          tmp823
                          '(any each-any . each-any))))
                     x819))
                  tmp821))
               x819))))
       ((lambda ()
          (letrec (($module-exports622 (lambda (m811 r810)
                                         ((lambda (b812)
                                            ((lambda (t813)
                                               (if (memv t813 '($module))
                                                   ((lambda (interface814)
                                                      ((lambda (new-marks815)
                                                         ((lambda ()
                                                            (vmap482
                                                              (lambda (x816)
                                                                ((lambda (id817)
                                                                   (make-syntax-object63
                                                                     (syntax-object->datum
                                                                       id817)
                                                                     ((lambda (marks818)
                                                                        (make-wrap319
                                                                          marks818
                                                                          (if (eq? (car marks818)
                                                                                   '#f)
                                                                              (cons
                                                                                'shift
                                                                                (wrap-subst321
                                                                                  '((top))))
                                                                              (wrap-subst321
                                                                                '((top))))))
                                                                       (join-marks418
                                                                         new-marks815
                                                                         (wrap-marks320
                                                                           (syntax-object-wrap66
                                                                             id817))))))
                                                                  (if (pair?
                                                                        x816)
                                                                      (car x816)
                                                                      x816)))
                                                              (interface-exports449
                                                                interface814)))))
                                                        (import-mark-delta500
                                                          m811
                                                          interface814)))
                                                     (binding-value286
                                                       b812))
                                                   (if (memv
                                                         t813
                                                         '(displaced-lexical))
                                                       (displaced-lexical-error303
                                                         m811)
                                                       (syntax-error
                                                         m811
                                                         '"unknown module"))))
                                              (binding-type285 b812)))
                                           (r810 m811))))
                   ($import-help623 (lambda (orig627 import-only?626)
                                      (lambda (r628)
                                        (letrec ((difference629 (lambda (ls1809
                                                                         ls2808)
                                                                  (if (null?
                                                                        ls1809)
                                                                      ls1809
                                                                      (if (bound-id-member?437
                                                                            (car ls1809)
                                                                            ls2808)
                                                                          (difference629
                                                                            (cdr ls1809)
                                                                            ls2808)
                                                                          (cons
                                                                            (car ls1809)
                                                                            (difference629
                                                                              (cdr ls1809)
                                                                              ls2808))))))
                                                 (prefix-add630 (lambda (prefix-id805)
                                                                  ((lambda (prefix806)
                                                                     (lambda (id807)
                                                                       (datum->syntax-object
                                                                         id807
                                                                         (string->symbol
                                                                           (string-append
                                                                             prefix806
                                                                             (symbol->string
                                                                               (syntax-object->datum
                                                                                 id807)))))))
                                                                    (symbol->string
                                                                      (syntax-object->datum
                                                                        prefix-id805)))))
                                                 (prefix-drop631 (lambda (prefix-id799)
                                                                   ((lambda (prefix800)
                                                                      (lambda (id801)
                                                                        ((lambda (s802)
                                                                           ((lambda (np804
                                                                                     ns803)
                                                                              (begin
                                                                                (if (not (if (>= ns803
                                                                                                 np804)
                                                                                             (string=?
                                                                                               (substring
                                                                                                 s802
                                                                                                 '0
                                                                                                 np804)
                                                                                               prefix800)
                                                                                             '#f))
                                                                                    (syntax-error
                                                                                      id801
                                                                                      (string-append
                                                                                        '"missing expected prefix "
                                                                                        prefix800))
                                                                                    (void))
                                                                                (datum->syntax-object
                                                                                  id801
                                                                                  (string->symbol
                                                                                    (substring
                                                                                      s802
                                                                                      np804
                                                                                      ns803)))))
                                                                             (string-length
                                                                               prefix800)
                                                                             (string-length
                                                                               s802)))
                                                                          (symbol->string
                                                                            (syntax-object->datum
                                                                              id801)))))
                                                                     (symbol->string
                                                                       (syntax-object->datum
                                                                         prefix-id799)))))
                                                 (gen-mid632 (lambda (mid798)
                                                               (datum->syntax-object
                                                                 mid798
                                                                 (gensym))))
                                                 (modspec633 (lambda (m649
                                                                      exports?648)
                                                               ((lambda (tmp650)
                                                                  ((lambda (tmp651)
                                                                     (if tmp651
                                                                         (apply
                                                                           (lambda (orig653
                                                                                    import-only?652)
                                                                             ((lambda (tmp654)
                                                                                ((lambda (tmp655)
                                                                                   (if (if tmp655
                                                                                           (apply
                                                                                             (lambda (m657
                                                                                                      id656)
                                                                                               (andmap
                                                                                                 identifier?
                                                                                                 id656))
                                                                                             tmp655)
                                                                                           '#f)
                                                                                       (apply
                                                                                         (lambda (m660
                                                                                                  id659)
                                                                                           (call-with-values
                                                                                             (lambda ()
                                                                                               (modspec633
                                                                                                 m660
                                                                                                 '#f))
                                                                                             (lambda (mid663
                                                                                                      d662
                                                                                                      exports661)
                                                                                               ((lambda (tmp664)
                                                                                                  ((lambda (tmp665)
                                                                                                     (if tmp665
                                                                                                         (apply
                                                                                                           (lambda (d667
                                                                                                                    tmid666)
                                                                                                             (values
                                                                                                               mid663
                                                                                                               (list
                                                                                                                 '#(syntax-object begin ((top) #(ribcage #(d tmid) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                 (list
                                                                                                                   '#(syntax-object $module ((top) #(ribcage #(d tmid) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                   orig653
                                                                                                                   tmid666
                                                                                                                   id659
                                                                                                                   d667)
                                                                                                                 (list
                                                                                                                   '#(syntax-object $import ((top) #(ribcage #(d tmid) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                   orig653
                                                                                                                   import-only?652
                                                                                                                   tmid666))
                                                                                                               (if exports?648
                                                                                                                   id659
                                                                                                                   '#f)))
                                                                                                           tmp665)
                                                                                                         (syntax-error
                                                                                                           tmp664)))
                                                                                                    ($syntax-dispatch
                                                                                                      tmp664
                                                                                                      '(any any))))
                                                                                                 (list
                                                                                                   d662
                                                                                                   (gen-mid632
                                                                                                     mid663))))))
                                                                                         tmp655)
                                                                                       ((lambda (tmp670)
                                                                                          (if (if tmp670
                                                                                                  (apply
                                                                                                    (lambda (m672
                                                                                                             id671)
                                                                                                      (andmap
                                                                                                        identifier?
                                                                                                        id671))
                                                                                                    tmp670)
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (lambda (m675
                                                                                                         id674)
                                                                                                  (call-with-values
                                                                                                    (lambda ()
                                                                                                      (modspec633
                                                                                                        m675
                                                                                                        '#t))
                                                                                                    (lambda (mid678
                                                                                                             d677
                                                                                                             exports676)
                                                                                                      ((lambda (tmp679)
                                                                                                         ((lambda (tmp681)
                                                                                                            (if tmp681
                                                                                                                (apply
                                                                                                                  (lambda (d684
                                                                                                                           tmid683
                                                                                                                           id682)
                                                                                                                    (values
                                                                                                                      mid678
                                                                                                                      (list
                                                                                                                        '#(syntax-object begin ((top) #(ribcage #(d tmid id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                        (list
                                                                                                                          '#(syntax-object $module ((top) #(ribcage #(d tmid id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                          orig653
                                                                                                                          tmid683
                                                                                                                          id682
                                                                                                                          d684)
                                                                                                                        (list
                                                                                                                          '#(syntax-object $import ((top) #(ribcage #(d tmid id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                          orig653
                                                                                                                          import-only?652
                                                                                                                          tmid683))
                                                                                                                      (if exports?648
                                                                                                                          id682
                                                                                                                          '#f)))
                                                                                                                  tmp681)
                                                                                                                (syntax-error
                                                                                                                  tmp679)))
                                                                                                           ($syntax-dispatch
                                                                                                             tmp679
                                                                                                             '(any any
                                                                                                                   each-any))))
                                                                                                        (list
                                                                                                          d677
                                                                                                          (gen-mid632
                                                                                                            mid678)
                                                                                                          (difference629
                                                                                                            exports676
                                                                                                            id674))))))
                                                                                                tmp670)
                                                                                              ((lambda (tmp687)
                                                                                                 (if (if tmp687
                                                                                                         (apply
                                                                                                           (lambda (m689
                                                                                                                    prefix-id688)
                                                                                                             (identifier?
                                                                                                               prefix-id688))
                                                                                                           tmp687)
                                                                                                         '#f)
                                                                                                     (apply
                                                                                                       (lambda (m691
                                                                                                                prefix-id690)
                                                                                                         (call-with-values
                                                                                                           (lambda ()
                                                                                                             (modspec633
                                                                                                               m691
                                                                                                               '#t))
                                                                                                           (lambda (mid694
                                                                                                                    d693
                                                                                                                    exports692)
                                                                                                             ((lambda (tmp695)
                                                                                                                ((lambda (tmp696)
                                                                                                                   (if tmp696
                                                                                                                       (apply
                                                                                                                         (lambda (d701
                                                                                                                                  tmid700
                                                                                                                                  old-id699
                                                                                                                                  tmp698
                                                                                                                                  id697)
                                                                                                                           (values
                                                                                                                             mid694
                                                                                                                             (list
                                                                                                                               '#(syntax-object begin ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                               (cons
                                                                                                                                 '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                 (cons
                                                                                                                                   orig653
                                                                                                                                   (cons
                                                                                                                                     tmid700
                                                                                                                                     (cons
                                                                                                                                       (map list
                                                                                                                                            id697
                                                                                                                                            tmp698)
                                                                                                                                       (cons
                                                                                                                                         (cons
                                                                                                                                           '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                           (cons
                                                                                                                                             orig653
                                                                                                                                             (cons
                                                                                                                                               tmid700
                                                                                                                                               (cons
                                                                                                                                                 (map list
                                                                                                                                                      tmp698
                                                                                                                                                      old-id699)
                                                                                                                                                 (cons
                                                                                                                                                   d701
                                                                                                                                                   (map (lambda (tmp708
                                                                                                                                                                 tmp707)
                                                                                                                                                          (list
                                                                                                                                                            '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                            tmp707
                                                                                                                                                            tmp708))
                                                                                                                                                        old-id699
                                                                                                                                                        tmp698))))))
                                                                                                                                         (cons
                                                                                                                                           (list
                                                                                                                                             '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                             orig653
                                                                                                                                             import-only?652
                                                                                                                                             tmid700)
                                                                                                                                           (map (lambda (tmp710
                                                                                                                                                         tmp709)
                                                                                                                                                  (list
                                                                                                                                                    '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                    tmp709
                                                                                                                                                    tmp710))
                                                                                                                                                tmp698
                                                                                                                                                id697)))))))
                                                                                                                               (list
                                                                                                                                 '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                 orig653
                                                                                                                                 import-only?652
                                                                                                                                 tmid700))
                                                                                                                             (if exports?648
                                                                                                                                 id697
                                                                                                                                 '#f)))
                                                                                                                         tmp696)
                                                                                                                       (syntax-error
                                                                                                                         tmp695)))
                                                                                                                  ($syntax-dispatch
                                                                                                                    tmp695
                                                                                                                    '(any any
                                                                                                                          each-any
                                                                                                                          each-any
                                                                                                                          each-any))))
                                                                                                               (list
                                                                                                                 d693
                                                                                                                 (gen-mid632
                                                                                                                   mid694)
                                                                                                                 exports692
                                                                                                                 (generate-temporaries
                                                                                                                   exports692)
                                                                                                                 (map (prefix-add630
                                                                                                                        prefix-id690)
                                                                                                                      exports692))))))
                                                                                                       tmp687)
                                                                                                     ((lambda (tmp711)
                                                                                                        (if (if tmp711
                                                                                                                (apply
                                                                                                                  (lambda (m713
                                                                                                                           prefix-id712)
                                                                                                                    (identifier?
                                                                                                                      prefix-id712))
                                                                                                                  tmp711)
                                                                                                                '#f)
                                                                                                            (apply
                                                                                                              (lambda (m715
                                                                                                                       prefix-id714)
                                                                                                                (call-with-values
                                                                                                                  (lambda ()
                                                                                                                    (modspec633
                                                                                                                      m715
                                                                                                                      '#t))
                                                                                                                  (lambda (mid718
                                                                                                                           d717
                                                                                                                           exports716)
                                                                                                                    ((lambda (tmp719)
                                                                                                                       ((lambda (tmp720)
                                                                                                                          (if tmp720
                                                                                                                              (apply
                                                                                                                                (lambda (d725
                                                                                                                                         tmid724
                                                                                                                                         old-id723
                                                                                                                                         tmp722
                                                                                                                                         id721)
                                                                                                                                  (values
                                                                                                                                    mid718
                                                                                                                                    (list
                                                                                                                                      '#(syntax-object begin ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                      (cons
                                                                                                                                        '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                        (cons
                                                                                                                                          orig653
                                                                                                                                          (cons
                                                                                                                                            tmid724
                                                                                                                                            (cons
                                                                                                                                              (map list
                                                                                                                                                   id721
                                                                                                                                                   tmp722)
                                                                                                                                              (cons
                                                                                                                                                (cons
                                                                                                                                                  '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                  (cons
                                                                                                                                                    orig653
                                                                                                                                                    (cons
                                                                                                                                                      tmid724
                                                                                                                                                      (cons
                                                                                                                                                        (map list
                                                                                                                                                             tmp722
                                                                                                                                                             old-id723)
                                                                                                                                                        (cons
                                                                                                                                                          d725
                                                                                                                                                          (map (lambda (tmp732
                                                                                                                                                                        tmp731)
                                                                                                                                                                 (list
                                                                                                                                                                   '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                   tmp731
                                                                                                                                                                   tmp732))
                                                                                                                                                               old-id723
                                                                                                                                                               tmp722))))))
                                                                                                                                                (cons
                                                                                                                                                  (list
                                                                                                                                                    '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                    orig653
                                                                                                                                                    import-only?652
                                                                                                                                                    tmid724)
                                                                                                                                                  (map (lambda (tmp734
                                                                                                                                                                tmp733)
                                                                                                                                                         (list
                                                                                                                                                           '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                           tmp733
                                                                                                                                                           tmp734))
                                                                                                                                                       tmp722
                                                                                                                                                       id721)))))))
                                                                                                                                      (list
                                                                                                                                        '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                        orig653
                                                                                                                                        import-only?652
                                                                                                                                        tmid724))
                                                                                                                                    (if exports?648
                                                                                                                                        id721
                                                                                                                                        '#f)))
                                                                                                                                tmp720)
                                                                                                                              (syntax-error
                                                                                                                                tmp719)))
                                                                                                                         ($syntax-dispatch
                                                                                                                           tmp719
                                                                                                                           '(any any
                                                                                                                                 each-any
                                                                                                                                 each-any
                                                                                                                                 each-any))))
                                                                                                                      (list
                                                                                                                        d717
                                                                                                                        (gen-mid632
                                                                                                                          mid718)
                                                                                                                        exports716
                                                                                                                        (generate-temporaries
                                                                                                                          exports716)
                                                                                                                        (map (prefix-drop631
                                                                                                                               prefix-id714)
                                                                                                                             exports716))))))
                                                                                                              tmp711)
                                                                                                            ((lambda (tmp735)
                                                                                                               (if (if tmp735
                                                                                                                       (apply
                                                                                                                         (lambda (m738
                                                                                                                                  new-id737
                                                                                                                                  old-id736)
                                                                                                                           (if (andmap
                                                                                                                                 identifier?
                                                                                                                                 new-id737)
                                                                                                                               (andmap
                                                                                                                                 identifier?
                                                                                                                                 old-id736)
                                                                                                                               '#f))
                                                                                                                         tmp735)
                                                                                                                       '#f)
                                                                                                                   (apply
                                                                                                                     (lambda (m743
                                                                                                                              new-id742
                                                                                                                              old-id741)
                                                                                                                       (call-with-values
                                                                                                                         (lambda ()
                                                                                                                           (modspec633
                                                                                                                             m743
                                                                                                                             '#t))
                                                                                                                         (lambda (mid746
                                                                                                                                  d745
                                                                                                                                  exports744)
                                                                                                                           ((lambda (tmp747)
                                                                                                                              ((lambda (tmp750)
                                                                                                                                 (if tmp750
                                                                                                                                     (apply
                                                                                                                                       (lambda (d754
                                                                                                                                                tmid753
                                                                                                                                                tmp752
                                                                                                                                                other-id751)
                                                                                                                                         (values
                                                                                                                                           mid746
                                                                                                                                           (list
                                                                                                                                             '#(syntax-object begin ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                             (cons
                                                                                                                                               '#(syntax-object $module ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                               (cons
                                                                                                                                                 orig653
                                                                                                                                                 (cons
                                                                                                                                                   tmid753
                                                                                                                                                   (cons
                                                                                                                                                     (append
                                                                                                                                                       (map list
                                                                                                                                                            new-id742
                                                                                                                                                            tmp752)
                                                                                                                                                       other-id751)
                                                                                                                                                     (cons
                                                                                                                                                       (cons
                                                                                                                                                         '#(syntax-object $module ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                         (cons
                                                                                                                                                           orig653
                                                                                                                                                           (cons
                                                                                                                                                             tmid753
                                                                                                                                                             (cons
                                                                                                                                                               (append
                                                                                                                                                                 other-id751
                                                                                                                                                                 (map list
                                                                                                                                                                      tmp752
                                                                                                                                                                      old-id741))
                                                                                                                                                               (cons
                                                                                                                                                                 d754
                                                                                                                                                                 (map (lambda (tmp764
                                                                                                                                                                               tmp763)
                                                                                                                                                                        (list
                                                                                                                                                                          '#(syntax-object alias ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                          tmp763
                                                                                                                                                                          tmp764))
                                                                                                                                                                      old-id741
                                                                                                                                                                      tmp752))))))
                                                                                                                                                       (cons
                                                                                                                                                         (list
                                                                                                                                                           '#(syntax-object $import ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                           orig653
                                                                                                                                                           import-only?652
                                                                                                                                                           tmid753)
                                                                                                                                                         (map (lambda (tmp766
                                                                                                                                                                       tmp765)
                                                                                                                                                                (list
                                                                                                                                                                  '#(syntax-object alias ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                  tmp765
                                                                                                                                                                  tmp766))
                                                                                                                                                              tmp752
                                                                                                                                                              new-id742)))))))
                                                                                                                                             (list
                                                                                                                                               '#(syntax-object $import ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                               orig653
                                                                                                                                               import-only?652
                                                                                                                                               tmid753))
                                                                                                                                           (if exports?648
                                                                                                                                               (append
                                                                                                                                                 new-id742
                                                                                                                                                 other-id751)
                                                                                                                                               '#f)))
                                                                                                                                       tmp750)
                                                                                                                                     (syntax-error
                                                                                                                                       tmp747)))
                                                                                                                                ($syntax-dispatch
                                                                                                                                  tmp747
                                                                                                                                  '(any any
                                                                                                                                        each-any
                                                                                                                                        each-any))))
                                                                                                                             (list
                                                                                                                               d745
                                                                                                                               (gen-mid632
                                                                                                                                 mid746)
                                                                                                                               (generate-temporaries
                                                                                                                                 old-id741)
                                                                                                                               (difference629
                                                                                                                                 exports744
                                                                                                                                 old-id741))))))
                                                                                                                     tmp735)
                                                                                                                   ((lambda (tmp767)
                                                                                                                      (if (if tmp767
                                                                                                                              (apply
                                                                                                                                (lambda (m770
                                                                                                                                         new-id769
                                                                                                                                         old-id768)
                                                                                                                                  (if (andmap
                                                                                                                                        identifier?
                                                                                                                                        new-id769)
                                                                                                                                      (andmap
                                                                                                                                        identifier?
                                                                                                                                        old-id768)
                                                                                                                                      '#f))
                                                                                                                                tmp767)
                                                                                                                              '#f)
                                                                                                                          (apply
                                                                                                                            (lambda (m775
                                                                                                                                     new-id774
                                                                                                                                     old-id773)
                                                                                                                              (call-with-values
                                                                                                                                (lambda ()
                                                                                                                                  (modspec633
                                                                                                                                    m775
                                                                                                                                    '#t))
                                                                                                                                (lambda (mid778
                                                                                                                                         d777
                                                                                                                                         exports776)
                                                                                                                                  ((lambda (tmp779)
                                                                                                                                     ((lambda (tmp780)
                                                                                                                                        (if tmp780
                                                                                                                                            (apply
                                                                                                                                              (lambda (d783
                                                                                                                                                       tmid782
                                                                                                                                                       other-id781)
                                                                                                                                                (values
                                                                                                                                                  mid778
                                                                                                                                                  (list
                                                                                                                                                    '#(syntax-object begin ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                    (cons
                                                                                                                                                      '#(syntax-object $module ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                      (cons
                                                                                                                                                        orig653
                                                                                                                                                        (cons
                                                                                                                                                          tmid782
                                                                                                                                                          (cons
                                                                                                                                                            (append
                                                                                                                                                              (map list
                                                                                                                                                                   new-id774
                                                                                                                                                                   old-id773)
                                                                                                                                                              other-id781)
                                                                                                                                                            (cons
                                                                                                                                                              d783
                                                                                                                                                              (map (lambda (tmp790
                                                                                                                                                                            tmp789)
                                                                                                                                                                     (list
                                                                                                                                                                       '#(syntax-object alias ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                       tmp789
                                                                                                                                                                       tmp790))
                                                                                                                                                                   old-id773
                                                                                                                                                                   new-id774))))))
                                                                                                                                                    (list
                                                                                                                                                      '#(syntax-object $import ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                      orig653
                                                                                                                                                      import-only?652
                                                                                                                                                      tmid782))
                                                                                                                                                  (if exports?648
                                                                                                                                                      (append
                                                                                                                                                        new-id774
                                                                                                                                                        other-id781)
                                                                                                                                                      '#f)))
                                                                                                                                              tmp780)
                                                                                                                                            (syntax-error
                                                                                                                                              tmp779)))
                                                                                                                                       ($syntax-dispatch
                                                                                                                                         tmp779
                                                                                                                                         '(any any
                                                                                                                                               each-any))))
                                                                                                                                    (list
                                                                                                                                      d777
                                                                                                                                      (gen-mid632
                                                                                                                                        mid778)
                                                                                                                                      exports776)))))
                                                                                                                            tmp767)
                                                                                                                          ((lambda (tmp791)
                                                                                                                             (if (if tmp791
                                                                                                                                     (apply
                                                                                                                                       (lambda (mid792)
                                                                                                                                         (identifier?
                                                                                                                                           mid792))
                                                                                                                                       tmp791)
                                                                                                                                     '#f)
                                                                                                                                 (apply
                                                                                                                                   (lambda (mid793)
                                                                                                                                     (values
                                                                                                                                       mid793
                                                                                                                                       (list
                                                                                                                                         '#(syntax-object $import ((top) #(ribcage #(mid) #((top)) #("i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                         orig653
                                                                                                                                         import-only?652
                                                                                                                                         mid793)
                                                                                                                                       (if exports?648
                                                                                                                                           ($module-exports622
                                                                                                                                             mid793
                                                                                                                                             r628)
                                                                                                                                           '#f)))
                                                                                                                                   tmp791)
                                                                                                                                 ((lambda (tmp794)
                                                                                                                                    (if (if tmp794
                                                                                                                                            (apply
                                                                                                                                              (lambda (mid795)
                                                                                                                                                (identifier?
                                                                                                                                                  mid795))
                                                                                                                                              tmp794)
                                                                                                                                            '#f)
                                                                                                                                        (apply
                                                                                                                                          (lambda (mid796)
                                                                                                                                            (values
                                                                                                                                              mid796
                                                                                                                                              (list
                                                                                                                                                '#(syntax-object $import ((top) #(ribcage #(mid) #((top)) #("i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                orig653
                                                                                                                                                import-only?652
                                                                                                                                                mid796)
                                                                                                                                              (if exports?648
                                                                                                                                                  ($module-exports622
                                                                                                                                                    mid796
                                                                                                                                                    r628)
                                                                                                                                                  '#f)))
                                                                                                                                          tmp794)
                                                                                                                                        ((lambda (_797)
                                                                                                                                           (syntax-error
                                                                                                                                             m649
                                                                                                                                             '"invalid module specifier"))
                                                                                                                                          tmp654)))
                                                                                                                                   ($syntax-dispatch
                                                                                                                                     tmp654
                                                                                                                                     '(any)))))
                                                                                                                            (list
                                                                                                                              tmp654))))
                                                                                                                     ($syntax-dispatch
                                                                                                                       tmp654
                                                                                                                       '(#(free-id
                                                                                                                           #(syntax-object alias ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                                          any
                                                                                                                          .
                                                                                                                          #(each
                                                                                                                            (any any)))))))
                                                                                                              ($syntax-dispatch
                                                                                                                tmp654
                                                                                                                '(#(free-id
                                                                                                                    #(syntax-object rename ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                                   any
                                                                                                                   .
                                                                                                                   #(each
                                                                                                                     (any any)))))))
                                                                                                       ($syntax-dispatch
                                                                                                         tmp654
                                                                                                         '(#(free-id
                                                                                                             #(syntax-object drop-prefix ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                            any
                                                                                                            any)))))
                                                                                                ($syntax-dispatch
                                                                                                  tmp654
                                                                                                  '(#(free-id
                                                                                                      #(syntax-object add-prefix ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                     any
                                                                                                     any)))))
                                                                                         ($syntax-dispatch
                                                                                           tmp654
                                                                                           '(#(free-id
                                                                                               #(syntax-object except ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                              any
                                                                                              .
                                                                                              each-any)))))
                                                                                  ($syntax-dispatch
                                                                                    tmp654
                                                                                    '(#(free-id
                                                                                        #(syntax-object only ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                       any
                                                                                       .
                                                                                       each-any))))
                                                                               m649))
                                                                           tmp651)
                                                                         (syntax-error
                                                                           tmp650)))
                                                                    ($syntax-dispatch
                                                                      tmp650
                                                                      '(any any))))
                                                                 (list
                                                                   orig627
                                                                   import-only?626))))
                                                 (modspec*634 (lambda (m644)
                                                                (call-with-values
                                                                  (lambda ()
                                                                    (modspec633
                                                                      m644
                                                                      '#f))
                                                                  (lambda (mid647
                                                                           d646
                                                                           exports645)
                                                                    d646)))))
                                          ((lambda (tmp635)
                                             ((lambda (tmp636)
                                                (if tmp636
                                                    (apply
                                                      (lambda (_638 m637)
                                                        ((lambda (tmp639)
                                                           ((lambda (tmp641)
                                                              (if tmp641
                                                                  (apply
                                                                    (lambda (d642)
                                                                      (cons
                                                                        '#(syntax-object begin ((top) #(ribcage #(d) #((top)) #("i")) #(ribcage #(_ m) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                        d642))
                                                                    tmp641)
                                                                  (syntax-error
                                                                    tmp639)))
                                                             ($syntax-dispatch
                                                               tmp639
                                                               'each-any)))
                                                          (map modspec*634
                                                               m637)))
                                                      tmp636)
                                                    (syntax-error tmp635)))
                                               ($syntax-dispatch
                                                 tmp635
                                                 '(any . each-any))))
                                            orig627))))))
            (begin
              (put-cte-hook141
                'import
                (lambda (orig625) ($import-help623 orig625 '#f)))
              (put-cte-hook141
                'import-only
                (lambda (orig624) ($import-help623 orig624 '#t)))))))
       (set! sc-expand
         ((lambda (ctem619 rtem618)
            (lambda (x620)
              ((lambda (env621)
                 (if (if (pair? x620) (equal? (car x620) noexpand62) '#f)
                     (cadr x620)
                     (chi-top*442 x620 '() (env-wrap383 env621) ctem619
                       rtem618 '#f (env-top-ribcage382 env621))))
                (interaction-environment))))
           '(e)
           '(e)))
       (set! $make-environment
         (lambda (token616 mutable?615)
           ((lambda (top-ribcage617)
              (make-env380
                top-ribcage617
                (make-wrap319
                  (wrap-marks320 '((top)))
                  (cons top-ribcage617 (wrap-subst321 '((top)))))))
             (make-top-ribcage368 token616 mutable?615))))
       (set! environment? (lambda (x614) (env?381 x614)))
       (set! interaction-environment
         ((lambda (e613) (lambda () e613))
           ($make-environment '*top* '#t)))
       (set! identifier? (lambda (x612) (nonsymbol-id?309 x612)))
       (set! datum->syntax-object
         (lambda (id610 datum609)
           (begin
             ((lambda (x611)
                (if (not (nonsymbol-id?309 x611))
                    (error-hook136
                      'datum->syntax-object
                      '"invalid argument"
                      x611)
                    (void)))
               id610)
             (make-syntax-object63
               datum609
               (syntax-object-wrap66 id610)))))
       (set! syntax->list
         (lambda (orig-ls600)
           ((letrec ((f601 (lambda (ls602)
                             ((lambda (tmp603)
                                ((lambda (tmp604)
                                   (if tmp604
                                       (apply (lambda () '()) tmp604)
                                       ((lambda (tmp605)
                                          (if tmp605
                                              (apply
                                                (lambda (x607 r606)
                                                  (cons x607 (f601 r606)))
                                                tmp605)
                                              ((lambda (_608)
                                                 (error 'syntax->list
                                                   '"invalid argument ~s"
                                                   orig-ls600))
                                                tmp603)))
                                         ($syntax-dispatch
                                           tmp603
                                           '(any . any)))))
                                  ($syntax-dispatch tmp603 '())))
                               ls602))))
              f601)
             orig-ls600)))
       (set! syntax->vector
         (lambda (v594)
           ((lambda (tmp595)
              ((lambda (tmp596)
                 (if tmp596
                     (apply
                       (lambda (x597) (apply vector (syntax->list x597)))
                       tmp596)
                     ((lambda (_599)
                        (error 'syntax->vector
                          '"invalid argument ~s"
                          v594))
                       tmp595)))
                ($syntax-dispatch tmp595 '#(vector each-any))))
             v594)))
       (set! syntax-object->datum
         (lambda (x593) (strip517 x593 '(()))))
       (set! generate-temporaries
         (lambda (ls590)
           (begin
             ((lambda (x592)
                (if (not (list? x592))
                    (error-hook136
                      'generate-temporaries
                      '"invalid argument"
                      x592)
                    (void)))
               ls590)
             (map (lambda (x591) (wrap438 (gensym) '((top)))) ls590))))
       (set! free-identifier=?
         (lambda (x587 y586)
           (begin
             ((lambda (x589)
                (if (not (nonsymbol-id?309 x589))
                    (error-hook136
                      'free-identifier=?
                      '"invalid argument"
                      x589)
                    (void)))
               x587)
             ((lambda (x588)
                (if (not (nonsymbol-id?309 x588))
                    (error-hook136
                      'free-identifier=?
                      '"invalid argument"
                      x588)
                    (void)))
               y586)
             (free-id=?430 x587 y586))))
       (set! bound-identifier=?
         (lambda (x583 y582)
           (begin
             ((lambda (x585)
                (if (not (nonsymbol-id?309 x585))
                    (error-hook136
                      'bound-identifier=?
                      '"invalid argument"
                      x585)
                    (void)))
               x583)
             ((lambda (x584)
                (if (not (nonsymbol-id?309 x584))
                    (error-hook136
                      'bound-identifier=?
                      '"invalid argument"
                      x584)
                    (void)))
               y582)
             (bound-id=?433 x583 y582))))
       (set! literal-identifier=?
         (lambda (x579 y578)
           (begin
             ((lambda (x581)
                (if (not (nonsymbol-id?309 x581))
                    (error-hook136
                      'literal-identifier=?
                      '"invalid argument"
                      x581)
                    (void)))
               x579)
             ((lambda (x580)
                (if (not (nonsymbol-id?309 x580))
                    (error-hook136
                      'literal-identifier=?
                      '"invalid argument"
                      x580)
                    (void)))
               y578)
             (literal-id=?431 x579 y578))))
       (set! syntax-error
         (lambda (object573 . messages574)
           (begin
             (for-each
               (lambda (x576)
                 ((lambda (x577)
                    (if (not (string? x577))
                        (error-hook136
                          'syntax-error
                          '"invalid argument"
                          x577)
                        (void)))
                   x576))
               messages574)
             ((lambda (message575)
                (error-hook136 '#f message575 (strip517 object573 '(()))))
               (if (null? messages574)
                   '"invalid syntax"
                   (apply string-append messages574))))))
       ((lambda ()
          (letrec ((match-each520 (lambda (e570 p569 w568)
                                    (if (annotation?132 e570)
                                        (match-each520
                                          (annotation-expression e570)
                                          p569
                                          w568)
                                        (if (pair? e570)
                                            ((lambda (first571)
                                               (if first571
                                                   ((lambda (rest572)
                                                      (if rest572
                                                          (cons
                                                            first571
                                                            rest572)
                                                          '#f))
                                                     (match-each520
                                                       (cdr e570)
                                                       p569
                                                       w568))
                                                   '#f))
                                              (match526
                                                (car e570)
                                                p569
                                                w568
                                                '()))
                                            (if (null? e570)
                                                '()
                                                (if (syntax-object?64 e570)
                                                    (match-each520
                                                      (syntax-object-expression65
                                                        e570)
                                                      p569
                                                      (join-wraps417
                                                        w568
                                                        (syntax-object-wrap66
                                                          e570)))
                                                    '#f))))))
                   (match-each+521 (lambda (e560 x-pat559 y-pat558 z-pat557
                                            w556 r555)
                                     ((letrec ((f561 (lambda (e563 w562)
                                                       (if (pair? e563)
                                                           (call-with-values
                                                             (lambda ()
                                                               (f561
                                                                 (cdr e563)
                                                                 w562))
                                                             (lambda (xr*566
                                                                      y-pat565
                                                                      r564)
                                                               (if r564
                                                                   (if (null?
                                                                         y-pat565)
                                                                       ((lambda (xr567)
                                                                          (if xr567
                                                                              (values
                                                                                (cons
                                                                                  xr567
                                                                                  xr*566)
                                                                                y-pat565
                                                                                r564)
                                                                              (values
                                                                                '#f
                                                                                '#f
                                                                                '#f)))
                                                                         (match526
                                                                           (car e563)
                                                                           x-pat559
                                                                           w562
                                                                           '()))
                                                                       (values
                                                                         '()
                                                                         (cdr y-pat565)
                                                                         (match526
                                                                           (car e563)
                                                                           (car y-pat565)
                                                                           w562
                                                                           r564)))
                                                                   (values
                                                                     '#f
                                                                     '#f
                                                                     '#f))))
                                                           (if (annotation?132
                                                                 e563)
                                                               (f561
                                                                 (annotation-expression
                                                                   e563)
                                                                 w562)
                                                               (if (syntax-object?64
                                                                     e563)
                                                                   (f561
                                                                     (syntax-object-expression65
                                                                       e563)
                                                                     (join-wraps417
                                                                       w562
                                                                       (syntax-object-wrap66
                                                                         e563)))
                                                                   (values
                                                                     '()
                                                                     y-pat558
                                                                     (match526
                                                                       e563
                                                                       z-pat557
                                                                       w562
                                                                       r555))))))))
                                        f561)
                                       e560
                                       w556)))
                   (match-each-any522 (lambda (e553 w552)
                                        (if (annotation?132 e553)
                                            (match-each-any522
                                              (annotation-expression e553)
                                              w552)
                                            (if (pair? e553)
                                                ((lambda (l554)
                                                   (if l554
                                                       (cons
                                                         (wrap438
                                                           (car e553)
                                                           w552)
                                                         l554)
                                                       '#f))
                                                  (match-each-any522
                                                    (cdr e553)
                                                    w552))
                                                (if (null? e553)
                                                    '()
                                                    (if (syntax-object?64
                                                          e553)
                                                        (match-each-any522
                                                          (syntax-object-expression65
                                                            e553)
                                                          (join-wraps417
                                                            w552
                                                            (syntax-object-wrap66
                                                              e553)))
                                                        '#f))))))
                   (match-empty523 (lambda (p550 r549)
                                     (if (null? p550)
                                         r549
                                         (if (eq? p550 'any)
                                             (cons '() r549)
                                             (if (pair? p550)
                                                 (match-empty523
                                                   (car p550)
                                                   (match-empty523
                                                     (cdr p550)
                                                     r549))
                                                 (if (eq? p550 'each-any)
                                                     (cons '() r549)
                                                     ((lambda (t551)
                                                        (if (memv
                                                              t551
                                                              '(each))
                                                            (match-empty523
                                                              (vector-ref
                                                                p550
                                                                '1)
                                                              r549)
                                                            (if (memv
                                                                  t551
                                                                  '(each+))
                                                                (match-empty523
                                                                  (vector-ref
                                                                    p550
                                                                    '1)
                                                                  (match-empty523
                                                                    (reverse
                                                                      (vector-ref
                                                                        p550
                                                                        '2))
                                                                    (match-empty523
                                                                      (vector-ref
                                                                        p550
                                                                        '3)
                                                                      r549)))
                                                                (if (memv
                                                                      t551
                                                                      '(free-id
                                                                         atom))
                                                                    r549
                                                                    (if (memv
                                                                          t551
                                                                          '(vector))
                                                                        (match-empty523
                                                                          (vector-ref
                                                                            p550
                                                                            '1)
                                                                          r549)
                                                                        (void))))))
                                                       (vector-ref
                                                         p550
                                                         '0))))))))
                   (combine524 (lambda (r*548 r547)
                                 (if (null? (car r*548))
                                     r547
                                     (cons
                                       (map car r*548)
                                       (combine524
                                         (map cdr r*548)
                                         r547)))))
                   (match*525 (lambda (e540 p539 w538 r537)
                                (if (null? p539)
                                    (if (null? e540) r537 '#f)
                                    (if (pair? p539)
                                        (if (pair? e540)
                                            (match526
                                              (car e540)
                                              (car p539)
                                              w538
                                              (match526
                                                (cdr e540)
                                                (cdr p539)
                                                w538
                                                r537))
                                            '#f)
                                        (if (eq? p539 'each-any)
                                            ((lambda (l541)
                                               (if l541
                                                   (cons l541 r537)
                                                   '#f))
                                              (match-each-any522
                                                e540
                                                w538))
                                            ((lambda (t542)
                                               (if (memv t542 '(each))
                                                   (if (null? e540)
                                                       (match-empty523
                                                         (vector-ref
                                                           p539
                                                           '1)
                                                         r537)
                                                       ((lambda (r*543)
                                                          (if r*543
                                                              (combine524
                                                                r*543
                                                                r537)
                                                              '#f))
                                                         (match-each520
                                                           e540
                                                           (vector-ref
                                                             p539
                                                             '1)
                                                           w538)))
                                                   (if (memv
                                                         t542
                                                         '(free-id))
                                                       (if (id?310 e540)
                                                           (if (literal-id=?431
                                                                 (wrap438
                                                                   e540
                                                                   w538)
                                                                 (vector-ref
                                                                   p539
                                                                   '1))
                                                               r537
                                                               '#f)
                                                           '#f)
                                                       (if (memv
                                                             t542
                                                             '(each+))
                                                           (call-with-values
                                                             (lambda ()
                                                               (match-each+521
                                                                 e540
                                                                 (vector-ref
                                                                   p539
                                                                   '1)
                                                                 (vector-ref
                                                                   p539
                                                                   '2)
                                                                 (vector-ref
                                                                   p539
                                                                   '3)
                                                                 w538
                                                                 r537))
                                                             (lambda (xr*546
                                                                      y-pat545
                                                                      r544)
                                                               (if r544
                                                                   (if (null?
                                                                         y-pat545)
                                                                       (if (null?
                                                                             xr*546)
                                                                           (match-empty523
                                                                             (vector-ref
                                                                               p539
                                                                               '1)
                                                                             r544)
                                                                           (combine524
                                                                             xr*546
                                                                             r544))
                                                                       '#f)
                                                                   '#f)))
                                                           (if (memv
                                                                 t542
                                                                 '(atom))
                                                               (if (equal?
                                                                     (vector-ref
                                                                       p539
                                                                       '1)
                                                                     (strip517
                                                                       e540
                                                                       w538))
                                                                   r537
                                                                   '#f)
                                                               (if (memv
                                                                     t542
                                                                     '(vector))
                                                                   (if (vector?
                                                                         e540)
                                                                       (match526
                                                                         (vector->list
                                                                           e540)
                                                                         (vector-ref
                                                                           p539
                                                                           '1)
                                                                         w538
                                                                         r537)
                                                                       '#f)
                                                                   (void)))))))
                                              (vector-ref p539 '0)))))))
                   (match526 (lambda (e534 p533 w532 r531)
                               (if (not r531)
                                   '#f
                                   (if (eq? p533 'any)
                                       (cons (wrap438 e534 w532) r531)
                                       (if (syntax-object?64 e534)
                                           (match*525
                                             ((lambda (e535)
                                                (if (annotation?132 e535)
                                                    (annotation-expression
                                                      e535)
                                                    e535))
                                               (syntax-object-expression65
                                                 e534))
                                             p533
                                             (join-wraps417
                                               w532
                                               (syntax-object-wrap66 e534))
                                             r531)
                                           (match*525
                                             ((lambda (e536)
                                                (if (annotation?132 e536)
                                                    (annotation-expression
                                                      e536)
                                                    e536))
                                               e534)
                                             p533
                                             w532
                                             r531)))))))
            (set! $syntax-dispatch
              (lambda (e528 p527)
                (if (eq? p527 'any)
                    (list e528)
                    (if (syntax-object?64 e528)
                        (match*525
                          ((lambda (e529)
                             (if (annotation?132 e529)
                                 (annotation-expression e529)
                                 e529))
                            (syntax-object-expression65 e528))
                          p527
                          (syntax-object-wrap66 e528)
                          '())
                        (match*525
                          ((lambda (e530)
                             (if (annotation?132 e530)
                                 (annotation-expression e530)
                                 e530))
                            e528)
                          p527
                          '(())
                          '()))))))))))))

)

($sc-put-cte
  '#(syntax-object with-syntax ((top) #(ribcage #(with-syntax) #((top)) #(with-syntax))))
  (lambda (x2524)
    ((lambda (tmp2525)
       ((lambda (tmp2526)
          (if tmp2526
              (apply
                (lambda (_2529 e12528 e22527)
                  (cons
                    '#(syntax-object begin ((top) #(ribcage #(_ e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                    (cons e12528 e22527)))
                tmp2526)
              ((lambda (tmp2531)
                 (if tmp2531
                     (apply
                       (lambda (_2536 out2535 in2534 e12533 e22532)
                         (list
                           '#(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                           in2534
                           '()
                           (list
                             out2535
                             (cons
                               '#(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                               (cons e12533 e22532)))))
                       tmp2531)
                     ((lambda (tmp2538)
                        (if tmp2538
                            (apply
                              (lambda (_2543 out2542 in2541 e12540 e22539)
                                (list
                                  '#(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                  (cons
                                    '#(syntax-object list ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    in2541)
                                  '()
                                  (list
                                    out2542
                                    (cons
                                      '#(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      (cons e12540 e22539)))))
                              tmp2538)
                            (syntax-error tmp2525)))
                       ($syntax-dispatch
                         tmp2525
                         '(any #(each (any any)) any . each-any)))))
                ($syntax-dispatch
                  tmp2525
                  '(any ((any any)) any . each-any)))))
         ($syntax-dispatch tmp2525 '(any () any . each-any))))
      x2524))
  '*top*)
($sc-put-cte
  '#(syntax-object with-implicit ((top) #(ribcage #(with-implicit) #((top)) #(with-implicit))))
  (lambda (x2547)
    ((lambda (tmp2548)
       ((lambda (tmp2549)
          (if (if tmp2549
                  (apply
                    (lambda (dummy2554 tid2553 id2552 e12551 e22550)
                      (andmap identifier? (cons tid2553 id2552)))
                    tmp2549)
                  '#f)
              (apply
                (lambda (dummy2560 tid2559 id2558 e12557 e22556)
                  (list
                    '#(syntax-object begin ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    (list
                      '#(syntax-object unless ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      (list
                        '#(syntax-object identifier? ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        (list
                          '#(syntax-object syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                          tid2559))
                      (cons
                        '#(syntax-object syntax-error ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        (cons
                          (list
                            '#(syntax-object syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                            tid2559)
                          '#(syntax-object ("non-identifier with-implicit template") ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))))
                    (cons
                      '#(syntax-object with-syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      (cons
                        (map (lambda (tmp2561)
                               (list
                                 tmp2561
                                 (list
                                   '#(syntax-object datum->syntax-object ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   (list
                                     '#(syntax-object syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                     tid2559)
                                   (list
                                     '#(syntax-object quote ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                     tmp2561))))
                             id2558)
                        (cons e12557 e22556)))))
                tmp2549)
              (syntax-error tmp2548)))
         ($syntax-dispatch
           tmp2548
           '(any (any . each-any) any . each-any))))
      x2547))
  '*top*)
($sc-put-cte
  '#(syntax-object datum ((top) #(ribcage #(datum) #((top)) #(datum))))
  (lambda (x2563)
    ((lambda (tmp2564)
       ((lambda (tmp2565)
          (if tmp2565
              (apply
                (lambda (dummy2567 x2566)
                  (list
                    '#(syntax-object syntax-object->datum ((top) #(ribcage #(dummy x) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    (list
                      '#(syntax-object syntax ((top) #(ribcage #(dummy x) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      x2566)))
                tmp2565)
              (syntax-error tmp2564)))
         ($syntax-dispatch tmp2564 '(any any))))
      x2563))
  '*top*)
($sc-put-cte
  '#(syntax-object syntax-rules ((top) #(ribcage #(syntax-rules) #((top)) #(syntax-rules))))
  (lambda (x2568)
    (letrec ((clause2569 (lambda (y2585)
                           ((lambda (tmp2586)
                              ((lambda (tmp2587)
                                 (if tmp2587
                                     (apply
                                       (lambda (keyword2590 pattern2589
                                                template2588)
                                         (list
                                           (cons
                                             '#(syntax-object dummy ((top) #(ribcage #(keyword pattern template) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                             pattern2589)
                                           (list
                                             '#(syntax-object syntax ((top) #(ribcage #(keyword pattern template) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                             template2588)))
                                       tmp2587)
                                     ((lambda (tmp2591)
                                        (if tmp2591
                                            (apply
                                              (lambda (keyword2595
                                                       pattern2594
                                                       fender2593
                                                       template2592)
                                                (list
                                                  (cons
                                                    '#(syntax-object dummy ((top) #(ribcage #(keyword pattern fender template) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    pattern2594)
                                                  fender2593
                                                  (list
                                                    '#(syntax-object syntax ((top) #(ribcage #(keyword pattern fender template) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    template2592)))
                                              tmp2591)
                                            ((lambda (_2596)
                                               (syntax-error x2568))
                                              tmp2586)))
                                       ($syntax-dispatch
                                         tmp2586
                                         '((any . any) any any)))))
                                ($syntax-dispatch
                                  tmp2586
                                  '((any . any) any))))
                             y2585))))
      ((lambda (tmp2570)
         ((lambda (tmp2571)
            (if (if tmp2571
                    (apply
                      (lambda (_2574 k2573 cl2572)
                        (andmap identifier? k2573))
                      tmp2571)
                    '#f)
                (apply
                  (lambda (_2578 k2577 cl2576)
                    ((lambda (tmp2579)
                       ((lambda (tmp2581)
                          (if tmp2581
                              (apply
                                (lambda (cl2582)
                                  (list
                                    '#(syntax-object lambda ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    '#(syntax-object (x) ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    (cons
                                      '#(syntax-object syntax-case ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      (cons
                                        '#(syntax-object x ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                        (cons k2577 cl2582)))))
                                tmp2581)
                              (syntax-error tmp2579)))
                         ($syntax-dispatch tmp2579 'each-any)))
                      (map clause2569 cl2576)))
                  tmp2571)
                (syntax-error tmp2570)))
           ($syntax-dispatch tmp2570 '(any each-any . each-any))))
        x2568)))
  '*top*)
($sc-put-cte
  '#(syntax-object or ((top) #(ribcage #(or) #((top)) #(or))))
  (lambda (x2597)
    ((lambda (tmp2598)
       ((lambda (tmp2599)
          (if tmp2599
              (apply
                (lambda (_2600)
                  '#(syntax-object #f ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                tmp2599)
              ((lambda (tmp2601)
                 (if tmp2601
                     (apply (lambda (_2603 e2602) e2602) tmp2601)
                     ((lambda (tmp2604)
                        (if tmp2604
                            (apply
                              (lambda (_2608 e12607 e22606 e32605)
                                (list
                                  '#(syntax-object let ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                  (list
                                    (list
                                      '#(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      e12607))
                                  (list
                                    '#(syntax-object if ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    '#(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    '#(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    (cons
                                      '#(syntax-object or ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      (cons e22606 e32605)))))
                              tmp2604)
                            (syntax-error tmp2598)))
                       ($syntax-dispatch
                         tmp2598
                         '(any any any . each-any)))))
                ($syntax-dispatch tmp2598 '(any any)))))
         ($syntax-dispatch tmp2598 '(any))))
      x2597))
  '*top*)
($sc-put-cte
  '#(syntax-object and ((top) #(ribcage #(and) #((top)) #(and))))
  (lambda (x2610)
    ((lambda (tmp2611)
       ((lambda (tmp2612)
          (if tmp2612
              (apply
                (lambda (_2616 e12615 e22614 e32613)
                  (cons
                    '#(syntax-object if ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                    (cons
                      e12615
                      (cons
                        (cons
                          '#(syntax-object and ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                          (cons e22614 e32613))
                        '#(syntax-object (#f) ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))))))
                tmp2612)
              ((lambda (tmp2618)
                 (if tmp2618
                     (apply (lambda (_2620 e2619) e2619) tmp2618)
                     ((lambda (tmp2621)
                        (if tmp2621
                            (apply
                              (lambda (_2622)
                                '#(syntax-object #t ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                              tmp2621)
                            (syntax-error tmp2611)))
                       ($syntax-dispatch tmp2611 '(any)))))
                ($syntax-dispatch tmp2611 '(any any)))))
         ($syntax-dispatch tmp2611 '(any any any . each-any))))
      x2610))
  '*top*)
($sc-put-cte
  '#(syntax-object let ((top) #(ribcage #(let) #((top)) #(let))))
  (lambda (x2623)
    ((lambda (tmp2624)
       ((lambda (tmp2625)
          (if (if tmp2625
                  (apply
                    (lambda (_2630 x2629 v2628 e12627 e22626)
                      (andmap identifier? x2629))
                    tmp2625)
                  '#f)
              (apply
                (lambda (_2636 x2635 v2634 e12633 e22632)
                  (cons
                    (cons
                      '#(syntax-object lambda ((top) #(ribcage #(_ x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                      (cons x2635 (cons e12633 e22632)))
                    v2634))
                tmp2625)
              ((lambda (tmp2640)
                 (if (if tmp2640
                         (apply
                           (lambda (_2646 f2645 x2644 v2643 e12642 e22641)
                             (andmap identifier? (cons f2645 x2644)))
                           tmp2640)
                         '#f)
                     (apply
                       (lambda (_2653 f2652 x2651 v2650 e12649 e22648)
                         (cons
                           (list
                             '#(syntax-object letrec ((top) #(ribcage #(_ f x v e1 e2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                             (list
                               (list
                                 f2652
                                 (cons
                                   '#(syntax-object lambda ((top) #(ribcage #(_ f x v e1 e2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                   (cons x2651 (cons e12649 e22648)))))
                             f2652)
                           v2650))
                       tmp2640)
                     (syntax-error tmp2624)))
                ($syntax-dispatch
                  tmp2624
                  '(any any #(each (any any)) any . each-any)))))
         ($syntax-dispatch
           tmp2624
           '(any #(each (any any)) any . each-any))))
      x2623))
  '*top*)
($sc-put-cte
  '#(syntax-object let* ((top) #(ribcage #(let*) #((top)) #(let*))))
  (lambda (x2657)
    ((lambda (tmp2658)
       ((lambda (tmp2659)
          (if (if tmp2659
                  (apply
                    (lambda (let*2664 x2663 v2662 e12661 e22660)
                      (andmap identifier? x2663))
                    tmp2659)
                  '#f)
              (apply
                (lambda (let*2670 x2669 v2668 e12667 e22666)
                  ((letrec ((f2671 (lambda (bindings2672)
                                     (if (null? bindings2672)
                                         (cons
                                           '#(syntax-object let ((top) #(ribcage () () ()) #(ribcage #(bindings) #((top)) #("i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                           (cons '() (cons e12667 e22666)))
                                         ((lambda (tmp2674)
                                            ((lambda (tmp2675)
                                               (if tmp2675
                                                   (apply
                                                     (lambda (body2677
                                                              binding2676)
                                                       (list
                                                         '#(syntax-object let ((top) #(ribcage #(body binding) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(bindings) #((top)) #("i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                         (list binding2676)
                                                         body2677))
                                                     tmp2675)
                                                   (syntax-error tmp2674)))
                                              ($syntax-dispatch
                                                tmp2674
                                                '(any any))))
                                           (list
                                             (f2671 (cdr bindings2672))
                                             (car bindings2672)))))))
                     f2671)
                    (map list x2669 v2668)))
                tmp2659)
              (syntax-error tmp2658)))
         ($syntax-dispatch
           tmp2658
           '(any #(each (any any)) any . each-any))))
      x2657))
  '*top*)
($sc-put-cte
  '#(syntax-object cond ((top) #(ribcage #(cond) #((top)) #(cond))))
  (lambda (x2680)
    ((lambda (tmp2681)
       ((lambda (tmp2682)
          (if tmp2682
              (apply
                (lambda (_2685 m12684 m22683)
                  ((letrec ((f2686 (lambda (clause2688 clauses2687)
                                     (if (null? clauses2687)
                                         ((lambda (tmp2689)
                                            ((lambda (tmp2690)
                                               (if tmp2690
                                                   (apply
                                                     (lambda (e12692
                                                              e22691)
                                                       (cons
                                                         '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                         (cons
                                                           e12692
                                                           e22691)))
                                                     tmp2690)
                                                   ((lambda (tmp2694)
                                                      (if tmp2694
                                                          (apply
                                                            (lambda (e02695)
                                                              (cons
                                                                '#(syntax-object let ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                (cons
                                                                  (list
                                                                    (list
                                                                      '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                      e02695))
                                                                  '#(syntax-object ((if t t)) ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))))
                                                            tmp2694)
                                                          ((lambda (tmp2696)
                                                             (if tmp2696
                                                                 (apply
                                                                   (lambda (e02698
                                                                            e12697)
                                                                     (list
                                                                       '#(syntax-object let ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                       (list
                                                                         (list
                                                                           '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                           e02698))
                                                                       (list
                                                                         '#(syntax-object if ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                         '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                         (cons
                                                                           e12697
                                                                           '#(syntax-object (t) ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))))))
                                                                   tmp2696)
                                                                 ((lambda (tmp2699)
                                                                    (if tmp2699
                                                                        (apply
                                                                          (lambda (e02702
                                                                                   e12701
                                                                                   e22700)
                                                                            (list
                                                                              '#(syntax-object if ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                              e02702
                                                                              (cons
                                                                                '#(syntax-object begin ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                                (cons
                                                                                  e12701
                                                                                  e22700))))
                                                                          tmp2699)
                                                                        ((lambda (_2704)
                                                                           (syntax-error
                                                                             x2680))
                                                                          tmp2689)))
                                                                   ($syntax-dispatch
                                                                     tmp2689
                                                                     '(any any
                                                                           .
                                                                           each-any)))))
                                                            ($syntax-dispatch
                                                              tmp2689
                                                              '(any #(free-id
                                                                      #(syntax-object => ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                                    any)))))
                                                     ($syntax-dispatch
                                                       tmp2689
                                                       '(any)))))
                                              ($syntax-dispatch
                                                tmp2689
                                                '(#(free-id
                                                    #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                   any
                                                   .
                                                   each-any))))
                                           clause2688)
                                         ((lambda (tmp2705)
                                            ((lambda (rest2706)
                                               ((lambda (tmp2707)
                                                  ((lambda (tmp2708)
                                                     (if tmp2708
                                                         (apply
                                                           (lambda (e02709)
                                                             (list
                                                               '#(syntax-object let ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                               (list
                                                                 (list
                                                                   '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   e02709))
                                                               (list
                                                                 '#(syntax-object if ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 rest2706)))
                                                           tmp2708)
                                                         ((lambda (tmp2710)
                                                            (if tmp2710
                                                                (apply
                                                                  (lambda (e02712
                                                                           e12711)
                                                                    (list
                                                                      '#(syntax-object let ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                      (list
                                                                        (list
                                                                          '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                          e02712))
                                                                      (list
                                                                        '#(syntax-object if ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                        '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                        (cons
                                                                          e12711
                                                                          '#(syntax-object (t) ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                                        rest2706)))
                                                                  tmp2710)
                                                                ((lambda (tmp2713)
                                                                   (if tmp2713
                                                                       (apply
                                                                         (lambda (e02716
                                                                                  e12715
                                                                                  e22714)
                                                                           (list
                                                                             '#(syntax-object if ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                             e02716
                                                                             (cons
                                                                               '#(syntax-object begin ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                               (cons
                                                                                 e12715
                                                                                 e22714))
                                                                             rest2706))
                                                                         tmp2713)
                                                                       ((lambda (_2718)
                                                                          (syntax-error
                                                                            x2680))
                                                                         tmp2707)))
                                                                  ($syntax-dispatch
                                                                    tmp2707
                                                                    '(any any
                                                                          .
                                                                          each-any)))))
                                                           ($syntax-dispatch
                                                             tmp2707
                                                             '(any #(free-id
                                                                     #(syntax-object => ((top) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                                   any)))))
                                                    ($syntax-dispatch
                                                      tmp2707
                                                      '(any))))
                                                 clause2688))
                                              tmp2705))
                                           (f2686
                                             (car clauses2687)
                                             (cdr clauses2687)))))))
                     f2686)
                    m12684
                    m22683))
                tmp2682)
              (syntax-error tmp2681)))
         ($syntax-dispatch tmp2681 '(any any . each-any))))
      x2680))
  '*top*)
($sc-put-cte
  '#(syntax-object do ((top) #(ribcage #(do) #((top)) #(do))))
  (lambda (orig-x2720)
    ((lambda (tmp2721)
       ((lambda (tmp2722)
          (if tmp2722
              (apply
                (lambda (_2729 var2728 init2727 step2726 e02725 e12724
                         c2723)
                  ((lambda (tmp2730)
                     ((lambda (tmp2740)
                        (if tmp2740
                            (apply
                              (lambda (step2741)
                                ((lambda (tmp2742)
                                   ((lambda (tmp2744)
                                      (if tmp2744
                                          (apply
                                            (lambda ()
                                              (list
                                                '#(syntax-object let ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                '#(syntax-object do ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                (map list var2728 init2727)
                                                (list
                                                  '#(syntax-object if ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                  (list
                                                    '#(syntax-object not ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    e02725)
                                                  (cons
                                                    '#(syntax-object begin ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    (append
                                                      c2723
                                                      (list
                                                        (cons
                                                          '#(syntax-object do ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                          step2741)))))))
                                            tmp2744)
                                          ((lambda (tmp2749)
                                             (if tmp2749
                                                 (apply
                                                   (lambda (e12751 e22750)
                                                     (list
                                                       '#(syntax-object let ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                       '#(syntax-object do ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                       (map list
                                                            var2728
                                                            init2727)
                                                       (list
                                                         '#(syntax-object if ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                         e02725
                                                         (cons
                                                           '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                           (cons
                                                             e12751
                                                             e22750))
                                                         (cons
                                                           '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                           (append
                                                             c2723
                                                             (list
                                                               (cons
                                                                 '#(syntax-object do ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 step2741)))))))
                                                   tmp2749)
                                                 (syntax-error tmp2742)))
                                            ($syntax-dispatch
                                              tmp2742
                                              '(any . each-any)))))
                                     ($syntax-dispatch tmp2742 '())))
                                  e12724))
                              tmp2740)
                            (syntax-error tmp2730)))
                       ($syntax-dispatch tmp2730 'each-any)))
                    (map (lambda (v2734 s2733)
                           ((lambda (tmp2735)
                              ((lambda (tmp2736)
                                 (if tmp2736
                                     (apply (lambda () v2734) tmp2736)
                                     ((lambda (tmp2737)
                                        (if tmp2737
                                            (apply
                                              (lambda (e2738) e2738)
                                              tmp2737)
                                            ((lambda (_2739)
                                               (syntax-error orig-x2720))
                                              tmp2735)))
                                       ($syntax-dispatch tmp2735 '(any)))))
                                ($syntax-dispatch tmp2735 '())))
                             s2733))
                         var2728
                         step2726)))
                tmp2722)
              (syntax-error tmp2721)))
         ($syntax-dispatch
           tmp2721
           '(any #(each (any any . any))
                 (any . each-any)
                 .
                 each-any))))
      orig-x2720))
  '*top*)
($sc-put-cte
  '#(syntax-object quasiquote ((top) #(ribcage #(quasiquote) #((top)) #(quasiquote))))
  (letrec ((isquote?2766 (lambda (x2895)
                           (if (identifier? x2895)
                               (free-identifier=?
                                 x2895
                                 '#(syntax-object quote ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                               '#f)))
           (islist?2765 (lambda (x2894)
                          (if (identifier? x2894)
                              (free-identifier=?
                                x2894
                                '#(syntax-object list ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                              '#f)))
           (iscons?2764 (lambda (x2893)
                          (if (identifier? x2893)
                              (free-identifier=?
                                x2893
                                '#(syntax-object cons ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                              '#f)))
           (quote-nil?2763 (lambda (x2888)
                             ((lambda (tmp2889)
                                ((lambda (tmp2890)
                                   (if tmp2890
                                       (apply
                                         (lambda (quote?2891)
                                           (isquote?2766 quote?2891))
                                         tmp2890)
                                       ((lambda (_2892) '#f) tmp2889)))
                                  ($syntax-dispatch tmp2889 '(any ()))))
                               x2888)))
           (quasilist*2762 (lambda (x2885 y2884)
                             ((letrec ((f2886 (lambda (x2887)
                                                (if (null? x2887)
                                                    y2884
                                                    (quasicons2761
                                                      (car x2887)
                                                      (f2886
                                                        (cdr x2887)))))))
                                f2886)
                               x2885)))
           (quasicons2761 (lambda (x2860 y2859)
                            ((lambda (tmp2861)
                               ((lambda (tmp2862)
                                  (if tmp2862
                                      (apply
                                        (lambda (x2864 y2863)
                                          ((lambda (tmp2865)
                                             ((lambda (tmp2866)
                                                (if (if tmp2866
                                                        (apply
                                                          (lambda (quote?2868
                                                                   dy2867)
                                                            (isquote?2766
                                                              quote?2868))
                                                          tmp2866)
                                                        '#f)
                                                    (apply
                                                      (lambda (quote?2870
                                                               dy2869)
                                                        ((lambda (tmp2871)
                                                           ((lambda (tmp2872)
                                                              (if (if tmp2872
                                                                      (apply
                                                                        (lambda (quote?2874
                                                                                 dx2873)
                                                                          (isquote?2766
                                                                            quote?2874))
                                                                        tmp2872)
                                                                      '#f)
                                                                  (apply
                                                                    (lambda (quote?2876
                                                                             dx2875)
                                                                      (list
                                                                        '#(syntax-object quote ((top) #(ribcage #(quote? dx) #((top) (top)) #("i" "i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                        (cons
                                                                          dx2875
                                                                          dy2869)))
                                                                    tmp2872)
                                                                  ((lambda (_2877)
                                                                     (if (null?
                                                                           dy2869)
                                                                         (list
                                                                           '#(syntax-object list ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                           x2864)
                                                                         (list
                                                                           '#(syntax-object cons ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                           x2864
                                                                           y2863)))
                                                                    tmp2871)))
                                                             ($syntax-dispatch
                                                               tmp2871
                                                               '(any any))))
                                                          x2864))
                                                      tmp2866)
                                                    ((lambda (tmp2878)
                                                       (if (if tmp2878
                                                               (apply
                                                                 (lambda (listp2880
                                                                          stuff2879)
                                                                   (islist?2765
                                                                     listp2880))
                                                                 tmp2878)
                                                               '#f)
                                                           (apply
                                                             (lambda (listp2882
                                                                      stuff2881)
                                                               (cons
                                                                 '#(syntax-object list ((top) #(ribcage #(listp stuff) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                 (cons
                                                                   x2864
                                                                   stuff2881)))
                                                             tmp2878)
                                                           ((lambda (else2883)
                                                              (list
                                                                '#(syntax-object cons ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                x2864
                                                                y2863))
                                                             tmp2865)))
                                                      ($syntax-dispatch
                                                        tmp2865
                                                        '(any . any)))))
                                               ($syntax-dispatch
                                                 tmp2865
                                                 '(any any))))
                                            y2863))
                                        tmp2862)
                                      (syntax-error tmp2861)))
                                 ($syntax-dispatch tmp2861 '(any any))))
                              (list x2860 y2859))))
           (quasiappend2760 (lambda (x2851 y2850)
                              ((lambda (ls2852)
                                 (if (null? ls2852)
                                     '#(syntax-object (quote ()) ((top) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                     (if (null? (cdr ls2852))
                                         (car ls2852)
                                         ((lambda (tmp2853)
                                            ((lambda (tmp2854)
                                               (if tmp2854
                                                   (apply
                                                     (lambda (p2855)
                                                       (cons
                                                         '#(syntax-object append ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                         p2855))
                                                     tmp2854)
                                                   (syntax-error tmp2853)))
                                              ($syntax-dispatch
                                                tmp2853
                                                'each-any)))
                                           ls2852))))
                                ((letrec ((f2857 (lambda (x2858)
                                                   (if (null? x2858)
                                                       (if (quote-nil?2763
                                                             y2850)
                                                           '()
                                                           (list y2850))
                                                       (if (quote-nil?2763
                                                             (car x2858))
                                                           (f2857
                                                             (cdr x2858))
                                                           (cons
                                                             (car x2858)
                                                             (f2857
                                                               (cdr x2858))))))))
                                   f2857)
                                  x2851))))
           (quasivector2759 (lambda (x2813)
                              ((lambda (tmp2814)
                                 ((lambda (pat-x2815)
                                    ((lambda (tmp2816)
                                       ((lambda (tmp2817)
                                          (if (if tmp2817
                                                  (apply
                                                    (lambda (quote?2819
                                                             x2818)
                                                      (isquote?2766
                                                        quote?2819))
                                                    tmp2817)
                                                  '#f)
                                              (apply
                                                (lambda (quote?2821 x2820)
                                                  (list
                                                    '#(syntax-object quote ((top) #(ribcage #(quote? x) #((top) (top)) #("i" "i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                    (list->vector x2820)))
                                                tmp2817)
                                              ((lambda (_2823)
                                                 ((letrec ((f2824 (lambda (x2826
                                                                           k2825)
                                                                    ((lambda (tmp2827)
                                                                       ((lambda (tmp2828)
                                                                          (if (if tmp2828
                                                                                  (apply
                                                                                    (lambda (quote?2830
                                                                                             x2829)
                                                                                      (isquote?2766
                                                                                        quote?2830))
                                                                                    tmp2828)
                                                                                  '#f)
                                                                              (apply
                                                                                (lambda (quote?2832
                                                                                         x2831)
                                                                                  (k2825
                                                                                    (map (lambda (tmp2833)
                                                                                           (list
                                                                                             '#(syntax-object quote ((top) #(ribcage #(quote? x) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x k) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                             tmp2833))
                                                                                         x2831)))
                                                                                tmp2828)
                                                                              ((lambda (tmp2834)
                                                                                 (if (if tmp2834
                                                                                         (apply
                                                                                           (lambda (listp2836
                                                                                                    x2835)
                                                                                             (islist?2765
                                                                                               listp2836))
                                                                                           tmp2834)
                                                                                         '#f)
                                                                                     (apply
                                                                                       (lambda (listp2838
                                                                                                x2837)
                                                                                         (k2825
                                                                                           x2837))
                                                                                       tmp2834)
                                                                                     ((lambda (tmp2840)
                                                                                        (if (if tmp2840
                                                                                                (apply
                                                                                                  (lambda (cons?2843
                                                                                                           x2842
                                                                                                           y2841)
                                                                                                    (iscons?2764
                                                                                                      cons?2843))
                                                                                                  tmp2840)
                                                                                                '#f)
                                                                                            (apply
                                                                                              (lambda (cons?2846
                                                                                                       x2845
                                                                                                       y2844)
                                                                                                (f2824
                                                                                                  y2844
                                                                                                  (lambda (ls2847)
                                                                                                    (k2825
                                                                                                      (cons
                                                                                                        x2845
                                                                                                        ls2847)))))
                                                                                              tmp2840)
                                                                                            ((lambda (else2848)
                                                                                               (list
                                                                                                 '#(syntax-object list->vector ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x k) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                 pat-x2815))
                                                                                              tmp2827)))
                                                                                       ($syntax-dispatch
                                                                                         tmp2827
                                                                                         '(any any
                                                                                               any)))))
                                                                                ($syntax-dispatch
                                                                                  tmp2827
                                                                                  '(any .
                                                                                        each-any)))))
                                                                         ($syntax-dispatch
                                                                           tmp2827
                                                                           '(any each-any))))
                                                                      x2826))))
                                                    f2824)
                                                   x2813
                                                   (lambda (ls2849)
                                                     (cons
                                                       '#(syntax-object vector ((top) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                       ls2849))))
                                                tmp2816)))
                                         ($syntax-dispatch
                                           tmp2816
                                           '(any each-any))))
                                      pat-x2815))
                                   tmp2814))
                                x2813)))
           (vquasi2758 (lambda (p2797 lev2796)
                         ((lambda (tmp2798)
                            ((lambda (tmp2799)
                               (if tmp2799
                                   (apply
                                     (lambda (p2801 q2800)
                                       ((lambda (tmp2802)
                                          ((lambda (tmp2803)
                                             (if tmp2803
                                                 (apply
                                                   (lambda (p2804)
                                                     (if (fx= lev2796 '0)
                                                         (quasilist*2762
                                                           p2804
                                                           (vquasi2758
                                                             q2800
                                                             lev2796))
                                                         (quasicons2761
                                                           (quasicons2761
                                                             '#(syntax-object (quote unquote) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                             (quasi2757
                                                               p2804
                                                               (fx- lev2796
                                                                  '1)))
                                                           (vquasi2758
                                                             q2800
                                                             lev2796))))
                                                   tmp2803)
                                                 ((lambda (tmp2807)
                                                    (if tmp2807
                                                        (apply
                                                          (lambda (p2808)
                                                            (if (fx= lev2796
                                                                   '0)
                                                                (quasiappend2760
                                                                  p2808
                                                                  (vquasi2758
                                                                    q2800
                                                                    lev2796))
                                                                (quasicons2761
                                                                  (quasicons2761
                                                                    '#(syntax-object (quote unquote-splicing) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                    (quasi2757
                                                                      p2808
                                                                      (fx- lev2796
                                                                         '1)))
                                                                  (vquasi2758
                                                                    q2800
                                                                    lev2796))))
                                                          tmp2807)
                                                        ((lambda (p2811)
                                                           (quasicons2761
                                                             (quasi2757
                                                               p2811
                                                               lev2796)
                                                             (vquasi2758
                                                               q2800
                                                               lev2796)))
                                                          tmp2802)))
                                                   ($syntax-dispatch
                                                     tmp2802
                                                     '(#(free-id
                                                         #(syntax-object unquote-splicing ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                        .
                                                        each-any)))))
                                            ($syntax-dispatch
                                              tmp2802
                                              '(#(free-id
                                                  #(syntax-object unquote ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                 .
                                                 each-any))))
                                         p2801))
                                     tmp2799)
                                   ((lambda (tmp2812)
                                      (if tmp2812
                                          (apply
                                            (lambda ()
                                              '#(syntax-object (quote ()) ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                            tmp2812)
                                          (syntax-error tmp2798)))
                                     ($syntax-dispatch tmp2798 '()))))
                              ($syntax-dispatch tmp2798 '(any . any))))
                           p2797)))
           (quasi2757 (lambda (p2773 lev2772)
                        ((lambda (tmp2774)
                           ((lambda (tmp2775)
                              (if tmp2775
                                  (apply
                                    (lambda (p2776)
                                      (if (fx= lev2772 '0)
                                          p2776
                                          (quasicons2761
                                            '#(syntax-object (quote unquote) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                            (quasi2757
                                              (list p2776)
                                              (fx- lev2772 '1)))))
                                    tmp2775)
                                  ((lambda (tmp2777)
                                     (if tmp2777
                                         (apply
                                           (lambda (p2779 q2778)
                                             (if (fx= lev2772 '0)
                                                 (quasilist*2762
                                                   p2779
                                                   (quasi2757
                                                     q2778
                                                     lev2772))
                                                 (quasicons2761
                                                   (quasicons2761
                                                     '#(syntax-object (quote unquote) ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                     (quasi2757
                                                       p2779
                                                       (fx- lev2772 '1)))
                                                   (quasi2757
                                                     q2778
                                                     lev2772))))
                                           tmp2777)
                                         ((lambda (tmp2782)
                                            (if tmp2782
                                                (apply
                                                  (lambda (p2784 q2783)
                                                    (if (fx= lev2772 '0)
                                                        (quasiappend2760
                                                          p2784
                                                          (quasi2757
                                                            q2783
                                                            lev2772))
                                                        (quasicons2761
                                                          (quasicons2761
                                                            '#(syntax-object (quote unquote-splicing) ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                            (quasi2757
                                                              p2784
                                                              (fx- lev2772
                                                                 '1)))
                                                          (quasi2757
                                                            q2783
                                                            lev2772))))
                                                  tmp2782)
                                                ((lambda (tmp2787)
                                                   (if tmp2787
                                                       (apply
                                                         (lambda (p2788)
                                                           (quasicons2761
                                                             '#(syntax-object (quote quasiquote) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                             (quasi2757
                                                               (list p2788)
                                                               (+ lev2772
                                                                  '1))))
                                                         tmp2787)
                                                       ((lambda (tmp2789)
                                                          (if tmp2789
                                                              (apply
                                                                (lambda (p2791
                                                                         q2790)
                                                                  (quasicons2761
                                                                    (quasi2757
                                                                      p2791
                                                                      lev2772)
                                                                    (quasi2757
                                                                      q2790
                                                                      lev2772)))
                                                                tmp2789)
                                                              ((lambda (tmp2792)
                                                                 (if tmp2792
                                                                     (apply
                                                                       (lambda (x2793)
                                                                         (quasivector2759
                                                                           (vquasi2758
                                                                             x2793
                                                                             lev2772)))
                                                                       tmp2792)
                                                                     ((lambda (p2795)
                                                                        (list
                                                                          '#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                          p2795))
                                                                       tmp2774)))
                                                                ($syntax-dispatch
                                                                  tmp2774
                                                                  '#(vector
                                                                     each-any)))))
                                                         ($syntax-dispatch
                                                           tmp2774
                                                           '(any . any)))))
                                                  ($syntax-dispatch
                                                    tmp2774
                                                    '(#(free-id
                                                        #(syntax-object quasiquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                       any)))))
                                           ($syntax-dispatch
                                             tmp2774
                                             '((#(free-id
                                                  #(syntax-object unquote-splicing ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                 .
                                                 each-any)
                                                .
                                                any)))))
                                    ($syntax-dispatch
                                      tmp2774
                                      '((#(free-id
                                           #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                          .
                                          each-any)
                                         .
                                         any)))))
                             ($syntax-dispatch
                               tmp2774
                               '(#(free-id
                                   #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                  any))))
                          p2773))))
    (lambda (x2767)
      ((lambda (tmp2768)
         ((lambda (tmp2769)
            (if tmp2769
                (apply (lambda (_2771 e2770) (quasi2757 e2770 '0)) tmp2769)
                (syntax-error tmp2768)))
           ($syntax-dispatch tmp2768 '(any any))))
        x2767)))
  '*top*)
($sc-put-cte
  '#(syntax-object unquote ((top) #(ribcage #(unquote) #((top)) #(unquote))))
  (lambda (x2896) (syntax-error x2896 '"misplaced"))
  '*top*)
($sc-put-cte
  '#(syntax-object unquote-splicing ((top) #(ribcage #(unquote-splicing) #((top)) #(unquote-splicing))))
  (lambda (x2897) (syntax-error x2897 '"misplaced"))
  '*top*)
($sc-put-cte
  '#(syntax-object quasisyntax ((top) #(ribcage #(quasisyntax) #((top)) #(quasisyntax))))
  (lambda (x2898)
    (letrec ((qs2899 (lambda (q2950 n2949 b*2948 k2947)
                       ((lambda (tmp2951)
                          ((lambda (tmp2952)
                             (if tmp2952
                                 (apply
                                   (lambda (d2953)
                                     (qs2899
                                       d2953
                                       (+ n2949 '1)
                                       b*2948
                                       (lambda (b*2955 dnew2954)
                                         (k2947
                                           b*2955
                                           (if (eq? dnew2954 d2953)
                                               q2950
                                               ((lambda (tmp2956)
                                                  ((lambda (d2957)
                                                     (cons
                                                       '#(syntax-object quasisyntax ((top) #(ribcage #(d) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b* dnew) #((top) (top)) #("i" "i")) #(ribcage #(d) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                       d2957))
                                                    tmp2956))
                                                 dnew2954))))))
                                   tmp2952)
                                 ((lambda (tmp2958)
                                    (if (if tmp2958
                                            (apply
                                              (lambda (d2959)
                                                (not (fx= n2949 '0)))
                                              tmp2958)
                                            '#f)
                                        (apply
                                          (lambda (d2960)
                                            (qs2899
                                              d2960
                                              (fx- n2949 '1)
                                              b*2948
                                              (lambda (b*2962 dnew2961)
                                                (k2947
                                                  b*2962
                                                  (if (eq? dnew2961 d2960)
                                                      q2950
                                                      ((lambda (tmp2963)
                                                         ((lambda (d2964)
                                                            (cons
                                                              '#(syntax-object unsyntax ((top) #(ribcage #(d) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b* dnew) #((top) (top)) #("i" "i")) #(ribcage #(d) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                              d2964))
                                                           tmp2963))
                                                        dnew2961))))))
                                          tmp2958)
                                        ((lambda (tmp2965)
                                           (if (if tmp2965
                                                   (apply
                                                     (lambda (d2966)
                                                       (not (fx= n2949 '0)))
                                                     tmp2965)
                                                   '#f)
                                               (apply
                                                 (lambda (d2967)
                                                   (qs2899
                                                     d2967
                                                     (fx- n2949 '1)
                                                     b*2948
                                                     (lambda (b*2969
                                                              dnew2968)
                                                       (k2947
                                                         b*2969
                                                         (if (eq? dnew2968
                                                                  d2967)
                                                             q2950
                                                             ((lambda (tmp2970)
                                                                ((lambda (d2971)
                                                                   (cons
                                                                     '#(syntax-object unsyntax-splicing ((top) #(ribcage #(d) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b* dnew) #((top) (top)) #("i" "i")) #(ribcage #(d) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                     d2971))
                                                                  tmp2970))
                                                               dnew2968))))))
                                                 tmp2965)
                                               ((lambda (tmp2972)
                                                  (if (if tmp2972
                                                          (apply
                                                            (lambda (q2973)
                                                              (fx= n2949 '0))
                                                            tmp2972)
                                                          '#f)
                                                      (apply
                                                        (lambda (q2974)
                                                          ((lambda (tmp2975)
                                                             ((lambda (tmp2976)
                                                                (if tmp2976
                                                                    (apply
                                                                      (lambda (t2977)
                                                                        (k2947
                                                                          (cons
                                                                            (list
                                                                              t2977
                                                                              q2974)
                                                                            b*2948)
                                                                          t2977))
                                                                      tmp2976)
                                                                    (syntax-error
                                                                      tmp2975)))
                                                               ($syntax-dispatch
                                                                 tmp2975
                                                                 '(any))))
                                                            (generate-temporaries
                                                              (list
                                                                q2974))))
                                                        tmp2972)
                                                      ((lambda (tmp2978)
                                                         (if (if tmp2978
                                                                 (apply
                                                                   (lambda (q2980
                                                                            d2979)
                                                                     (fx= n2949
                                                                        '0))
                                                                   tmp2978)
                                                                 '#f)
                                                             (apply
                                                               (lambda (q2982
                                                                        d2981)
                                                                 (qs2899
                                                                   d2981
                                                                   n2949
                                                                   b*2948
                                                                   (lambda (b*2984
                                                                            dnew2983)
                                                                     ((lambda (tmp2985)
                                                                        ((lambda (tmp2987)
                                                                           (if tmp2987
                                                                               (apply
                                                                                 (lambda (t2988)
                                                                                   (k2947
                                                                                     (append
                                                                                       (map list
                                                                                            t2988
                                                                                            q2982)
                                                                                       b*2984)
                                                                                     ((lambda (tmp2989)
                                                                                        ((lambda (d2990)
                                                                                           (append
                                                                                             t2988
                                                                                             d2990))
                                                                                          tmp2989))
                                                                                       dnew2983)))
                                                                                 tmp2987)
                                                                               (syntax-error
                                                                                 tmp2985)))
                                                                          ($syntax-dispatch
                                                                            tmp2985
                                                                            'each-any)))
                                                                       (generate-temporaries
                                                                         q2982)))))
                                                               tmp2978)
                                                             ((lambda (tmp2994)
                                                                (if (if tmp2994
                                                                        (apply
                                                                          (lambda (q2996
                                                                                   d2995)
                                                                            (fx= n2949
                                                                               '0))
                                                                          tmp2994)
                                                                        '#f)
                                                                    (apply
                                                                      (lambda (q2998
                                                                               d2997)
                                                                        (qs2899
                                                                          d2997
                                                                          n2949
                                                                          b*2948
                                                                          (lambda (b*3000
                                                                                   dnew2999)
                                                                            ((lambda (tmp3001)
                                                                               ((lambda (tmp3003)
                                                                                  (if tmp3003
                                                                                      (apply
                                                                                        (lambda (t3004)
                                                                                          (k2947
                                                                                            (append
                                                                                              (map (lambda (tmp3014
                                                                                                            tmp3013)
                                                                                                     (list
                                                                                                       (cons
                                                                                                         tmp3013
                                                                                                         '(#(syntax-object ... ((top) #(ribcage #(t) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b* dnew) #((top) (top)) #("i" "i")) #(ribcage #(q d) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))))
                                                                                                       tmp3014))
                                                                                                   q2998
                                                                                                   t3004)
                                                                                              b*3000)
                                                                                            ((lambda (tmp3005)
                                                                                               ((lambda (tmp3007)
                                                                                                  (if tmp3007
                                                                                                      (apply
                                                                                                        (lambda (m3008)
                                                                                                          ((lambda (tmp3009)
                                                                                                             ((lambda (d3010)
                                                                                                                (append
                                                                                                                  (apply
                                                                                                                    append
                                                                                                                    m3008)
                                                                                                                  d3010))
                                                                                                               tmp3009))
                                                                                                            dnew2999))
                                                                                                        tmp3007)
                                                                                                      (syntax-error
                                                                                                        tmp3005)))
                                                                                                 ($syntax-dispatch
                                                                                                   tmp3005
                                                                                                   '#(each
                                                                                                      each-any))))
                                                                                              (map (lambda (tmp3006)
                                                                                                     (cons
                                                                                                       tmp3006
                                                                                                       '(#(syntax-object ... ((top) #(ribcage #(t) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b* dnew) #((top) (top)) #("i" "i")) #(ribcage #(q d) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))))
                                                                                                   t3004))))
                                                                                        tmp3003)
                                                                                      (syntax-error
                                                                                        tmp3001)))
                                                                                 ($syntax-dispatch
                                                                                   tmp3001
                                                                                   'each-any)))
                                                                              (generate-temporaries
                                                                                q2998)))))
                                                                      tmp2994)
                                                                    ((lambda (tmp3015)
                                                                       (if tmp3015
                                                                           (apply
                                                                             (lambda (a3017
                                                                                      d3016)
                                                                               (qs2899
                                                                                 a3017
                                                                                 n2949
                                                                                 b*2948
                                                                                 (lambda (b*3019
                                                                                          anew3018)
                                                                                   (qs2899
                                                                                     d3016
                                                                                     n2949
                                                                                     b*3019
                                                                                     (lambda (b*3021
                                                                                              dnew3020)
                                                                                       (k2947
                                                                                         b*3021
                                                                                         (if (if (eq? anew3018
                                                                                                      a3017)
                                                                                                 (eq? dnew3020
                                                                                                      d3016)
                                                                                                 '#f)
                                                                                             q2950
                                                                                             ((lambda (tmp3022)
                                                                                                ((lambda (tmp3023)
                                                                                                   (if tmp3023
                                                                                                       (apply
                                                                                                         (lambda (a3025
                                                                                                                  d3024)
                                                                                                           (cons
                                                                                                             a3025
                                                                                                             d3024))
                                                                                                         tmp3023)
                                                                                                       (syntax-error
                                                                                                         tmp3022)))
                                                                                                  ($syntax-dispatch
                                                                                                    tmp3022
                                                                                                    '(any any))))
                                                                                               (list
                                                                                                 anew3018
                                                                                                 dnew3020)))))))))
                                                                             tmp3015)
                                                                           ((lambda (tmp3026)
                                                                              (if tmp3026
                                                                                  (apply
                                                                                    (lambda (x3027)
                                                                                      (vqs2900
                                                                                        x3027
                                                                                        n2949
                                                                                        b*2948
                                                                                        (lambda (b*3029
                                                                                                 xnew*3028)
                                                                                          (k2947
                                                                                            b*3029
                                                                                            (if ((letrec ((same?3030 (lambda (x*3032
                                                                                                                              xnew*3031)
                                                                                                                       (if (null?
                                                                                                                             x*3032)
                                                                                                                           (null?
                                                                                                                             xnew*3031)
                                                                                                                           (if (not (null?
                                                                                                                                      xnew*3031))
                                                                                                                               (if (eq? (car x*3032)
                                                                                                                                        (car xnew*3031))
                                                                                                                                   (same?3030
                                                                                                                                     (cdr x*3032)
                                                                                                                                     (cdr xnew*3031))
                                                                                                                                   '#f)
                                                                                                                               '#f)))))
                                                                                                   same?3030)
                                                                                                  x3027
                                                                                                  xnew*3028)
                                                                                                q2950
                                                                                                ((lambda (tmp3034)
                                                                                                   ((lambda (tmp3035)
                                                                                                      (if tmp3035
                                                                                                          (apply
                                                                                                            (lambda (x3036)
                                                                                                              (list->vector
                                                                                                                x3036))
                                                                                                            tmp3035)
                                                                                                          (syntax-error
                                                                                                            tmp3034)))
                                                                                                     ($syntax-dispatch
                                                                                                       tmp3034
                                                                                                       'each-any)))
                                                                                                  xnew*3028))))))
                                                                                    tmp3026)
                                                                                  ((lambda (_3039)
                                                                                     (k2947
                                                                                       b*2948
                                                                                       q2950))
                                                                                    tmp2951)))
                                                                             ($syntax-dispatch
                                                                               tmp2951
                                                                               '#(vector
                                                                                  each-any)))))
                                                                      ($syntax-dispatch
                                                                        tmp2951
                                                                        '(any .
                                                                              any)))))
                                                               ($syntax-dispatch
                                                                 tmp2951
                                                                 '((#(free-id
                                                                      #(syntax-object unsyntax-splicing ((top) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                                     .
                                                                     each-any)
                                                                    .
                                                                    any)))))
                                                        ($syntax-dispatch
                                                          tmp2951
                                                          '((#(free-id
                                                               #(syntax-object unsyntax ((top) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                              .
                                                              each-any)
                                                             .
                                                             any)))))
                                                 ($syntax-dispatch
                                                   tmp2951
                                                   '(#(free-id
                                                       #(syntax-object unsyntax ((top) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                      any)))))
                                          ($syntax-dispatch
                                            tmp2951
                                            '(#(free-id
                                                #(syntax-object unsyntax-splicing ((top) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                               .
                                               any)))))
                                   ($syntax-dispatch
                                     tmp2951
                                     '(#(free-id
                                         #(syntax-object unsyntax ((top) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                        .
                                        any)))))
                            ($syntax-dispatch
                              tmp2951
                              '(#(free-id
                                  #(syntax-object quasisyntax ((top) #(ribcage () () ()) #(ribcage #(q n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                 .
                                 any))))
                         q2950)))
             (vqs2900 (lambda (x*2915 n2914 b*2913 k2912)
                        (if (null? x*2915)
                            (k2912 b*2913 '())
                            (vqs2900
                              (cdr x*2915)
                              n2914
                              b*2913
                              (lambda (b*2917 xnew*2916)
                                ((lambda (tmp2918)
                                   ((lambda (tmp2919)
                                      (if (if tmp2919
                                              (apply
                                                (lambda (q2920)
                                                  (fx= n2914 '0))
                                                tmp2919)
                                              '#f)
                                          (apply
                                            (lambda (q2921)
                                              ((lambda (tmp2922)
                                                 ((lambda (tmp2924)
                                                    (if tmp2924
                                                        (apply
                                                          (lambda (t2925)
                                                            (k2912
                                                              (append
                                                                (map list
                                                                     t2925
                                                                     q2921)
                                                                b*2917)
                                                              (append
                                                                t2925
                                                                xnew*2916)))
                                                          tmp2924)
                                                        (syntax-error
                                                          tmp2922)))
                                                   ($syntax-dispatch
                                                     tmp2922
                                                     'each-any)))
                                                (generate-temporaries
                                                  q2921)))
                                            tmp2919)
                                          ((lambda (tmp2929)
                                             (if (if tmp2929
                                                     (apply
                                                       (lambda (q2930)
                                                         (fx= n2914 '0))
                                                       tmp2929)
                                                     '#f)
                                                 (apply
                                                   (lambda (q2931)
                                                     ((lambda (tmp2932)
                                                        ((lambda (tmp2934)
                                                           (if tmp2934
                                                               (apply
                                                                 (lambda (t2935)
                                                                   (k2912
                                                                     (append
                                                                       (map (lambda (tmp2943
                                                                                     tmp2942)
                                                                              (list
                                                                                (cons
                                                                                  tmp2942
                                                                                  '(#(syntax-object ... ((top) #(ribcage #(t) #((top)) #("i")) #(ribcage #(q) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b* xnew*) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x* n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))))
                                                                                tmp2943))
                                                                            q2931
                                                                            t2935)
                                                                       b*2917)
                                                                     ((lambda (tmp2936)
                                                                        ((lambda (tmp2938)
                                                                           (if tmp2938
                                                                               (apply
                                                                                 (lambda (m2939)
                                                                                   (append
                                                                                     (apply
                                                                                       append
                                                                                       m2939)
                                                                                     xnew*2916))
                                                                                 tmp2938)
                                                                               (syntax-error
                                                                                 tmp2936)))
                                                                          ($syntax-dispatch
                                                                            tmp2936
                                                                            '#(each
                                                                               each-any))))
                                                                       (map (lambda (tmp2937)
                                                                              (cons
                                                                                tmp2937
                                                                                '(#(syntax-object ... ((top) #(ribcage #(t) #((top)) #("i")) #(ribcage #(q) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b* xnew*) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x* n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))))
                                                                            t2935))))
                                                                 tmp2934)
                                                               (syntax-error
                                                                 tmp2932)))
                                                          ($syntax-dispatch
                                                            tmp2932
                                                            'each-any)))
                                                       (generate-temporaries
                                                         q2931)))
                                                   tmp2929)
                                                 ((lambda (_2944)
                                                    (qs2899
                                                      (car x*2915)
                                                      n2914
                                                      b*2917
                                                      (lambda (b*2946
                                                               xnew2945)
                                                        (k2912
                                                          b*2946
                                                          (cons
                                                            xnew2945
                                                            xnew*2916)))))
                                                   tmp2918)))
                                            ($syntax-dispatch
                                              tmp2918
                                              '(#(free-id
                                                  #(syntax-object unsyntax-splicing ((top) #(ribcage () () ()) #(ribcage #(b* xnew*) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x* n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                 .
                                                 each-any)))))
                                     ($syntax-dispatch
                                       tmp2918
                                       '(#(free-id
                                           #(syntax-object unsyntax ((top) #(ribcage () () ()) #(ribcage #(b* xnew*) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x* n b* k) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                          .
                                          each-any))))
                                  (car x*2915))))))))
      ((lambda (tmp2901)
         ((lambda (tmp2902)
            (if tmp2902
                (apply
                  (lambda (_2904 x2903)
                    (qs2899
                      x2903
                      '0
                      '()
                      (lambda (b*2906 xnew2905)
                        (if (eq? xnew2905 x2903)
                            (list
                              '#(syntax-object syntax ((top) #(ribcage () () ()) #(ribcage #(b* xnew) #((top) (top)) #("i" "i")) #(ribcage #(_ x) #((top) (top)) #("i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                              x2903)
                            ((lambda (tmp2907)
                               ((lambda (tmp2908)
                                  (if tmp2908
                                      (apply
                                        (lambda (b2910 x2909)
                                          (list
                                            '#(syntax-object with-syntax ((top) #(ribcage #(b x) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(b* xnew) #((top) (top)) #("i" "i")) #(ribcage #(_ x) #((top) (top)) #("i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                            b2910
                                            (list
                                              '#(syntax-object syntax ((top) #(ribcage #(b x) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(b* xnew) #((top) (top)) #("i" "i")) #(ribcage #(_ x) #((top) (top)) #("i" "i")) #(ribcage (vqs qs) ((top) (top)) ("i" "i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                              x2909)))
                                        tmp2908)
                                      (syntax-error tmp2907)))
                                 ($syntax-dispatch
                                   tmp2907
                                   '(each-any any))))
                              (list b*2906 xnew2905))))))
                  tmp2902)
                (syntax-error tmp2901)))
           ($syntax-dispatch tmp2901 '(any any))))
        x2898)))
  '*top*)
($sc-put-cte
  '#(syntax-object unsyntax ((top) #(ribcage #(unsyntax) #((top)) #(unsyntax))))
  (lambda (x3040) (syntax-error x3040 '"misplaced"))
  '*top*)
($sc-put-cte
  '#(syntax-object unsyntax-splicing ((top) #(ribcage #(unsyntax-splicing) #((top)) #(unsyntax-splicing))))
  (lambda (x3041) (syntax-error x3041 '"misplaced"))
  '*top*)
($sc-put-cte
  '#(syntax-object include ((top) #(ribcage #(include) #((top)) #(include))))
  (lambda (x3042)
    (letrec ((read-file3043 (lambda (fn3054 k3053)
                              ((lambda (p3055)
                                 ((letrec ((f3056 (lambda ()
                                                    ((lambda (x3057)
                                                       (if (eof-object?
                                                             x3057)
                                                           (begin
                                                             (close-input-port
                                                               p3055)
                                                             '())
                                                           (cons
                                                             (datum->syntax-object
                                                               k3053
                                                               x3057)
                                                             (f3056))))
                                                      (read p3055)))))
                                    f3056)))
                                (open-input-file fn3054)))))
      ((lambda (tmp3044)
         ((lambda (tmp3045)
            (if tmp3045
                (apply
                  (lambda (k3047 filename3046)
                    ((lambda (fn3048)
                       ((lambda (tmp3049)
                          ((lambda (tmp3050)
                             (if tmp3050
                                 (apply
                                   (lambda (exp3051)
                                     (cons
                                       '#(syntax-object begin ((top) #(ribcage #(exp) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(fn) #((top)) #("i")) #(ribcage #(k filename) #((top) (top)) #("i" "i")) #(ribcage (read-file) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                       exp3051))
                                   tmp3050)
                                 (syntax-error tmp3049)))
                            ($syntax-dispatch tmp3049 'each-any)))
                         (read-file3043 fn3048 k3047)))
                      (syntax-object->datum filename3046)))
                  tmp3045)
                (syntax-error tmp3044)))
           ($syntax-dispatch tmp3044 '(any any))))
        x3042)))
  '*top*)
($sc-put-cte
  '#(syntax-object case ((top) #(ribcage #(case) #((top)) #(case))))
  (lambda (x3058)
    ((lambda (tmp3059)
       ((lambda (tmp3060)
          (if tmp3060
              (apply
                (lambda (_3064 e3063 m13062 m23061)
                  ((lambda (tmp3065)
                     ((lambda (body3092)
                        (list
                          '#(syntax-object let ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                          (list
                            (list
                              '#(syntax-object t ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                              e3063))
                          body3092))
                       tmp3065))
                    ((letrec ((f3066 (lambda (clause3068 clauses3067)
                                       (if (null? clauses3067)
                                           ((lambda (tmp3069)
                                              ((lambda (tmp3070)
                                                 (if tmp3070
                                                     (apply
                                                       (lambda (e13072
                                                                e23071)
                                                         (cons
                                                           '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                           (cons
                                                             e13072
                                                             e23071)))
                                                       tmp3070)
                                                     ((lambda (tmp3074)
                                                        (if tmp3074
                                                            (apply
                                                              (lambda (k3077
                                                                       e13076
                                                                       e23075)
                                                                (list
                                                                  '#(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                  (list
                                                                    '#(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                    '#(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                    (list
                                                                      '#(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                      k3077))
                                                                  (cons
                                                                    '#(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                    (cons
                                                                      e13076
                                                                      e23075))))
                                                              tmp3074)
                                                            ((lambda (_3080)
                                                               (syntax-error
                                                                 x3058))
                                                              tmp3069)))
                                                       ($syntax-dispatch
                                                         tmp3069
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any)))))
                                                ($syntax-dispatch
                                                  tmp3069
                                                  '(#(free-id
                                                      #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                     any
                                                     .
                                                     each-any))))
                                             clause3068)
                                           ((lambda (tmp3081)
                                              ((lambda (rest3082)
                                                 ((lambda (tmp3083)
                                                    ((lambda (tmp3084)
                                                       (if tmp3084
                                                           (apply
                                                             (lambda (k3087
                                                                      e13086
                                                                      e23085)
                                                               (list
                                                                 '#(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 (list
                                                                   '#(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   '#(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   (list
                                                                     '#(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                     k3087))
                                                                 (cons
                                                                   '#(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   (cons
                                                                     e13086
                                                                     e23085))
                                                                 rest3082))
                                                             tmp3084)
                                                           ((lambda (_3090)
                                                              (syntax-error
                                                                x3058))
                                                             tmp3083)))
                                                      ($syntax-dispatch
                                                        tmp3083
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any))))
                                                   clause3068))
                                                tmp3081))
                                             (f3066
                                               (car clauses3067)
                                               (cdr clauses3067)))))))
                       f3066)
                      m13062
                      m23061)))
                tmp3060)
              (syntax-error tmp3059)))
         ($syntax-dispatch tmp3059 '(any any any . each-any))))
      x3058))
  '*top*)
($sc-put-cte
  '#(syntax-object identifier-syntax ((top) #(ribcage #(identifier-syntax) #((top)) #(identifier-syntax))))
  (lambda (x3093)
    ((lambda (tmp3094)
       ((lambda (tmp3095)
          (if tmp3095
              (apply
                (lambda (dummy3097 e3096)
                  (list
                    '#(syntax-object lambda ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    '#(syntax-object (x) ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    (list
                      '#(syntax-object syntax-case ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      '#(syntax-object x ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      '()
                      (list
                        '#(syntax-object id ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        '#(syntax-object (identifier? (syntax id)) ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        (list
                          '#(syntax-object syntax ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                          e3096))
                      (list
                        '(#(syntax-object _ ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           #(syntax-object x ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           #(syntax-object ... ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))
                        (list
                          '#(syntax-object syntax ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                          (cons
                            e3096
                            '(#(syntax-object x ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               #(syntax-object ... ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))))))))
                tmp3095)
              ((lambda (tmp3098)
                 (if (if tmp3098
                         (apply
                           (lambda (dummy3104 id3103 exp13102 var3101
                                    val3100 exp23099)
                             (if (identifier? id3103)
                                 (identifier? var3101)
                                 '#f))
                           tmp3098)
                         '#f)
                     (apply
                       (lambda (dummy3110 id3109 exp13108 var3107 val3106
                                exp23105)
                         (list
                           '#(syntax-object cons ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           '#(syntax-object (quote macro!) ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           (list
                             '#(syntax-object lambda ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                             '#(syntax-object (x) ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                             (list
                               '#(syntax-object syntax-case ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               '#(syntax-object x ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               '#(syntax-object (set!) ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               (list
                                 (list
                                   '#(syntax-object set! ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   var3107
                                   val3106)
                                 (list
                                   '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   exp23105))
                               (list
                                 (cons
                                   id3109
                                   '(#(syntax-object x ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                      #(syntax-object ... ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))))
                                 (list
                                   '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   (cons
                                     exp13108
                                     '(#(syntax-object x ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                        #(syntax-object ... ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))))))
                               (list
                                 id3109
                                 (list
                                   '#(syntax-object identifier? ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   (list
                                     '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                     id3109))
                                 (list
                                   '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   exp13108))))))
                       tmp3098)
                     (syntax-error tmp3094)))
                ($syntax-dispatch
                  tmp3094
                  '(any (any any)
                        ((#(free-id
                            #(syntax-object set! ((top) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))
                           any
                           any)
                          any))))))
         ($syntax-dispatch tmp3094 '(any any))))
      x3093))
  '*top*)

(current-expand
  (lambda (x . args)
    (apply #%sc-expand (sc-expand x) args)))

(define syntax->datum syntax-object->datum)
(define datum->syntax datum->syntax-object)
