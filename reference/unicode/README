This directory contains a reference implementation for
the (rnrs unicode) library of R5.93RS, but still uses
the (r6rs unicode) syntax of R5.92RS.

This reference implementation consists of the following files:

    README              what you're reading

    unicode.sch         the (r6rs unicode) library
    unicode0.sch        definitions of general utility procedures
    unicode1.sch        definitions of the character procedures
    unicode2.sch        the word-breaking algorithm defined by UAX #29
    unicode3.sch        definitions of string casing and comparison procedures
    unicode4.sch        definitions of the four normalization procedures

    unicode-tests.sch   basic tests (not including normalization)
    check-wordbreaking.scm    tests of word boundaries (unicode2.sch)
    check-normalization.scm   tests of normalization (unicode4.sch)

    parseUCD.sch        almost-R5RS code to generate the tables
                            in unicode*.sch
    strategy.sch        definition of decision-strategy, which was used
                            to write several hand-coded unary predicates

    larceny.sch         for testing in Larceny v0.94

This version of the reference implementation should be
compatible with Unicode revision 5.0.0.  To change the
tables to support a more recent version of Unicode, see
parseUCD.sch.

To reduce the number of tables and to increase the speed
of certain operations, many numeric constants of revision
5.0.0 are hard-wired into the code; to find all such places
(except for ASCII characters, whose properties should never
change), search the unicode*.sch files for "FIXME" comments.
Most of the hard-wired constants were generated from Unicode
data files by the decision-strategy procedure defined in
strategy.sch, but some constants were obtained by inspecting
Unicode data files.

For license information, see the copyright files at the top
of each file.

This implementation is written in almost-R5.93RS Scheme, but
has been tested only in a pre-R6RS version of Larceny.

                                * * *

Enjoy!

William D Clinger
29 May 2007
