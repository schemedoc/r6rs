June 14 2007 8:00am-9:30am EDT 812-856-3600, PIN 001386#

0. finalize agenda (1 minute)

1. action items (1 minute)
   - complete adoption candidate by 6/30
   - complete (or cause completion) of reference implementations by 6/30
     Kent: Unicode, bytevector, numeric, enumeration, libraries/expander
     Matthew: records
     Mike: I/O
     Anton: hashtables, lists

2. should we allow (cond) and (case expr)?
   - what about (begin) as an expression?
     - presently disallowed
   - what about implicit begins?
     - implicit begin in do can already be empty
     - presently disallowed elsewhere

3. should (cond clause ... [<test>]) be required treat <test> as in
   tail position with respect to the cond expression and thus return all
   of the values that <test> returns?

4. the eqv? procedure is said to return #f if "obj1 and obj2 are rational
   numbers for which the = procedure returns #f".  should this be modified
   to include complex numbers whose real and imaginary parts are rational?

5. may (inexact x) return +inf.0 for large x?  the wording in the draft
   r6rs seems to preclude this, unless we take +inf.0 as a reasonably close
   approximation to all numbers greater than the largest representable
   non-infinite value.  so did r5rs, but r5rs did not account for +inf.0.

6. Should we include a rationale for why floor, ceiling, and round accept
   infinities and nan?

7. should (string->number "0/0") be allowed to raise an exception with
   condition type &assertion or return #f?  this case and similar cases
   aren't addressed by the current wording.  what's at stake is whether
   one can count on string->number returning a number or #f or whether
   one must be prepared to handle exceptions.

8. should set-port-position! on a given textual port require that pos
   argument be a position extractd by port-position for that port?

9. should the third arguments to fx+/carry and fx-/carry be restricted
   to 0 or 1? the implementation might be easier and more efficient.

10. arith.tex says that certain procedures can return either NaN or some
    meaningless flonums for some inputs.  is this a throwback to before we
    committed to requiring NaNs/infinities or implementation-restriction
    exceptions?  If so, should we require NaNs in these situations?  If not,
    we should define what "meaningless flonum" means.

11. can we not allow flexpt to take a negative first argument if its second
    is integer-valued?  Also, should we remove the mathematical definition
    of fl_1^fl_2 in terms of e and log, which seems unhelpful given the
    domains of the inputs?

12. should we specify that (exit #t) is a normal exit and
    (exit #f) is an abnormal exit, while leaving other explicit exit
    values unspecified?  there is presently no portable way to produce an
    abnormal exit.

13. must equal-hash terminate?

14. rename (rnrs i/o ...) to (rnrs io ...)?

15. rename `&i/o-file-exists-not' to `&i/o-does-not-exist'?

16. move identifier-syntax to (rnrs syntax-case (6))?

17. pimp the `utfXX->string' procedures?
    http://lists.r6rs.org/pipermail/r6rs-discuss/2007-May/002399.html

18. consider transcoder change?
    http://lists.r6rs.org/pipermail/r6rs-discuss/2007-June/002490.html

19. consider emnuerations change?
    http://lists.r6rs.org/pipermail/r6rs-discuss/2007-June/002492.html

20. consider name change?
    See https://r6rs.scheming.org/node/662

21. should we revisit (rnrs ... (6)) naming convention?
    - use rrs in place of rnrs?

22. adjourn
