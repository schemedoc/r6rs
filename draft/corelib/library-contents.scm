((library:r6rs-core
   &condition
   &error
   &message
   &non-continuable
   &serious
   &violation
   &warning
   |'|
   *
   +
   |,|
   |,@|
   -
   ->exact
   ->inexact
   /
   |;|
   <
   <=
   =
   =>
   >
   >=
   |`|
   abs
   acos
   and
   and
   angle
   append
   apply
   asin
   assoc
   assq
   assv
   atan
   begin
   boolean?
   caar
   cadr
   call-with-current-continuation
   call-with-values
   call/cc
   car
   case
   cdddar
   cddddr
   cdr
   ceiling
   char->integer
   char-alphabetic?
   char-ci<=?
   char-ci<?
   char-ci=?
   char-ci>=?
   char-ci>?
   char-downcase
   char-lower-case?
   char-numeric?
   char-ready?
   char-upcase
   char-upper-case?
   char-whitespace?
   char<=?
   char<?
   char=?
   char>=?
   char>?
   char?
   complex?
   cond
   condition
   condition-has-type?
   condition-ref
   condition-type?
   condition?
   cons
   cos
   define
   define-condition-type
   define-syntax
   denominator
   do
   dynamic-wind
   else
   eq?
   equal?
   eqv?
   even?
   exact?
   exp
   expt
   extract-condition
   floor
   for-each
   gcd
   guard
   if
   imag-part
   inexact?
   integer->char
   integer?
   lambda
   lcm
   length
   let
   let*
   let-syntax
   let-values
   letrec
   letrec*
   letrec-syntax
   letrec-values
   list
   list->string
   list->vector
   list-ref
   list-tail
   list?
   log
   magnitude
   make-compound-condition
   make-condition
   make-condition-type
   make-polar
   make-rectangular
   make-string
   make-vector
   map
   max
   member
   memq
   memv
   min
   negative?
   not
   null?
   number->string
   number?
   numerator
   odd?
   or
   or
   pair?
   positive?
   procedure?
   quasiquote
   quote
   raise
   raise-continuable
   rational?
   rationalize
   real-part
   real?
   reverse
   round
   set!
   set-car!
   set-cdr!
   sin
   sqrt
   string
   string->list
   string->number
   string->symbol
   string-append
   string-ci<=?
   string-ci<?
   string-ci=?
   string-ci>=?
   string-ci>?
   string-copy
   string-fill!
   string-length
   string-ref
   string-set!
   string<=?
   string<?
   string=?
   string>=?
   string>?
   string?
   substring
   symbol->string
   symbol?
   tan
   truncate
   unquote
   unquote-splicing
   values
   vector
   vector->list
   vector-fill!
   vector-length
   vector-ref
   vector-set!
   vector?
   with-exception-handler
   zero?)
 (library:syntax-rules ... syntax-rules)
 (library:syntax-case
   bound-identifier=?
   datum->syntax
   free-identifier=?
   generate-temporaries
   identifier-syntax
   identifier?
   make-variable-transformer
   syntax
   syntax->datum
   syntax-case
   with-syntax)
 (library:bytes
   bytes->sint-list
   bytes->u8-list
   bytes->uint-list
   bytes-copy
   bytes-copy!
   bytes-length
   bytes-s16-native-ref
   bytes-s16-native-set!
   bytes-s16-ref
   bytes-s16-set!
   bytes-s32-native-ref
   bytes-s32-native-set!
   bytes-s32-ref
   bytes-s32-set!
   bytes-s64-native-ref
   bytes-s64-native-set!
   bytes-s64-ref
   bytes-s64-set!
   bytes-s8-ref
   bytes-s8-set!
   bytes-sint-ref
   bytes-sint-set!
   bytes-u16-native-ref
   bytes-u16-native-set!
   bytes-u16-ref
   bytes-u16-set!
   bytes-u32-native-ref
   bytes-u32-native-set!
   bytes-u32-ref
   bytes-u32-set!
   bytes-u64-native-ref
   bytes-u64-native-set!
   bytes-u64-ref
   bytes-u64-set!
   bytes-u8-ref
   bytes-u8-set!
   bytes-uint-ref
   bytes-uint-set!
   bytes=?
   bytes?
   endianness
   make-bytes
   native-endianness
   sint-list->bytes
   u8-list->bytes
   uint-list->bytes)
 (library:records-procedural
   make-record-constructor-descriptor
   make-record-type-descriptor
   record-accessor
   record-constructor
   record-mutator
   record-predicate
   record-type-descriptor?)
 (library:records-explicit
   define-record-type
   record-constructor-descriptor
   record-type-descriptor)
 (library:records-implicit
   define-record-type
   record-constructor-descriptor
   record-type-descriptor)
 (library:records-reflection
   record-field-mutable?
   record-rtd
   record-type-field-names
   record-type-generative?
   record-type-name
   record-type-opaque?
   record-type-parent
   record-type-sealed?
   record-type-uid
   record?)
 (library:promises delay force)
 (library:eval
   eval
   interaction-environment
   load
   null-environment
   scheme-report-environment)
 (library:r5rs-compatibility
   exact->inexact
   inexact->exact
   modulo
   null-environment
   quotient
   remainder
   scheme-report-environment)
 (library:obsolete interaction-environment transcript-off transcript-on))
