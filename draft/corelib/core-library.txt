R6RS Standard Libraries
=======================

This proposal provides an overview of the R6RS standard libraries.  The names of these libraries are listed below.  When these libraries are named using the new library reference syntax, some or all of them may be qualified with the name "r6rs", e.g. (r6rs base).  

* base
* list
* unicode
* syntax-rules
* syntax-case
* bytes
* conditions
* arithmetic-fixnum
* arithmetic-flonum
* arithmetic-fx
* arithmetic-exact
* arithmetic-inexact
* primitive-i/o
* port-i/o
* records-procedural
* records-explicit
* records-implicit
* records-reflection
* when-unless
* case-lambda
* promises
* eval
* hash
* mutable-list
* control
* r5rs-compatibility
* simple-i/o
* obsolete

In addition to the above, some composite libraries are defined, consisting of combinations of the above libraries.  Provisionally, these composite libraries are named:

* r6rs          - intended to be what "most programs" would import
* r6rs-big

The contents of these libraries are summarized below.  Note that some of the details given below are currently superseded by library-contents.html (and the related file library-index.html).



Library: r6rs-base
------------------
This library defines the R6RS base language.  Mike has described this library as specifying a language "similar to R5RS ... that can be quickly explained and understood in its entirety, and can be used to write sensible, complete if somewhat academic programs".

The base library contains the features listed below.  The detailed contents are under discussion, so the following should be considered representative rather than definitive until further notice.  For a more detailed list, see library-contents.html.

* All of the primitive expression types described in R5RS 4.1, including if, lambda, quote, set!
* 'define' - definitions as described in R5RS 5.2
* R5RS 4.2.1 Conditionals: cond, case, and, or
* R5RS 4.2.2 Binding constructs: let, let*, letrec, letrec*
* R5RS 4.2.3 Sequencing: begin
* R5RS 4.2.4 Iteration: do, named let
* R5RS 4.2.6 Quasiquotation: quasiquote, unquote, unquote-splicing
* R5RS 4.3 let-syntax, letrec-syntax 
* R5RS 5.3 define-syntax
* R5RS 6.1 Equivalence predicates
* R5RS 6.2 Generic arithmetic procedures (excluding flonum- and fixnum-specific procedures)
* R5RS 6.3 Other data types: booleans, pairs and lists, symbols, chars, strings, vectors and related procedures.
* values, call-with-values, "let-values", etc.

* R5RS 6.4: procedure? apply map for-each
* Basic exception and conditions support (SRFI 34 and 35)

This library includes features which some client libraries may wish to exclude.  The SRFI 83 "except" clause can be used for this purpose, e.g.

(library (hello)
  (import (except (r6rs) do eq?)
          ...)
  ...)


Library: syntax-rules
---------------------
Provides the syntax-rules macro system.


Library: syntax-case
--------------------
Provides the syntax-case macro system.


Library: conditions
-------------------
SRFI 35 (parts that are not in base)


Library: control
----------------
call/cc, dynamic-wind


Library: bytes
--------------
SRFI 74


Library: arithmetic-fixnum
--------------------------
Mostly procedures whose names begin with fixnum.


Library: arithmetic-fx
----------------------
Mostly procedures whose names begin with fx.


Library: arithmetic-flonum
--------------------------
Flonum procedures.


Library: arithmetic-exact
-------------------------
Exact arithmetic procedures.


Library: arithmetic-inexact
---------------------------
Inexact arithmetic procedures.


Library: primitive-i/o
----------------------
SRFI 79


Library: port-i/o
-----------------
SRFI 81


Library: promises
-----------------
delay and force.


Library: eval
-------------
load, eval, scheme-report-environment, null-environment, interaction-environment


Library: records-procedural
---------------------------
SRFI 76 procedural layer


Library: records-explicit
-------------------------
SRFI 76 explicit-naming syntactic layer


Library: records-implicit
-------------------------
SRFI 76 implicit-naming syntactic layer (subsumes explicit-naming layer)


Library: records-reflection
---------------------------
SRFI 76 record reflection procedures


Library: hash
--------------------
Hash tables, hash functions


Library: r6rs
-------------
This library provides a fairly complete set of R6RS features, excluding certain libraries not considered part of the base R6RS language.  Composition:

    r6rs-base
    list
    unicode
    bytes
    simple-i/o
    records-explicit
    records-procedural
    syntax-rules
    syntax-case
    conditions
    arithmetic-fixnum
    arithmetic-flonum
    arithmetic-fx
    arithmetic-exact
    arithmetic-inexact
    promises
    control
    hash


Library: r6rs-big
-----------------
This library provides all features defined in the R6RS.  Composition:

    r6rs
    eval
    records-implicit
    records-reflection
    port-i/o
    primitive-i/o


Library: r5rs-compatibility
---------------------------
See library-contents.html for exact contents.

* inexact->exact exact->inexact (R6RS calls these ->exact and ->inexact)
* null-environment scheme-report-environment (deprecated per Mike's eval proposal and exceptions vote 47)
    (interaction-environment flushed)
* quotient remainder modulo


**end**
