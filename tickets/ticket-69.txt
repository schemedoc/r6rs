Ticket #69 (defect)

FIND delivers an ambiguous value
Status: new	Reported by:	Nils M Holm	Assigned to:	sperber
Priority:	major	Milestone:	r6rs
Component:	other	Version:	5.91

qThe FIND procedure described on page 63 can deliver an ambiguous
return value when applied to a list of booleans:

(find not '(#f)) => #f
(find not '(#t)) => #f

Proposed improvement: return the tail of the sublist beginning with
the first member satisfying the predicate:

(find not '(#t #f #t)) => (#f #t)
      (find not '(#f)) => (#f)
      (find not '(#t)) => #f

This modification would not only eliminate the ambiguity described
above but also make FIND more compatible to MEMBER and friends.

RESPONE:

The `memp' procedure has exactly the semantics suggested for `find'.

The `find' procedure is the codification of a frequent usage for
`memp', and, as such, useful on its own.

Issues:

- We might consider Andre van Tonder's proposal:

From: AndrevanTonder <andre@het.brown.edu>
Subject: Re: [r6rs-discuss] [Formal] FIND delivers an ambiguous value
To: Shiro Kawai <shiro@lava.net>
Cc: r6rs-discuss@lists.r6rs.org
Date: Wed, 1 Nov 2006 17:18:10 -0500 (EST)

On Wed, 1 Nov 2006, Shiro Kawai wrote:

> But still, it's so frequent that it would deserve an abstraction.

You and Eli have convinced at least me, with the following caveat:  I
am wondering if anyone would object to

 - keeping "find" as is, but
 - raising an error if the returned element would have been #f.

This seems to attain the best of both worlds by keeping the
convenience and avoiding the inaccuracy and fragility.

Cheers
Andre

