Ticket #64 (enhancement)

Declarations don't seem to be designed for real-world needs
Status: new	Reported by:	Jason Orendorff	Assigned to:	will
Priority:	minor	Milestone:	r6rs
Component: Declarations 

R5.91RS declarations strike me as odd. The common use case for this
sort of feature is to make a debug build and a release build of the
same code. In this use case, users often want debug builds to have
extra runtime checks (read: asserts) and sometimes extra debug output.

Other use cases are extremely rare, in my experience, especially for
anything higher-level than a device driver.

This leads me to the following thoughts:

1. Source code is not a useful place for this sort of information. 

2. The level of fine-grained expressivity provided by (declare) seems
   excessive. As a user, I never need anything beyond a single switch:
   "safe" vs. "fast". Even searching Makefiles for instances of gcc
   compiler flags fails to bring up anything much more exotic than
   -O2.

3. To support the dominant use case, R6RS would need to allow code to
   "see" the settings under which it's compiled. You can't implement
   an (assert) macro in R5.91RS, for example.

There seems to have been a lot of discussion on r6rs-editors about
"safe" and "unsafe", but not much about declarations as a language
feature. The two are independent; R6RS could-- and perhaps should--
specify safe and unsafe modes without (declare) and the rest.

DRAFT RESPONSE

As specified in the draft R6RS, declarations have
implementation-independent syntax but implementation-dependent
semantics.  Their purpose is related to the last two guiding
principles of the R6RS Status Report of June 21, 2006:  R6RS
Scheme should:

  * allow programmers to rely on a level of automatic run-time
    type and bounds checking sufficient to ensure type safety
    while also providing a standard way to declare whether such
    checks are desired; and

  * allow implementations to generate efficient code, without
    requiring programmers to use implementation-specific
    operators or declarations.

The draft R6RS outlaws most implementation-specific syntactic
extensions of the kind that several R5RS-conforming systems
have been using to allow programmers to advise the compiler
concerning the desirability of certain optimizations, and to
declare what degree of run-time checking is desired.  Having
outlawed such extensions, the draft R6RS cannot achieve both
of the goals quoted above without providing some syntax that
serves a similar purpose.

The interpretation of declarations is implementation-specific
because implementations of Scheme do not all use the same
technologies.  Some use interpreters, some use compilers,
and some use a combination of interpretation and compilation.
Interpreted systems are likely to ignore all declarations,
as may some compilers.  Not all compilers perform run-time
checking in the same way; the ways in which run-time checking
is performed interacts strongly with various optimizations,
and not all compilers perform the same optimizations.

The formal comment argues that

  1.  Source code is not a useful place for this sort of information. 

Some Scheme programmers have been expressing this sort of
information in source code for at least 20 years, and other
languages have supported similar features for even longer.
If it weren't useful, fewer implementations of Scheme would
have supported it.

  2. The level of fine-grained expressivity provided by (declare) seems
     excessive. As a user, I never need anything beyond a single switch:
     "safe" vs. "fast". Even searching Makefiles for instances of gcc
     compiler flags fails to bring up anything much more exotic than
     -O2.

C compilers generate unsafe code, and employ a much narrower
range of implementation techniques than do Scheme compilers.
The need for fine-grained expressivity is therefore greater
in Scheme than in C.

Most implementors of Scheme use locally unsafe code to
implement globally safe procedures.  Some of this unsafe
code is written in languages such as C or assembly language,
but much is written in Scheme, especially in the faster
systems.  The fine-grained declarations of the draft R6RS
provide an implementation-independent syntax for making this
common implementation-specific feature available to portable
programs.

  3. To support the dominant use case, R6RS would need to allow code to
     "see" the settings under which it's compiled. You can't implement
     an (assert) macro in R5.91RS, for example.

Without fine-grained expressivity, the assert macro could
itself be defined in terms of an "ifdebug" macro that would
provide a single point of control.  With fine-grained
expressivity, an assert macro that queried the priorities
under which its use is compiled might still not behave as
expected, since the draft R6RS allows implementations to
ignore all declarations.  In particular, R6RS-conformant
implementations would be allowed to ignore declarations
during macro expansion while interpreting declarations at
compile time.

Making the priorities available through queries at macro
expansion time would interact with hygiene.  In the R5RS,
macros cannot obtain any information about their context by
direct inquiry; hygienic expansion is based upon deferred
resolution of identifiers with respect to context.  The
procedural macros that are proposed for the R6RS allow
certain limited inquiries about the context, specifically
so macros can break hygiene.

Although it would be possible to add another hygiene-breaking
mechanism that macros can use to query the context of their
uses, the proposed mechanism would be limited to the special
purpose of querying priorities that are likely to be constant
in many implementations, including some whose compilers might
actually pay attention to the priorities after macro expansion.
Whether the benefit of that feature would justify inclusion
within R6RS is questionable.

The formal comment concludes with this:

  There seems to have been a lot of discussion on r6rs-editors about
  "safe" and "unsafe", but not much about declarations as a language
  feature. The two are independent; R6RS could-- and perhaps should--
  specify safe and unsafe modes without (declare) and the rest.

Yes, safe and unsafe modes could be controlled by a global
command-line switch, specified on the first line of a script.

The main advantage of declarations as described by the draft
R6RS is that they make it possible to declare priorities at
a finer grain: programmers can say that suspect code should
be compiled for debugging, that initialization code should be
compact, that certain inner loops should run fast, and that
a few of those inner loops, after careful review, can omit
run-time checks.
