Formal comment #200 (defect)

I/O: Bytevector output ports and `set-port-position!'
Reported by: 	Ludovic Courtès
Version: 	5.92

Summary

The return value of a bytevector output port procedure is
under-specified when `set-port-position!' is used.

Description

Section 7.2.10 of the report (page 32) explains that binary bytevector
output ports "will support the port-position' and set-port-position!'
operations.". It then defines the associated procedure as follows:

    When the procedure is called without arguments, it returns a
    bytevector consisting of the port's accumulated data and removes
    the accumulated data from the port.

According to this definition, the procedure returns all the data
accumulated instead of just the data _up to_ the current port
position. I believe the latter would be a more appropriate definition
since otherwise the bytevector returned by the procedure differs from
the what was intended by the port user.

Example:

  (let-values (((port get-content)
                (open-bytevector-output-port)))
    (put-bytevector port (u8-list->bytevector '(1 2 3 4 5 6)))
    (set-port-position! port 0)
    (put-bytevector port (u8-list->bytevector '(0 0 0)))
    (let ((first (get-content)))
      (let ((second (get-content)))
        (set-port-position! port (+ (port-position port) 3))
        (list first second (get-content)))))

Using the current semantics, FIRST and SECOND would be equal to
`#vu8(0 0 0 4 5 6)' and `#vu8()', respectively, and the following
`set-port-position!' would raise an error.

Instead, I believe it should return `(#vu8(0 0 0) #vu8() #vu8(4 5
6))', which is closer to the user intention.

Thus, the aforementioned paragraph could be rewritten along the
following lines:

    When the procedure is called without arguments, it returns a
    bytevector consisting of the port's accumulated data up to its
    current position (when it supports port-position' and
    set-port-position!'). It removes all the accumulated data up to
    the port's current position from the port. Accumulated data that
    is beyond the port's current position should be kept by the
    port. Invoking the procedure also sets the port position to zero
    (if the port supports `port-position').

I'm not sure about this last sentence since it would make bytevector
output ports behave differently from "regular" output ports, which
might be an issue.

An alternative solution might be to disallow `set-port-position!'
altogether.

RESPONSE:

We do not feel that the behavior of the bytevector port's data extraction
procedure is underspecified.  It is reasonable, however, to consider
whether the current semantics is approriate.

It is possible that a programmer would wish for a bytevector port's
procedure to return only the accumulated data up to the current position
(the proposed behavior).  It is also possible that a programmer would want
all of the accumulated data (current behavior).  The proposed behavior can
be simulated by the current using bytevector-copy! and put-bytevector. 
Thus, we see no compelling reason to abandon the current behavior based on
usage.

Incidentally, the current behavior cannot be simulated by the proposed
behavior without a new port-length procedure that reports the size of the
object (file, string, etc.) that underlies the port.  The lack of such a
procedure should be rectified.

Implementation considerations may also come into play.  A typical
high-performance implementation would use an internal bytevector buffer
that is replaced with a longer buffer whenever a write operation would
cause the buffer's capacity to be exceeded.  To allow room for future
writes without excessive buffer allocation and copying, the size of the
new buffer would be greater than is needed to hold just the old plus newly
written data. 

With the current semantics, the extraction procedure can simply return the
buffer after truncating it (e.g., by altering its length) and replacing it
in the port with an empty bytevector.  (A new buffer would then be
allocated only if additional data is ever written to the port.)  With the
proposed semantics, the extraction procedure must allocate a new
bytevector to hold either the extracted data or the data that is
accumulated past the current position, with some copying involved in
either case, if the current position is not at the end of the accumulated
data.  (It is possible that the existing buffer can be split in two if the
length is stored in a separate header and alignment constraints are met
for the tail of the buffer holding the unextracted data, but this is not
likely to be the case in most implementations.)

For the current semantics, the implementation must maintain a record of
the end of accumulated data separate from the current position.  For the
proposed semantics, it is useful to do so to avoid unnecessary copying and
buffer allocation.  In systems that use a common internal representation
for all ports, this might increase the size of every port by one word (two
for input/output ports).

To avoid this requirement, a third semantics is worth considering, which
is a combination of the current and proposed:  the extraction procedure
returns a bytevector containing the data accumulated up to the current
position, yet still clears all of the accumulated data.  Despite the
potential cost savings, we prefer the current semantics since it seems
more in line with the way files work; files are never truncated implicitly
to the current position, so this should not be the case with bytevectors
either.

The formal comment indirectly brings up another issue, which is that
the behavior of set-file-position! is not specified when an attempt is
made to set the position beyond the end of the underlying object (file,
string, etc.).  We intend to adopt the Posix lseek behavior:  the position
can be set beyond the end of the underlying object, but the object is not
extended unless and until data is written at that position, in which case
the intervening bytes are set to zero.

Summary: 

No change will be made in the semantics of the bytevector extraction
procedure.

Independently, however, the behavior of set-file-position! when an
attempt is made to set the position beyond the end of the underlying
object will be specified.  We will also add a port-length procedure and
corresponding port-has-port-length? predicate.
