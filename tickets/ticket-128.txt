Ticket #128 (defect)

Declarations do not belong in the report
Status: new	Reported by:	Abdulaziz Ghuloum	Assigned to:	will
Priority:	critical	Milestone:	r6rs
Component:	other	Version:	5.91
Keywords:		Cc:	

One sentence summary: Declarations have no reliable semantics and
should be dropped from the report.

Description: 

A big problem with declarations is that the way they're specified,
they do not follow any scoping rules. This is especially true in the
presence of macros: when one library with one declaration exports a
macro that is used in another library using a different set of
declarations. There is just no meaningful way in which the programmer
can specify the extent of a declaration or know how a single
declaration in one library is going to affect the rest of the program.

Another problem with declarations is that they are very very
implementation specific. The current set declarations may be useless
for some implementations, while other implementations may need a
different set. There is no one-size-fits-all set.

There is no way in which one can use declarations reliably, safely,
and in a portable way. The original goal of R6RS was portability and
code sharing. Declarations, as they stand in the report, do not help
accomplishing that goal and may indeed hinder it.

Recommendation: 

Implementation-specific features (including declarations) should be
implemented as implementation-specific libraries and not be mandated
by the report.

DRAFT RESPONSE

As specified in the draft R6RS, declarations have
implementation-independent syntax but implementation-dependent
semantics.  Their purpose is related to the last two guiding
principles of the R6RS Status Report of June 21, 2006:  R6RS
Scheme should:

  * allow programmers to rely on a level of automatic run-time
    type and bounds checking sufficient to ensure type safety
    while also providing a standard way to declare whether such
    checks are desired; and

  * allow implementations to generate efficient code, without
    requiring programmers to use implementation-specific
    operators or declarations.

The draft R6RS outlaws most implementation-specific syntactic
extensions of the kind that several R5RS-conforming systems
have been using to allow programmers to advise the compiler
concerning the desirability of certain optimizations, and to
declare what degree of run-time checking is desired.  Having
outlawed such extensions, the draft R6RS cannot achieve both
of the goals quoted above without providing some syntax that
serves a similar purpose.

The interpretation of declarations is implementation-specific
because implementations of Scheme do not all use the same
technologies.  Some use interpreters, some use compilers,
and some use a combination of interpretation and compilation.
Interpreted systems are likely to ignore all declarations,
as may some compilers.  Not all compilers perform run-time
checking in the same way; the ways in which run-time checking
is performed interacts strongly with various optimizations,
and not all compilers perform the same optimizations.

If the declarations described by the draft R6RS were removed
without adding anything to take their place, then the first
of the two goals quoted above would not be achieved.  In
particular, the safety guaranteed by section 4.4 would either
no longer be guaranteed (as in the R5RS), or would have to be
guaranteed for all R6RS programs, without any means for
getting around the guarantee.

In other words, the formal comment advocates a course of
action that implies a stark choice between total safety
and total unsafety.  The formal comment does not indicate
how that stark choice should be resolved.

Declarations could be stricken from the report while deleting
or revising the safety guarantees of section 4.4.  Although
that would fail to achieve one of the report's few published
goals, it would not be a critical blow to the report.  On the
other hand, the problems created by declarations are not so
critical as the problems that would be created by failing to
achieve that goal.
