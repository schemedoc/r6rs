Ticket #77 (enhancement)

Querying Declaration Quality Priorities
Status: new	Reported by:	Michael Lenaghan	Assigned to:	will
Priority:	major	Milestone:	r6rs
Component: Declarations 

Section: 9.22 (pg 56) 

Summary

Developers should have access to declaration quality priorities so
that developer code can take the current value into account.

Description

Chez Scheme has an optimize-level parameter. The value of
optimize-level can be both read and written. Currently, optimize-level
3 means that the compiler is allowed to generate unsafe
code. Developers can query the value of optimize-level at expansion
time so that expanded code takes the current setting into account.

For example, in Chez Scheme it's possible to write code like this:

(define-syntax define-something
    (lambda (e)
        (syntax-case e ()
            [(_ (field ...))
                (with-syntax ([no-type-check (>= (optimize-level) 3)])
                    #'(<some code>
                            (if (or no-type-check (check-type? <some code>))
                                <some code>
                                <some error code>)
                        <some code>)])))

Chez Scheme itself uses an approach like this to avoid record type
checks in record field accessors when expanding records at
optimize-level 3.

To write code like this--especially in a portable way--developers need
access to the current values of the declaration qualities.

DRAFT RESPONSE

As specified in the draft R6RS, declarations have
implementation-independent syntax but implementation-dependent
semantics.  Their purpose is related to the last two guiding
principles of the R6RS Status Report of June 21, 2006:  R6RS
Scheme should:

  * allow programmers to rely on a level of automatic run-time
    type and bounds checking sufficient to ensure type safety
    while also providing a standard way to declare whether such
    checks are desired; and

  * allow implementations to generate efficient code, without
    requiring programmers to use implementation-specific
    operators or declarations.

The draft R6RS outlaws most implementation-specific syntactic
extensions of the kind that several R5RS-conforming systems
have been using to allow programmers to advise the compiler
concerning the desirability of certain optimizations, and to
declare what degree of run-time checking is desired.  Having
outlawed such extensions, the draft R6RS cannot achieve both
of the goals quoted above without providing some syntax that
serves a similar purpose.

The interpretation of declarations is implementation-specific
because implementations of Scheme do not all use the same
technologies.  Some use interpreters, some use compilers,
and some use a combination of interpretation and compilation.
Interpreted systems are likely to ignore all declarations,
as may some compilers.  Not all compilers perform run-time
checking in the same way; the ways in which run-time checking
is performed interacts strongly with various optimizations,
and not all compilers perform the same optimizations.

Since implementations of Scheme are allowed to ignore all
declarations, any proposed way for Scheme code to access the
priorities declared for it must allow the reported priority
to be 1, regardless of any declarations that actually occur
within the source code.

A proposal that allows Scheme code to access those priorities
at run time would be fairly straightforward, but the example
given in this formal comment would require the priorities to
be available at macro expansion time, which interacts with
hygiene.  In the R5RS, macros cannot obtain any information
about their context by direct inquiry; hygienic expansion is
based upon deferred resolution of identifiers with respect to
context.  The procedural macros that are proposed for the
R6RS allow certain limited inquiries about the context,
specifically so macros can break hygiene.

Although it would be possible to add another hygiene-breaking
mechanism that macros can use to query the context of their
uses, the proposed mechanism would be limited to the special
purpose of querying priorities that are likely to be constant
in many implementations, including some whose compilers might
actually pay attention to the priorities after macro expansion.
Whether the benefit of the proposed feature justifies its
inclusion within R6RS is questionable.

Chez Scheme could continue to provide its current facilities
to programs that import a Chez-specific library for expand,
so omitting the proposed feature from the R6RS would not
break any existing code.
