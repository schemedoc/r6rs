Ticket #4 (simplification)

Scheme and Common Lisp are not the only statically-scoped Lisp dialects
Status: closed (fixed)
Reported by:	Pascal Costanza
Assigned to:	sperber
Priority:	trivial
Component:	concepts
Version:	5.91
Keywords:	
Cc:	

4.2, third paragraph, page 16, states the following: "Like Algol and
Pascal, and unlike most other dialects of Lisp except for Common Lisp,
Scheme is a statically scoped language with block structure."

It was indeed the case that when this sentence was originally written
that Scheme and Common Lisp were almost the only dialects with static
scoping. However, this situation has changed by now. There have been
quite a few statically scoped Lisp dialects since then (EuLisp?,
Dylan, ISLISP, to name a few).

Suggestion: Drop the first part of the sentence, keeping only this:
"Scheme is a statically scoped language with block structure."

Ticket #13 (defect)

Definition of <constituent> omits characters of category Ll
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	trivial
Component:	lexicalsyntax
Version:	5.91
Keywords:	
Cc:	

The definition of <constituent> in 3.2.1, p. 11, omits characters of
category Ll (lower case letters).

Ticket #15 (defect)

"Unicode scalar value" is preferred to "scalar value"
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	minor
Component:	lexicalsyntax
Version:	5.91
Keywords:	
Cc:	

This affects at least 3.1 (p. 11) and probably other places as well. I
checked with Ken Whistler at the Unicode Consortium, and he confirmed
that although "scalar value" and "Unicode scalar value" are synonyms,
it is the latter which is the defined term (Unicode 4.0 definition
D28) and is used throughout the Unicode Standard.

Ticket #16 (defect)

Omitted word in last graf of 3.2.2
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	trivial
Component:	lexicalsyntax
Version:	5.91
Keywords:	
Cc:	

The last sentence of 3.2.2 reads:

When it occurs in program text, it signifies that program text to be
written purely in the language described by this report (see section
6.1)

It should read something like "program text must be written".

Ticket #19 (defect)

Summary: letrec* and letrec explained identically in 9.5.6
Status: closed (duplicate)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	major
Component:	presentation
Version:	5.91
Keywords:	
Cc:	

In 9.5.6 (p. 32), the text reads "in a letrec* and in a letrec
expression", suggesting that something was to be supplied for letrec*
but was not. I suggest something like "all bindings are in effect, but
evaluations are performed sequentially" for letrec*.

Ticket #20 (defect)

"regular expression" confusing in 9.5.7
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	minor
Component:	baselibrary
Version:	5.91
Keywords:	
Cc:	

In the second bullet of 9.5.7 (p. 34), the phrase "regular expression"
is confusing because it is a term of art which is not being used in
its technical meaning. I suggest "ordinary expression".

Ticket #21 (defect)

"Unicode 9" etc. is bad wording
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	mflatt
Priority:	trivial
Component:	unicode
Version:	5.91
Keywords:	
Cc:	

To refer to the Unicode control characters, rather than "Unicode 9"
write "U+0009", for "Unicode 10" write "U+000A", and so on. Nobody
uses decimal numbers for Unicode characters, and "Unicode 9" looks
like a version of Unicode rather than a codepoint.

Ticket #23 (defect)

file-options should be a procedure, not syntax
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	minor
Component:	i/o
Version:	5.91
Keywords:	
Cc:	

Making file-options a procedure makes it possible to pass a computed
list of symbols. Saving a '(...) wrapper is not sufficient
justification to expose the file-options constructor only as syntax.

This affects 15.2.2 on p. 79.

Ticket #24 (defect)

U+FFFD is not meant for encoding errors.
Status: closed (invalid)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	minor
Component:	i/o
Version:	5.91
Keywords:	
Cc:	

The Unicode character U+FFFD is intended to represent a character in a
non-Unicode encoding which is not representable within Unicode as
currently defined. It is not intended to represent an encoding error.

The Plan 9 OS uses U+0080, which has no Unicode or ISO defined
meaning, to represent encoding errors. I suggest it.

This affects error-handling-code in 15.3.3 (p. 87).

Ticket #29 (defect)

Missing comma in "Arithmetic Expressions" on p. 39
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	trivial
Component:	baselibrary
Version:	5.91
Keywords:	
Cc:	

The text explaining < etc. should end "; and #f otherwise."

Ticket #30 (defect)

The definition of standard-{output,error} port speaks of input
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	trivial
Component:	i/o
Version:	5.91
Keywords:	
Cc:	

The phrase is "If the returned port supports textual input"; it should
be "textual output".

Ticket #31 (defect)

6 with ring above on p. 122
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	trivial
Component:	presentation
Version:	5.91
Keywords:	
Cc:	

On p. 122, section 21, we have 6rs where the 6 has a ring above. This
clearly should read R6RS.

Ticket #33 (defect)

Typo in definition of the sign function
Status: closed (fixed)
Reported by:	Stanislav Ievlev
Assigned to:	sperber
Priority:	trivial
Component:	miscellaneous
Version:	5.91
Keywords:	
Cc:	

Function sign should be: 

(define (sign n)
  (cond 
     ((negative? n) -1)
     ((positive? n) 1)
     (else 0)))

Previous definition returns zero on negative numbers.

Ticket #34 (defect)

forall and exists description and examples
Status: closed (fixed)
Reported by:	Andre van Tonder
Assigned to:	sperber
Priority:	minor
Component:	miscellaneous
Version:	5.91
Keywords:	
Cc:	

Summary

Confusing language, typos and missing examples. 

Description

- The descriptions of forall and exists are confusing and incomplete. 

  For example, it is not stated that proc must take as many arguments
  as there are lists. Also, it is not explained what applying proc
  "elementwise" means. - The last example of each of forall and exists
  are missing closing parentheses.

- There is no example with more than one list argument. 

Proposal

The descriptions in SRFI-1 are a little clearer (though not entirely
applicable), and contains examples with more than one list.

Ticket #35 (enhancement)

Equivalence predicate version of memp
Status: closed (fixed)
Reported by:	Andre van Tonder
Assigned to:	sperber
Priority:	minor
Component:	miscellaneous
Version:	5.91
Keywords:	
Cc:	

Summary

Memp is unwieldy and potentially inefficient in the very common case
where one tests for membership is based on an equivalence
predicate.

Description

In my experience the most common usage pattern of generic membership
is expressed by the SRFI-1 generic member procedure, which has to be
expressed in r6rs as follows:

  (member x l =)  ==>  (memp (lambda (y) (= x y)) l)

This gets unwieldy to write, is hard to read, and is inefficient in
the absence of smart optimizations.

Proposal

The inclusion of an additional procedure for generic membership based
on an equivalence predicate argument. One possibility is enhancing
member with an extra optional argument, or using a new name for it
such as mem=

Ticket #37 (defect)

Multiple value expressions in scripts
Status: closed (fixed)
Reported by:	Andre van Tonder
Assigned to:	mflatt
Priority:	minor
Component:	scripts
Version:	5.91
Keywords:	
Cc:	

Page : 27 
Summary

The current description of script semantics does not allow multiple
return values for expressions preceding definitions. A small typo is
also pointed out.

Description

The draft states: "each <expression> that appears before a variable
definition in the script body is converted into a dummy definition
(define <variable> <expression>), where <variable> is fresh
identifier."

(First a typo: "variable definition" should presumably be "variable or
syntax definition".)

Thes description does not allow <expression> to return multiple
values. This restriction was presumably not the intent of the authors.

Ticket #43 (defect)

(+ x 42) adds 42 to x, not x to 42
Status: closed (fixed)
Reported by:	Reinder Verlinde
Assigned to:	sperber
Priority:	minor
Component:	other
Version:	5.91
Keywords:	
Cc:	

Section 1.5, last paragraph (page 7, right column, at the top) reads:

"The entire expression in this example is a procedure call; its
operator is (lambda (x) (+ x 42)), which evaluates to a procedure that
takes a single number and add it to 42."

I think that should read "and adds 42 to it". It is only a character
longer and 'more correct'. At the very least, replace "add" by "adds"
to make the sentence grammatically correct.

Ticket #44 (defect)

'of course' should not be used in the report
Status: closed (fixed)
Reported by:	Reinder Verlinde
Assigned to:	sperber
Priority:	trivial
Component:	other
Version:	5.91
Keywords:	
Cc:	

Section 1.9 (page 8, right column, just past the first table) reads:

"The ' is, of course, not needed for number or boolean literals"

I think that "of course" should be removed, because a) it is only
obvious for those with a Scheme or Lisp background and b) a language
specification should not make any assumptions about a reader's
knowledge.

Ticket #50 (defect)
"inexact-make-rectangular" => "inexact-make-polar" in example
Status: closed (fixed)
Reported by:	Jed Davis
Assigned to:	will
Priority:	trivial
Component:	arithmetic
Version:	5.91
Keywords:	
Cc:	

Summary

"inexact-make-rectangular" was written where "inexact-make-polar" was
apparently intended.

Description

At the end of section 16, on page 107, after
inexact-make-rectangular's behavior is demonstrated, there follows an
example with the obvious polar coordinates, but passed to
inexact-make-rectangular again rather than inexact-make-polar.

Ticket #53 (defect)

letrec* vs. letrec
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	sperber
Priority:	minor
Component:	presentation
Version:	5.91
Keywords:	
Cc:	

In 9.5.6 (p. 32), the text reads "in a letrec* and in a letrec
expression", suggesting that something was to be supplied for letrec*
but was not. I suggest something like "all bindings are in effect, but
evaluations are performed sequentially" for letrec*.

Ticket #54 (defect)

"Unicode 9" etc. is bad wording
Status: closed (fixed)
Reported by:	John Cowan
Assigned to:	mflatt
Priority:	trivial
Component:	unicode
Version:	5.91
Keywords:	
Cc:	

To refer to the Unicode control characters, rather than "Unicode 9"
write "U+0009", for "Unicode 10" write "U+000A", and so on. Nobody
uses decimal numbers for Unicode characters, and "Unicode 9" looks
like a version of Unicode rather than a codepoint.

Ticket #55 (defect)

Typo: occurrence of syntax-object->list in example.
Status: closed (fixed)
Reported by:	Andre van Tonder
Assigned to:	mflatt
Priority:	trivial
Component:	libraries
Version:	5.91
Keywords:	
Cc:	

Component : Libraries Pages : 26 

Description

Macro mvlet on p. 26 has occurrence of syntax-object->list. This
procedure is not in the report.

Suggestion

Remove syntax-object->list, since it is not necessary.

Ticket #56 (defect)

Minor omission (from library syntax keyword list)
Status: closed (fixed)
Reported by:	Andre van Tonder
Assigned to:	mflatt
Priority:	trivial
Component:	libraries
Version:	5.91
Keywords:	
Cc:	

Page : 22 

"The names library, export, import, for, run, expand, meta, import,
export, only, except, and rename appearing in the library syntax are
part of the syntax and are not reserved, ..."

should be: 

"The names library, export, import, for, run, expand, meta, import,
export, only, except, rename,

and, or, not, >= and <= (inserted) 

appearing in the library syntax are part of the syntax and are not
reserved, ..."
